<!--
 The scripts file contains a set of common functions to be used in forms
-->
<script>
  <!-- Queries Section -->
  <function type="query" name="shared" parameternames="activityId sharedId" queryname="shared"/>
  <!-- -->
  <function type="function" name="getInstancesOfClass" parameternames="className" return="List">
    <![CDATA[
      /*
      Name
          getInstancesOfClass
      Description
          getInstancesOfClass
      Countable
          true
      Parameters
          className
      Author
          Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
          20180619tue
      */
      import org.kuwaiba.apis.persistence.PersistenceService;            
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      if (className instanceof String) {
          try {                    
              def bem = PersistenceService.getInstance().getBusinessEntityManager();
              def objects = bem.getObjectsOfClassLight(className, -1);
              return RemoteObjectLight.toRemoteObjectLightArray(objects);
          } catch(Exception ex) {
              println(ex.getMessage());
          };
      };
      return null;
    ]]>
  </function>

  <function type="function" name="getListTypeItems" parameternames="className" return="List">
    <![CDATA[
      /*
      Name
        getListTypeItems
      Description
        getListTypeItems
      Countable
        true
      Parameters
        className
      Author
        Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
        20180619tue
      */
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def listTypeItems = aem.getListTypeItems(className);

      return RemoteObjectLight.toRemoteObjectLightArray(listTypeItems);
    ]]>
  </function>
  <!-- Validator Section -->
  <function type="validator" name="emailValidator" parameternames="aField" message="The value must be a email">
    <![CDATA[
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;

      Pattern pat = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}\$", Pattern.CASE_INSENSITIVE);
      if (aField.getValue() == null)
          return false;
      return pat.matcher(aField.getValue()).matches();
    ]]>
  </function>
  <!-- Functions Section -->
  <function type="function" name="getAttributeFromField" parameternames="field attrName" return="Object">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      if (field.getValue() != null) {
        def fieldObject = bem.getObject(field.getValue().getClassName(), field.getValue().getId());
        return fieldObject.getAttributes().get(attrName);
      };
      null;
    ]]>
  </function>
  
  <function type="function" name="getSelectedRowGridDataValue" parameternames="grid colId">
    <![CDATA[
      if (grid != null && colId != null && grid.getSelectedRow() != -1L) {

        def row = Integer.valueOf(String.valueOf(grid.getSelectedRow()));
        def col = Integer.valueOf(colId);
        def data = grid.getData(row, col);

        return data;
      };
      null;
    ]]>
  </function>
    
  <function type="function" name="getRowsInGridSaved" parameternames="activityId sharedGridId aGrid">
    <![CDATA[
      if (aGrid != null && aGrid.getRows() != null && !aGrid.getRows().isEmpty()) {
        return aGrid.getRows();
      };
      def paramNames = new ArrayList();

      paramNames.add("activityId");
      paramNames.add("sharedId");

      def paramValues = new ArrayList();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "rowscount");

      def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      paramValues.clear();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "columnscount");

      def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      def res = new ArrayList();

      if (strRowsCount != null && strColumnsCount != null) {

        def rowscount = Integer.valueOf(strRowsCount);
        def columnscount = Integer.valueOf(strColumnsCount);

        for (int i = 0; i < rowscount; i++) {
          def lst = new ArrayList();

          for (int j = 0; j < columnscount; j++) {
            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j);

            def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "datatype");

            def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            if ("RemoteObjectLight".equals(dataType)) {

              paramNames.clear();

              paramNames.add("activityId");
              paramNames.add("sharedId");

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectname");

              def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectId");

              def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "classid");

              def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramNames.clear();

              paramNames.add("classId");
              paramNames.add("objectId");

              paramValues.clear();

              paramValues.add(classid);
              paramValues.add(objectId);

              def rol = elementScript.getFunctionByName("getObjectLightUsingClassId").run(paramValues);

              lst.add(rol);
            } else {
              lst.add(dataGrid);
            };
          };
          res.add(lst);
        };
      };
      res;
    ]]>
  </function>
  
  <function type="function" name="getFieldContacts" parameternames="customerField contactClass" return="RemoteObjectLight">
    <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      
      if (customerField.getValue() != null) {

        def paramNames = new ArrayList();
        def paramValues = new ArrayList();

        paramNames.add("objectClassName");
        paramNames.add("objectId");
        paramNames.add("attributeName");

        paramValues.add(customerField.getValue().getClassName());
        paramValues.add(customerField.getValue().getId());
        paramValues.add("contacts");
        def contacts = bem.getSpecialAttribute(customerField.getValue().getClassName(), customerField.getValue().getId(), "contacts");
        
        if (contacts != null) {
          return RemoteObjectLight.toRemoteObjectLightArray(contacts);
        };
      };
      null;
    ]]>
  </function>
  <!--Useful Functions-->
  <function type="function" name="getValue" parameternames="aField" return="String">
    <![CDATA[
      def result = "";
      if (aField.getValue() != null)
          result = aField.getValue().toString();
      result;
    ]]>
  </function>
  <!-- Not used yet -->
  <function type="function" name="getContact" parameternames="provider contactType" >
    <![CDATA[

    def paramNames = new ArrayList();
    def paramValues = new ArrayList();

    paramNames.add("objectClassName");
    paramNames.add("objectId");
    paramNames.add("attributeName");

    paramValues.add(provider.getValue().getClassName());
    paramValues.add(provider.getValue().getId());
    paramValues.add("contacts");

    def contacts = bem.getSpecialAttribute(customerField.getValue().getClassName(), Long.valueOf(customerField.getValue().getId()), "contacts");

    def result = null;

    if (contacts != null && contacts.size() > 0) {

      contacts.each { contact ->
        if (contactType != null && contactType.equals(contact.getClassName()))
          result = contact;
      }

    } else
      def dummy = "dummy";
    result;

    ]]>
  </function>
  <!-- Creates a new contact asociated to the provider -->
  <function type="function" name="createContact" parameternames="contactType provider role name email cellphone availability language">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.apis.persistence.util.StringPair;
      import java.util.ArrayList;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def properties = new ArrayList();
      properties.add(new StringPair("name", name.getValue()));
      properties.add(new StringPair("role", role.getValue()));
      properties.add(new StringPair("email1", email.getValue()));
      properties.add(new StringPair("cellphone", cellphone.getValue()));
      properties.add(new StringPair("availability", availability.getValue()));
      properties.add(new StringPair("language", language.getValue().getId().toString()));
      bem.createContact(contactType.getValue(), properties, provider.getValue().getClassName(), provider.getValue().getId());
      ]]>
    </function>

    <!-- Retrieve the Contact Types available -->
    <function type="function" name="getContactTypes">
        <![CDATA[
        def contactTypes = ['BillingContact', 'CommercialContact', 'TechnicalContact'];
        contactTypes;
        ]]>
    </function>
    <!-- Retrieve an object from a field -->
    
    <function type="function" name="getObject" queryname="getObject" parameternames="param">
        <![CDATA[
        def object = param.getValue();
        object;
        ]]>
    </function>
    
  <!-- Updates the data related to a comboBox in order to see visually the effects of an edition task  -->
  <function type="function" name="updateCmbRelatedData" parameternames="comboBox">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;

        def bem = PersistenceService.getInstance().getBusinessEntityManager();
        if(comboBox.getValue() != null)
          return bem.getObject(comboBox.getValue().getClassName(), comboBox.getValue().getId());
        null;
      ]]>
    </function>

  <function type="function" name="commitCreateService" parameternames="customerId customerClassName itemServiceId itemServiceClass codeService processInstanceId" return="Object">
    <![CDATA[
      /*
      Name
        commitCreateService
      Description
        commitCreateService
      Countable
        false
      Parameters
        customerId
        customerClassName
        itemServiceId
        itemServiceClass
        codeService
        processInstanceId
      Author
        Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
        20180712wed
      */
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.services.persistence.util.Util;
      /* Loading parameters */
      def processInstanceId = Long.valueOf(processInstanceId);

      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def aem = PersistenceService.getInstance().getApplicationEntityManager();

      def itemService = bem.getObject(itemServiceClass, itemServiceId);
      def classToMap = itemService.getAttributes().get("classToMap");

      def servicePools = bem.getPoolsInObject(customerClassName, customerId, "GenericService");

      String[] attributeNames = ["name"];
      String[] attributeValues = [codeService];

      def flag = false;

      servicePools.each { servicePool ->
        if (servicePool.getName().equals(itemService.getName())) {
          def newPoolItemId = bem.createPoolItem(servicePool.getId(), classToMap, attributeNames, attributeValues, null);
          flag = true;
          return;
        };
      };

      if (!flag) {
        def newPoolId = aem.createPoolInObject(customerClassName, customerId, itemService.getName(), itemService.getName(), "GenericService", 3);
        def newPoolItemId = bem.createPoolItem(newPoolId, classToMap, attributeNames, attributeValues, null);
      };
      "true";
    ]]>
  </function>
  <function type="function" name="getObjectLightUsingClassId" parameternames="classId objectId" return="Object">
    <![CDATA[
      /*
      Name
          getObjectLightUsingClassId
      Description
          getObjectLightUsingClassId
      Countable
          false
      Parameters
          classId
          objectId
      Author
          Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
          20180716mon
      */
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def classId = Long.valueOf(classId);
      
      def bem = PersistenceService.getInstance().getBusinessEntityManager();
      def mem = PersistenceService.getInstance().getMetadataEntityManager();

      def _class = mem.getClass(classId);
      def objectClassName = _class.getName();

      def object = bem.getObjectLight(objectClassName, objectId);

      new RemoteObjectLight(object);
    ]]>
  </function>
  <function type="function" name="getSubClassesLight" parameternames="className includeAbstractClasses includeSelf" return="List">
    <![CDATA[
      /*
      Name
          getSubClassesLight
      Description
          getSubClassesLight
      Countable
          true
      Parameters
          className
          includeAbstractClasses
          includeSelf
      Author
          Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
          20180619tue
      */
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.metadata.RemoteClassMetadataLight;

      def includeAbstractClasses = Boolean.valueOf(includeAbstractClasses);
      def includeSelf = Boolean.valueOf(includeSelf);

      def mem = PersistenceService.getInstance().getMetadataEntityManager();

      def subClassesLight = mem.getSubClassesLight(className, includeAbstractClasses, includeSelf);

      def res = new ArrayList();
      for (def _class : subClassesLight) {
          res.add(new RemoteClassMetadataLight(_class));
      };
      res;
    ]]>
  </function>
  <function type="function" name="getInstancesOfFinalClass" parameternames="className" return="List">
    <![CDATA[
      /*
      Name
          getInstancesOfFinalClass
      Description
          getInstancesOfFinalClass
      Countable
          true
      Parameters
          className
      Author
          Johny Andrés Ortega Ruiz <johny.ortega@kuwaiba.org>
      Date
          20180619tue
      */
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      def instances = new ArrayList();
      instances = RemoteObjectLight.toRemoteObjectLightArray(bem.getObjectsOfClassLight(className, -1));

      instances;
    ]]>
  </function>
  <!-- Jalbersson Folder -->
    <!-- This function is used to fill the data of a grid with elements with operational state 'Spare' -->
    <function type="function" name="getElements" parameternames="cmbId" return="Matriz">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      def classsInstances = bem.getObjectsOfClass(cmbId.getValue(), -1);

      def classSpare = new ArrayList();
      def locationsArray = new ArrayList();

      classsInstances.each { instance ->
          def equipmentStatusId = instance.getAttributes().get("state");
          if(equipmentStatusId != null){
            def equipmentStatus = aem.getListTypeItem("OperationalState", equipmentStatusId);
            if(equipmentStatus != null && equipmentStatus.getName() == "Spare"){
              def row = new ArrayList();
              row.add(new RemoteObjectLight(instance));

              locationsArray = bem.getParentsUntilFirstOfClass(instance.getClassName(), instance.getId(), "City");

              def position = 0;
              def fieldObject = bem.getObject(instance.getClassName(), instance.getId());
              def positionRecieved = fieldObject.getAttributes().get("position");
              if(positionRecieved != null)
                position = positionRecieved;
              row.add(position);

              def rack = null;
              def city = "";
              def building = "";
              locationsArray.each { location ->
                switch(location.getClassName()){
                case "Rack":
                  rack = new RemoteObjectLight(location);
                  break;

                case "Building":
                  building = location.getName();
                  break;

                case "City":
                  city = location.getName();
                  break;
                default:
                  break;
                };
              };
              if(rack != null)
                row.add(rack);
              else
                row.add("");
              row.add(building);
              row.add(city);

              classSpare.add(row);
              locationsArray.clear();
            }
          }
      };

      classSpare;
      ]]>
    </function>
    
  <!-- This function is used to fill the ordered material with a status option -->
    <function type="function" name="getMaterialPreconfigurationStatus" parameternames="activityId sharedGridId" return="Matriz">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;
      import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def bem = PersistenceService.getInstance().getBusinessEntityManager();


      def paramNames = new ArrayList();

      paramNames.add("activityId");
      paramNames.add("sharedId");

      def paramValues = new ArrayList();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "rowscount");

      def strRowsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      paramValues.clear();

      paramValues.add(activityId);
      paramValues.add(sharedGridId + "columnscount");

      def strColumnsCount = scriptQueryExecutor.execute("shared", paramNames, paramValues);

      def res = new ArrayList();
      if (strRowsCount != null && strColumnsCount != null) {

        def rowscount = Integer.valueOf(strRowsCount);
        def columnscount = Integer.valueOf(strColumnsCount);

        for (int i = 0; i < rowscount; i++) {
          def lst = new ArrayList();

          for (int j = 0; j < columnscount; j++) {
            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j);

            def dataGrid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            paramValues.clear();

            paramValues.add(activityId);
            paramValues.add(sharedGridId + i + j + "datatype");

            def dataType = scriptQueryExecutor.execute("shared", paramNames, paramValues);

            if ("RemoteObjectLight".equals(dataType)) {

              paramNames.clear();

              paramNames.add("activityId");
              paramNames.add("sharedId");

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectname");

              def objectname = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "objectId");

              def objectId = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramValues.clear();

              paramValues.add(activityId);
              paramValues.add(sharedGridId + i + j + "classid");

              def classid = scriptQueryExecutor.execute("shared", paramNames, paramValues);

              paramNames.clear();

              paramNames.add("classId");
              paramNames.add("objectId");

              paramValues.clear();

              paramValues.add(classid);
              paramValues.add(objectId);

              def rol = elementScript.getFunctionByName("getObjectLightUsingClassId").run(paramValues);

              lst.add(rol);
            } else {
              lst.add(dataGrid);
            };
          };
          res.add(lst);
        };
      };




      def originalData = res;

      def classSpare = new ArrayList();
      originalData.each{ instanceRow ->
        def classsInstances = new ArrayList();
        classsInstances.add(instanceRow.get(0));
        classsInstances.add("NO");
        classsInstances.add(instanceRow.get(1));
        classsInstances.add(instanceRow.get(2));
        classsInstances.add(instanceRow.get(3));
        classsInstances.add(instanceRow.get(4));
        classSpare.add(classsInstances);
      };

      classSpare;
      ]]>
    </function>

    <!--
        description: Change equipmpent's operational state from Spare to Reserved
        parameter srcGrid: the grid that contains the selected object to be reserved
    -->
    <function type="function" name="reserveMaterial" parameternames="srcGrid" return="RemoteObjectLight">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;

        if (srcGrid != null && srcGrid.getSelectedRow() != -1L) {
          def bem = PersistenceService.getInstance().getBusinessEntityManager();
          def aem = PersistenceService.getInstance().getApplicationEntityManager();
          def reservedOpState = aem.getListTypeItemWithName("OperationalState", "Reserved");
          HashMap<String, String> attrs = new HashMap();
          def objectList = srcGrid.getRow();

          attrs.put("state", String.valueOf(reservedOpState.getId()));

          bem.updateObject(objectList.get(0).getClassName(), objectList.get(0).getId(), attrs);
        };
        srcGrid;
      ]]>
    </function>

    <!--
        description: Change equipmpent's operational state from Reserved to Spare
        parameter srcMaterial: a textfield that contains an object to be modified
    -->
    <function type="function" name="cancelReserveMaterial" parameternames="srcMaterial" return="RemoteObjectLight">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;


        if (srcMaterial.getValue() != null) {
          def bem = PersistenceService.getInstance().getBusinessEntityManager();
          def aem = PersistenceService.getInstance().getApplicationEntityManager();
          def spareOpState = aem.getListTypeItemWithName("OperationalState", "Spare");
          HashMap<String, String> attrs = new HashMap();
          attrs.put("state", String.valueOf(spareOpState.getId()));
          bem.updateObject(srcMaterial.getValue().getClassName(), srcMaterial.getValue().getId(), attrs);
        };
        srcMaterial;
      ]]>
    </function>

    <!--
        description: Returns the selected row of a grid to be aded to another grid
        parameter srcGrid: the grid that contains the element to add to the other grid
        parameter targetGrid: the grid that will add the row from srcGrid
    -->
    <function type="function" name="getMaterialRow" parameternames="srcGrid targetGrid">
    <![CDATA[

      def data = null;

      def name = null;
      def state = null;
      def rack = null;
      def building = null;
      def city = null;
      def list = targetGrid.getRows();
      if(list == null)
        list = new ArrayList();
      if (srcGrid != null && srcGrid.getSelectedRow() != -1L) {
        list.add(srcGrid.getRow());
      };
      list;

    ]]>
    </function>
    
  <!-- Returns a list of all non abstract classes of type GenericCommunicationsElement, GenericBoard
         GenericDistributionFrame and GenericPhysicalLink.
         param subclassesFunction: a function that retrieves all subclasses of a single type
         in this case getSubClassesLight
    -->
    <function type="function" name="getAllEquipment" parameternames="subclassesFunction">
      <![CDATA[

        def allEquipment = new ArrayList();
        def genCommunicationElement = new ArrayList();
        def genBoard = new ArrayList();
        def genDistributionFrame = new ArrayList();
        def genPhysicalLink = new ArrayList();

        def parameterList = new ArrayList();

        if(subclassesFunction != null){
          parameterList.add("GenericCommunicationsElement");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genCommunicationElement = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericBoard");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genBoard = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericDistributionFrame");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genDistributionFrame = subclassesFunction.run(parameterList);
          parameterList.clear();

          parameterList.add("GenericPhysicalLink");
          parameterList.add(String.valueOf(false));
          parameterList.add(String.valueOf(false));
          genPhysicalLink = subclassesFunction.run(parameterList);
          parameterList.clear();
        };

        genCommunicationElement.each{ element ->
          allEquipment.add(element);
        };

        genBoard.each{ element ->
          allEquipment.add(element);
        };

        genDistributionFrame.each{ element ->
          allEquipment.add(element);
        };

        genPhysicalLink.each{ element ->
          allEquipment.add(element);
        };

        allEquipment;

      ]]>
    </function>

    <!-- Create a new EquipmentModel ListType item and associates it with the classToMap
         param equipmentName: a textfield holding the name of the new EquipmentModel
         param classToMap: a comboBox that holds the name of the class the new EquipmentModel needs
         to be associated with.
    -->
    <function type="function" name="createEquipmentModel" parameternames="equipmentName classToMap">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      def newModelId = null;

      if (equipmentName.getValue() != null && classToMap.getValue() != null) {
        newModelId = aem.createListTypeItem("EquipmentModel", equipmentName.getValue(), equipmentName.getValue());
      };

      def newModel = bem.getObject("EquipmentModel", newModelId);
      def newModelAttr = bem.getAttributeValuesAsString(newModel.getClassName(), newModel.getId());
      newModelAttr.put("classToMap", classToMap.getValue().getClassName());
      bem.updateObject(newModel.getClassName(), newModel.getId(), newModelAttr);
      ]]>
    </function>

    <!-- Create a new EquipmentVendor ListType item
         param vendorName: a textfield holding the name of the new EquipmentVendor
    -->
    <function type="function" name="createVendor" parameternames="vendorName">
      <![CDATA[
      import org.kuwaiba.apis.persistence.PersistenceService;

      def aem = PersistenceService.getInstance().getApplicationEntityManager();
      def bem = PersistenceService.getInstance().getBusinessEntityManager();

      def newVendorId = null;

      if (vendorName.getValue() != null) {
        newVendorId = aem.createListTypeItem("EquipmentVendor", vendorName.getValue(), vendorName.getValue());
      };
      ]]>
    </function>

    <!-- Add a previously selected equipment to the PurchaseObjects pool within the Virtual Warehouse
         Purchase Warehouse (InventoryObject)
         param equipmentType: a combobox holding the name of the new Equipment Type (EquipmentModel)
         param vendor: a combobox holding the name of the Vendor (EquipmentVendor) to be associated with
         the equipment.
         param quantity: how many instances will be created inside the pool
    -->
    <function type="function" name="purchaseEquipment" parameternames="equipmentType vendor quantity purchaseCode" return="">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;
        import java.util.Date;

        def bem = PersistenceService.getInstance().getBusinessEntityManager();
        def aem = PersistenceService.getInstance().getApplicationEntityManager();
        def mem = PersistenceService.getInstance().getMetadataEntityManager();

        def pools = bem.getObjectsWithFilterLight("VirtualWarehouse", "acronym", "purchase");

        def purchasePools = bem.getPoolsInObject(pools.get(0).getClassName(), pools.get(0).getId(), "InventoryObject");

        def purchasePool = purchasePools.get(0);

        if (equipmentType.getValue() != null && vendor.getValue() != null && quantity.getValue() != null){
          def classEM = bem.getObjectsWithFilterLight("EquipmentModel", "name", equipmentType.getValue().getName());
          def equipmentClass = "";

          if(classEM.size() > 0){
            equipmentClass = bem.getAttributeValueAsString(classEM.get(0).getClassName(), classEM.get(0).getId(), "classToMap");
          };

          def stateList = bem.getObjectsWithFilterLight("OperationalState", "name", "Pending Shipment");
          def pendingShipmentStateId = stateList.get(0).getId();
          def hasVendor = mem.hasAttribute(equipmentClass, "vendor");
          def attributeNames = null;
          def attributeValues = null;

          for(def i = 0; i < Integer.valueOf(quantity.getValue()); i++){
            if(hasVendor){
              attributeNames = ["name", "state", "vendor", "purchaseCode"] as String[];
              def date = System.currentTimeMillis() + i;
              attributeValues = [equipmentClass + "_"+ date, String.valueOf(pendingShipmentStateId), String.valueOf(vendor.getValue().getId()), String.valueOf(purchaseCode.getValue())] as String[];
            };
            else{
              attributeNames = ["name", "state"] as String[];
              def date = System.currentTimeMillis() + i;
              attributeValues = [equipmentClass + "_"+ date, String.valueOf(pendingShipmentStateId)] as String[];
            };
            bem.createPoolItem(purchasePool.getId(), equipmentClass, attributeNames, attributeValues, null);
          }
        };
        ]]>
    </function>  
</script>
