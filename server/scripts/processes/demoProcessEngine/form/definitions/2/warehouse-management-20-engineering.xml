<!--
Name
  formgetspareelements
Description
  This form is used for the buying and shipment artifacts
Author
  Jalbersson Guillermo Plazas <jalbersson.plazas@neotropic.co>
Date
  2018-08-29
-->
<root>
  <form id="formSpareElementsViewer" title="Spare Elements Viewer">

    <label value="Shipping management" styleName="title" />
    <horizontalLayout>
      <label value="Select a row from the table below and click button Manage shipping"/>
      <button caption="Manage shipping" onclick="propertyChange.frmSendEquipment.enabled.isSelectedAnyRow.gridEquipmentOrder open.frmSendEquipment"/>
    </horizontalLayout>

    <grid id="gridEquipmentOrder" save="false" onload="rows.getRowsInGridSaved.5.gridEquipmentPurchased.gridEquipmentOrder" height="250px" width="1300px">
        <column caption="Name"/>
        <column caption="Vendor"/>
        <column caption="Quantity"/>
        <column caption="Purchase Code"/>
    </grid>
    <horizontalLayout>
      <label value="Select a row from the table below and click button Edit"/>
      <button caption="Edit" styleName="buttonPencilIcon" onclick="propertyChange.frmEditShipment.enabled.isSelectedAnyRow.gridShipmentTrack open.frmEditShipment"/>
    </horizontalLayout>

    <grid id="gridShipmentTrack" save="true" shared="true" height="250px" width="1300px">
        <column caption="Name"/>
        <column caption="Vendor"/>
        <column caption="Quantity"/>
        <column caption="Purchase Code"/>
        <column caption="Destination City"/>
        <column caption="Destination Warehouse"/>
        <column caption="Courier"/>
        <column caption="Shipment Date"/>
        <column caption="Arrival Date"/>
        <column caption="State"/>
    </grid>

    <subform id="frmEquipmentAdd">
          <gridLayout columns="3" rows="10" alignment="topCenter">

            <label value="Select the equipment you want to buy"/>
            <comboBox id="cmbEquipmentType" onlazyload="items.getListTypeItems.EquipmentModel"/>
            <button onclick="open.frmCreateEquipment" styleName="buttonPlusCircleIconOnly"/>

            <label value="Vendor of the equipment"/>
            <comboBox id="cmbVendorType" onlazyload="items.getListTypeItems.EquipmentVendor"/>
            <button onclick="open.frmCreateVendor" styleName="buttonPlusCircleIconOnly"/>

            <label value="Quantity"/>
            <textField id="txtEquipmentQuantity" datatype="String"/>
            <label></label>
          </gridLayout>
          <horizontalLayout alignment="bottomCenter">
            <button caption="Buy Equipment" styleName="buttonPrimary" onclick="addgridrow.gridEquipmentOrder.cmbEquipmentType.cmbVendorType.txtEquipmentQuantity purchaseEquipment.cmbEquipmentType.cmbVendorType.txtEquipmentQuantity clean.frmEquipmentAdd close.frmEquipmentAdd "/>
            <button caption="Cancel" onclick="close.frmEquipmentAdd clean.frmEquipmentAdd"/>
          </horizontalLayout>
        </subform>

    <subform id="frmCreateEquipment">
        <label value="Fill the attributes of the new equipment" styleName="bold" />
        <gridLayout columns="2" rows="2" alignment="topCenter">

          <label value="Name"/>
          <textField id="txtEquipmentName"/>

          <label value="Class to map"/>
          <comboBox id="cmbClassToMap" onlazyload="items.getAllEquipment2"/>

        </gridLayout>
        <horizontalLayout alignment="bottomCenter">
          <button caption="Create Material" styleName="buttonPrimary" onclick="createEquipmentModel.txtEquipmentName.cmbClassToMap clean.frmCreateEquipment close.frmCreateEquipment"/>
          <button caption="Cancel" onclick="close.frmCreateEquipment clean.frmCreateEquipment"/>
        </horizontalLayout>
    </subform>

    <subform id="frmCreateVendor">
        <label value="Fill the attributes of the new Vendor" styleName="bold" />
        <gridLayout columns="2" rows="1" alignment="topCenter">

          <label value="Name of the new Vendor"/>
          <textField id="txtVendorName"/>

        </gridLayout>
        <horizontalLayout alignment="bottomCenter">
          <button caption="Create Equipment Vendor" styleName="buttonPrimary" onclick="createVendor.txtVendorName clean.frmCreateVendor close.frmCreateVendor"/>
          <button caption="Cancel" onclick="close.frmCreateVendor clean.frmCreateVendor"/>
        </horizontalLayout>
      </subform>

    <subform id="frmSendEquipment">

      <gridLayout columns="2" rows="1" alignment="topCenter">
        <label value="Do you want to start shipment process of? "/>
        <textField id="txtBougthMaterialName" datatype="String" onload="value.getSelectedRowGridDataValue.gridEquipmentOrder.0"/>
        <textField id="txtFill1" hidden="true"/>
        <textField id="txtFill2" hidden="true"/>
        <textField id="txtFill3" hidden="true"/>
        <textField id="txtFill4" hidden="true"/>
        <textField id="txtFill5" hidden="true"/>
        <textField id="txtFill6" hidden="true"/>
        <textField id="txtFill7" hidden="true"/>
      </gridLayout>

      <horizontalLayout alignment="bottomCenter">
        <button caption="Edit Shipment Process" width="150px" styleName="buttonPrimary" onclick="propertyChange.gridShipmentTrack.rows.addShipmentRow.gridEquipmentOrder.gridShipmentTrack deletegridrow.gridEquipmentOrder close.frmSendEquipment"/>
        <button caption="Cancel" width="150px" onclick="close.frmSendEquipment clean.frmSendEquipment"/>
      </horizontalLayout>
    </subform>

    <subform id="frmEditShipment">
      <label value="Material Shipment" alignment="middleCenter"/>
      <gridLayout columns="2" rows="6" alignment="topCenter">
        <label value="Material"/>
        <textField id="cmbMaterialSelected" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.0" enabled="false"/>
        <textField id="cmbMaterialSelected2" hidden="true" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.1"/>
        <textField id="cmbMaterialSelected3" hidden="true" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.2"/>
        <textField id="cmbMaterialSelected4" hidden="true" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.3"/>
        <label value="Destination City"/>
        <comboBox id="cmbDestinationCity" onlazyload="items.getInstancesOfFinalClass.City" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.4"/>
        <label value="Destination Warehouse"/>
        <comboBox id="cmbDestinationWarehouse" onlazyload="items.getWarehousesInCity.cmbDestinationCity" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.5"/>
        <label value="Courier"/>
        <textField id="txtCarrier" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.6"/>
        <label value="Shipment Date"/>
        <dateField id="dtfShipDate" datatype="Date" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.7"/>
        <label value="Arrival Date"/>
        <dateField id="dtfShipArrival" datatype="Date" onload="value.getSelectedRowGridDataValue.gridShipmentTrack.8"/>
        <textField id="txtInTransitState" hidden="true" onload="getIntransitState"/>
      </gridLayout>

      <horizontalLayout alignment="bottomCenter">
        <button caption="Edit" width="50px" styleName="buttonPrimary" onclick="propertyChange.gridShipmentTrack.rows.editShipment.gridShipmentTrack.frmEditShipment clean.frmEditShipment close.frmEditShipment"/>
        <button caption="Cancel" width="50px" onclick="close.frmEditShipment clean.frmEditShipment"/>
      </horizontalLayout>
    </subform>
  </form>

  <script src="scripts.xml">
    <function type="function" name="isSelectedAnyRow" parameternames="grid">
      <![CDATA[
        grid.getSelectedRow() != -1;
      ]]>
    </function>
    <function type="function" name="addShipmentRow" parameternames="sourceGrid targetGrid">
      <![CDATA[
        if (sourceGrid.getSelectedRow() != -1) {

          if (targetGrid.getRows() == null) {
            targetGrid.setRows(new ArrayList());
          };
          def flag = true;
          targetGrid.getRows().each { row ->
            if (row.get(3).equals(sourceGrid.getRow().get(3))) {
              flag = false;
              return;
            }
          };
          if (flag) {
            def row = sourceGrid.getRow();
            row.add("");
            row.add("");
            row.add("");
            row.add("");
            row.add("");
            row.add("");

            targetGrid.getRows().add(row);
          };
        };
        targetGrid.getRows();
      ]]>
    </function>
    <function type="function" name="editShipment" parameternames="grid subform">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;

        if (grid.getSelectedRow() != -1) {
          def bem = PersistenceService.getInstance().getBusinessEntityManager();
          def aem = PersistenceService.getInstance().getApplicationEntityManager();

          def material = subform.getChild("cmbMaterialSelected");
          def vendor = subform.getChild("cmbMaterialSelected2");
          def quantity = subform.getChild("cmbMaterialSelected3");
          def purchaseCode = subform.getChild("cmbMaterialSelected4");
          def destinationCity = subform.getChild("cmbDestinationCity");
          def destinationWarehouse = subform.getChild("cmbDestinationWarehouse");
          def courier = subform.getChild("txtCarrier");
          def shipDate = subform.getChild("dtfShipDate");
          def shipArrival = subform.getChild("dtfShipArrival");
          def state = "Pending Shipment";

          if (shipDate.getValue() != null && !shipDate.getValue().equals("")) {
            def purchaseMaterials = bem.getObjectsWithFilterLight("ConfigurationItem", "purchaseCode", purchaseCode.getValue());

            def transitWarehouses = bem.getObjectsWithFilterLight("VirtualWarehouse", "acronym", "transit");
            def transitWarehouse = transitWarehouses.get(0);

            def transitPools = bem.getPoolsInObject(transitWarehouse.getClassName(), transitWarehouse.getId(), "InventoryObject");
            def transitPool = transitPools.get(0);

            def objects = new HashMap();

            purchaseMaterials.each { purchaseMaterial ->
              objects.put(purchaseMaterial.getClassName(), new ArrayList());
            };
            purchaseMaterials.each { purchaseMaterial ->
              objects.get(purchaseMaterial.getClassName()).add(purchaseMaterial.getId());
            };
            for (String className : objects.keySet()) {
              String [] ids = new String[objects.get(className).size()];
              for (int i = 0; i < ids.length; i += 1) {
                ids[i] = objects.get(className).get(i);
              };
              objects.put(className, ids);
            };
            bem.moveObjectsToPool(transitPool.getClassName(), transitPool.getId(), objects);
            state = "Transit";

            def itemTransit = aem.getListTypeItemWithName("OperationalState", "Transit");
            HashMap<String, String> attrs = new HashMap();
            attrs.put("state", String.valueOf(itemTransit.getId()));

            purchaseMaterials.each { purchaseMaterial ->
              bem.updateObject(purchaseMaterial.getClassName(), purchaseMaterial.getId(), attrs);
            };
          };
          if (shipArrival.getValue() != null && !shipArrival.getValue().equals("")) {
            if (destinationWarehouse.getValue() != null) {
              def purchaseMaterials = bem.getObjectsWithFilterLight("ConfigurationItem", "purchaseCode", purchaseCode.getValue());

              def dWarehouse = destinationWarehouse.getValue();

              def destinationPools = bem.getPoolsInObject(dWarehouse.getClassName(), dWarehouse.getId(), "InventoryObject");
              def destinationPool = destinationPools.get(0);

              def objects = new HashMap();

              purchaseMaterials.each { purchaseMaterial ->
                objects.put(purchaseMaterial.getClassName(), new ArrayList());
              };
              purchaseMaterials.each { purchaseMaterial ->
                objects.get(purchaseMaterial.getClassName()).add(purchaseMaterial.getId());
              };
              for (String className : objects.keySet()) {
                String [] ids = new String[objects.get(className).size()];
                for (int i = 0; i < ids.length; i += 1) {
                  ids[i] = objects.get(className).get(i);
                };
                objects.put(className, ids);
              };
              bem.moveObjectsToPool(destinationPool.getClassName(), destinationPool.getId(), objects);

              state = "Spare";
              def itemTransit = aem.getListTypeItemWithName("OperationalState", "Spare");
              HashMap<String, String> attrs = new HashMap();
              attrs.put("state", String.valueOf(itemTransit.getId()));

              purchaseMaterials.each { purchaseMaterial ->
                bem.updateObject(purchaseMaterial.getClassName(), purchaseMaterial.getId(), attrs);
              };
            };
          };
          grid.getRow().clear();

          def row = grid.getRow();
          row.add(material.getValue() != null ? material.getValue() : "");
          row.add(vendor.getValue() != null ? vendor.getValue() : "");
          row.add(quantity.getValue() != null ? quantity.getValue() : "");
          row.add(purchaseCode.getValue() != null ? purchaseCode.getValue() : "");
          row.add(destinationCity.getValue() != null ? destinationCity.getValue() : "");
          row.add(destinationWarehouse.getValue() != null ? destinationWarehouse.getValue() : "");
          row.add(courier.getValue() != null ? courier.getValue() : "");
          row.add(shipDate.getValue() != null && !shipDate.getValue().equals("") ? shipDate.getValue() : "");
          row.add(shipArrival.getValue() != null && !shipArrival.getValue().equals("") ? shipArrival.getValue() : "");
          row.add(state);

          def res = new ArrayList();
          res.add(row);

          res;
        };
        grid.getRows();
      ]]>
    </function>
    <!--
        description: get operationalState "In Transit"
    -->
    <function type="function" name="getIntransitState" return="RemoteObjectLight">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;

        def aem = PersistenceService.getInstance().getApplicationEntityManager();
        def intransitOpState = aem.getListTypeItemWithName("OperationalState", "In transit");

        intransitOpState;
      ]]>
    </function>

    <function type="function" name="getWarehousesInCity" parameternames="cmbCity">
      <![CDATA[
        import org.kuwaiba.apis.persistence.PersistenceService;
        import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

        def res = new ArrayList();

        if (cmbCity.getValue() != null) {
          def bem = PersistenceService.getInstance().getBusinessEntityManager();

          def objectClassName = cmbCity.getValue().getClassName();
          def objectId = cmbCity.getValue().getId();

          def warehouses = bem.getWarehousesInObject(objectClassName, objectId);

          warehouses.each { warehouse ->
            res.add(new RemoteObjectLight(warehouse));
          };
        };
        res;
      ]]>
    </function>
  </script>
</root>
