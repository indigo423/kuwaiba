/*
 *  Copyright 2010-2019 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.kuwaiba.web.modules.servmanager.dashboard;

import com.vaadin.icons.VaadinIcons;
import com.vaadin.server.ExternalResource;
import com.vaadin.shared.ui.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.kuwaiba.apis.web.gui.dashboards.AbstractDashboardWidget;
import org.kuwaiba.apis.web.gui.notifications.Notifications;
import org.kuwaiba.beans.WebserviceBean;
import org.kuwaiba.exceptions.ServerSideException;
import org.kuwaiba.interfaces.ws.toserialize.application.RemoteConfigurationVariable;
import org.kuwaiba.interfaces.ws.toserialize.application.RemoteSession;
import org.kuwaiba.interfaces.ws.toserialize.business.RemoteObjectLight;

/**
 * This widget embeds an image generated by a Zabbix graph. This widget assumes that the graph is named after the selected service .
 * The graph name must have the following structure: ANY_STRING:SERVICE_NAME or simply SERVICE_NAME
 * @author Charles Edward Bedon Cortazar {@literal <charles.bedon@kuwaiba.org>}
 */
public class ZabbixGraphDashboardWidget extends AbstractDashboardWidget {
    /**
     * URL to be used to make the API requests
     */
    private final static String DEFAULT_ZABBIX_API_ROOT_URL = "http://localhost/zabbix";
    /**
     * Default Zabbix user if none specified
     */
    private final static String DEFAULT_ZABBIX_USER = "Admin";
    /**
     * Default Zabbix password if none specified
     */
    private final static String DEFAULT_ZABBIX_PASSWORD = "zabbix";
    /**
     * The Zabbix REST API endpoint URL. The widget will try to get a value from the config variable widgets.zabbix.graphs.endpoint, but is no value is found, DEFAULT_ZABBIX_API_ENDPOINT_URL will be used instead.
     */
    private String zabbixRootUrl;
    /**
     * The Zabbix REST API user. The widget will try to get a value from the config variable widgets.zabbix.user, but is no value is found, DEFAULT_ZABBIX_USER will be used instead.
     */
    private String zabbixUser;
    /**
     * The Zabbix REST API password. The widget will try to get a value from the config variable widgets.zabbix.password, but is no value is found, DEFAULT_ZABBIX_PASSWORD will be used instead.
     */
    private String zabbixPassword;
    /**
     * Reference to the selected service
     */
    private RemoteObjectLight service;
    /**
    * Reference to the backend bean
    */
    private WebserviceBean wsBean;
    /**
     * A map with the full list of graphs available in the Zabbix server, previously cached (allegedly) in the config variable widgets.zabbix.graphs.cache
     */
    private HashMap <String, String> cachedGraphs;
    /*
     * The graphs currently associated to the selected service
     */
    private List<ZabbixGraph> zabbixGraphs;
    /**
     * Variable indicating the index in the currentGraphs array of the current graph on display.
     */
    private int currentGraphIndex = 0;
    /**
     * A panel containing the current graph on display
     */
    private Panel pnlZabbixGraphs;    
    
    private HashMap<String, String> graphsMap;
    
    public ZabbixGraphDashboardWidget(RemoteObjectLight service, WebserviceBean wsBean) {
        super(String.format("Zabbix Graphs for %s", service));
        addStyleName("dashboard");
        this.service = service;
        this.wsBean = wsBean;
        RemoteSession session = (RemoteSession) UI.getCurrent().getSession().getAttribute("session");
        
        try { 
            this.zabbixRootUrl = (String)wsBean.getConfigurationVariableValue("widgets.zabbix.root", session.getIpAddress(),
                    session.getSessionId());
            if (this.zabbixRootUrl.trim().isEmpty())
                this.zabbixRootUrl = DEFAULT_ZABBIX_API_ROOT_URL;
            
        } catch (ServerSideException ex) { // The variable does not exist
            this.zabbixRootUrl = DEFAULT_ZABBIX_API_ROOT_URL;
        }
        
        try { 
            this.zabbixUser = (String)wsBean.getConfigurationVariableValue("widgets.zabbix.user", session.getIpAddress(),
                    session.getSessionId());
            if (this.zabbixUser.trim().isEmpty())
                this.zabbixUser = DEFAULT_ZABBIX_USER;
            
        } catch (ServerSideException ex) { // The variable does not exist
            this.zabbixUser = DEFAULT_ZABBIX_USER;
        }
        
        try { 
            this.zabbixPassword = (String)wsBean.getConfigurationVariableValue("widgets.zabbix.password", session.getIpAddress(),
                    session.getSessionId());
            if (this.zabbixPassword.trim().isEmpty())
                this.zabbixPassword = DEFAULT_ZABBIX_PASSWORD;
            
        } catch (ServerSideException ex) { // The variable does not exist
            this.zabbixPassword = DEFAULT_ZABBIX_PASSWORD;
        }
        
        this.cachedGraphs = new HashMap<>();
        try {
            RemoteConfigurationVariable configurationVariableMetadata = wsBean.getConfigurationVariable("widgets.zabbix.graphs.cache", 
                    session.getIpAddress(), session.getSessionId());
            
            if (configurationVariableMetadata.getType() != RemoteConfigurationVariable.TYPE_ARRAY) 
                Notifications.showError(String.format("The variable %s is not an array", "widgets.zabbix.graphs.cache"));
            else {
                String[] rawCachedGraphs = (String[])wsBean.getConfigurationVariableValue("widgets.zabbix.graphs.cache", 
                        session.getIpAddress(), session.getSessionId());

                for (String aCachedGraph : rawCachedGraphs) {
                    String[] rawCachedGraphTokens = aCachedGraph.split("~t~");
                    if (rawCachedGraphTokens.length == 2) // We ignore malformed tokens (which shouldn't happen, but better safe than sorry)
                        this.cachedGraphs.put(rawCachedGraphTokens[0], rawCachedGraphTokens[1]); // The first token is the graph name, the value is the Id. Of course, duplicated graph names will be ignored
                }
            }
        } catch (ServerSideException ex) { // The variable does not exist
            // Do nothing, just leave the cached graph map empty
        }
        
        this.createContent();
    }
   
    @Override
    public void createContent() { 
        addComponents(new Label(String.format("<h3>%s</h3>", service), ContentMode.HTML));
        zabbixGraphs = new ArrayList<>();

        this.cachedGraphs.entrySet().stream().forEach((cachedGraphEntry) -> {
            if (cachedGraphEntry.getKey().contains(service.getName()))
                zabbixGraphs.add(new ZabbixGraph(cachedGraphEntry.getValue(), cachedGraphEntry.getKey()));
        });


        if (zabbixGraphs.isEmpty())
            addComponent(new Label("This service does not have Zabbix graphs associated to it. If this is not the case, please check your naming conventions or contact an administrator"));
        else {

            pnlZabbixGraphs = new Panel();
            pnlZabbixGraphs.setSizeUndefined();

            HorizontalLayout lytCaroussel = new HorizontalLayout();
            lytCaroussel.setSizeFull();

            Button btnPreviousGraph = new Button(VaadinIcons.ARROW_LEFT);
            btnPreviousGraph.setEnabled(false);
            btnPreviousGraph.addClickListener((event) -> {
                if (currentGraphIndex < 0) {
                    currentGraphIndex = 0;
                    return;
                }

                if (currentGraphIndex == 0) 
                    btnPreviousGraph.setEnabled(false);
                else
                    currentGraphIndex--;

                updateZabbixGraph();
            });

            Button btnNextGraph = new Button(VaadinIcons.ARROW_RIGHT);
            btnNextGraph.setEnabled(zabbixGraphs.size() > 1);

            btnNextGraph.addClickListener((event) -> {

                if (currentGraphIndex == zabbixGraphs.size() - 1)
                    currentGraphIndex = 0;
                else 
                    currentGraphIndex++;

                btnPreviousGraph.setEnabled(currentGraphIndex > 0);

                updateZabbixGraph();
            });

            updateZabbixGraph();
            lytCaroussel.addComponents(btnPreviousGraph, pnlZabbixGraphs, btnNextGraph);
            lytCaroussel.setExpandRatio(btnNextGraph, 2);
            lytCaroussel.setExpandRatio(pnlZabbixGraphs, 6);
            lytCaroussel.setExpandRatio(btnPreviousGraph, 2);

            lytCaroussel.setComponentAlignment(pnlZabbixGraphs, Alignment.MIDDLE_CENTER);
            lytCaroussel.setComponentAlignment(btnPreviousGraph, Alignment.MIDDLE_LEFT);
            lytCaroussel.setComponentAlignment(btnNextGraph, Alignment.MIDDLE_RIGHT);

            pnlZabbixGraphs.addClickListener((event) -> {
                Window wdwGraphs = new Window(zabbixGraphs.get(currentGraphIndex).toString());

                VerticalLayout lytGraph = new VerticalLayout();
                lytGraph.setSizeUndefined();

                Panel pnlZabbixGraph = new Panel(new Image(wdwGraphs.getCaption(), 
                        new ExternalResource(this.zabbixRootUrl + "/chart2.php?graphid=" + zabbixGraphs.get(currentGraphIndex).id)));
                lytGraph.addComponents(pnlZabbixGraph);

                wdwGraphs.setModal(true);
                wdwGraphs.setHeight(80, Unit.PERCENTAGE);
                wdwGraphs.setWidth(100, Unit.PERCENTAGE);
                wdwGraphs.setContent(lytGraph);

                UI.getCurrent().addWindow(wdwGraphs);
            });

            addComponent(lytCaroussel);

        }
    }
    
    /**
     * Replaces the image currently on display at the Zabbix graphs panel with the current selected graph
     */
    private void updateZabbixGraph() {
        Image newGraph = new Image("", new ExternalResource(this.zabbixRootUrl + "/chart2.php?graphid=" + zabbixGraphs.get(currentGraphIndex).id + 
                                    "&period=3600&isNow=1&profileIdx=web.graphs&profileIdx2=798&width=600", "image/png"));
        newGraph.setStyleName("theater-layout-screen-image");
        pnlZabbixGraphs.setContent(newGraph);
        pnlZabbixGraphs.setCaption(zabbixGraphs.get(currentGraphIndex).toString());
    }

    /**
     * A simple POJO that represents a Zabbix graph and that can be used in lists and combo boxes
     */
    private class ZabbixGraph {
        /**
         *  Graph id
         */
        private String id;
        /**
         * Graph name
         */
        private String name;

        public ZabbixGraph(String id, String name) {
            this.id = id;
            this.name = name;
        }
        
        @Override
        public String toString(){
            return name;
        }
    }
}
