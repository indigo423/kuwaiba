/*
 *  Copyright 2010-2019 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.kuwaiba.apis.web.gui.dashboards;

import java.util.EventListener;

/**
 * An interface to be implemented by all dashboard widgets interested in listening for events generated by other widgets on the same dashboard. Messages are bi-directional and the broadcast acts like a message bus
 * @author Charles Edward Bedon Cortazar {@literal <charles.bedon@kuwaiba.org>}
 */
public interface DashboardEventListener extends EventListener {

    public void eventReceived(DashboardEvent event);
    
    /**
     * Event generated by a dashboard widget
     * @param <P> The type of payload (see {@link #payload} for details)
     */
    public static class DashboardEvent<P> {
        /**
         * This event is generated when an object was selected
         */
        public static final int TYPE_SELECTION = 1;
        /**
         * This event is generated when a widget requests for the other widgets to refresh their content
         */
        public static final int TYPE_REFRESH = 2;
        /**
         * When a widget is opened/launched (in detached mode)
         */
        public static final int TYPE_LAUNCHED = 5;
        /**
         * When a widget is closed/terminated (in detached mode)
         */
        public static final int TYPE_TERMINATED = 6;
        
        /**
         * The widget that rose the event
         */
        private AbstractDashboardWidget source;
        /**
         * Type of event. See TYPE_* for valid values
         */
        private int type;
        /**
         * Optional field to be used to send information along with the event
         */
        private P payload;

        /**
         * Use this constructor if the event does not have any payload associated to it 
         * @param source The widget that generates the event
         * @param type The type of event (see TYPE_* for possible values)
         * @param payload Optional field to be used to send information along with the event (for example the selected objects in a selection event)
         */
        public DashboardEvent(AbstractDashboardWidget source, int type, P payload) {
            this.source = source;
            this.type = type;
            this.payload = payload;
        }
        
        /**
         * Use this constructor if the event has information attached to it that is relevant to the listeners (for example the selected objects in a selection event)
         * @param source The widget that generates the event
         * @param type The type of event (see TYPE_* for possible values)
         */
        public DashboardEvent(AbstractDashboardWidget source, int type) {
            this.source = source;
            this.type = type;
        }

        public AbstractDashboardWidget getSource() {
            return source;
        }

        public void setSource(AbstractDashboardWidget source) {
            this.source = source;
        }

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }

        public P getPayload() {
            return payload;
        }

        public void setPayload(P payload) {
            this.payload = payload;
        }
    }
}
