/**
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package com.neotropic;

import com.neotropic.ws.RunJobSnmpLeaf;
import com.neotropic.ws.RunJobSnmpTable;
import com.neotropic.ws.RunJobSnmpLeafResponse;
import com.neotropic.ws.RunJobSnmpTableResponse;
import com.neotropic.ws.SimpleWebService;
import com.neotropic.ws.SimpleWebService_Service;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Response;

/**
 * Asynchronous Client used to run jobs in a server
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAddress = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        txtOID = new javax.swing.JTextField();
        lblOID = new javax.swing.JLabel();
        lblJob = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtCommunity = new javax.swing.JTextField();
        cmbJob = new javax.swing.JComboBox();
        btnRunJob = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblAddress.setText("Address");

        lblCommunity.setText("Community");

        lblOID.setText("OID");

        lblJob.setText("Job");

        cmbJob.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Run Job for Leaf", "Run Job for Table" }));

        btnRunJob.setText("Run Job");
        btnRunJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunJobActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRunJob)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblCommunity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblAddress)
                            .addGap(50, 50, 50)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblOID)
                                .addComponent(lblJob))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtOID)
                                .addComponent(cmbJob, 0, 181, Short.MAX_VALUE)))))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCommunity)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOID)
                    .addComponent(txtOID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblJob)
                    .addComponent(cmbJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRunJob)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunJobActionPerformed
        try {
            runJobAsync();
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_btnRunJobActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnRunJob;
    private javax.swing.JComboBox cmbJob;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblJob;
    private javax.swing.JLabel lblOID;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtOID;
    // End of variables declaration//GEN-END:variables
    private void runJobAsync() throws InterruptedException, ExecutionException {
        SimpleWebService_Service service = new com.neotropic.ws.SimpleWebService_Service();
        SimpleWebService port = service.getSimpleWebServicePort();
        
        if (txtAddress.getText() == null || 
            txtCommunity.getText() == null || 
            txtOID.getText() == null || 
            cmbJob.getSelectedItem() == null) {
            
            JOptionPane.showMessageDialog(null, "All field are mandatory", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int jobIdx = cmbJob.getSelectedIndex();
        
        if (jobIdx == 0) {
            runJobSnmpLeafAsync(port);
            return;
        }
        if (jobIdx == 1) {
            runJobSnmpTableAsync(port);
        }
    }
    
    private void runJobSnmpLeafAsync(SimpleWebService port) {
        RunJobSnmpLeaf.Properties properties = new RunJobSnmpLeaf.Properties();
        RunJobSnmpLeaf.Properties.Entry address = new RunJobSnmpLeaf.Properties.Entry();
        address.setKey("host");
        address.setValue(txtAddress.getText());
        properties.getEntry().add(address);

        RunJobSnmpLeaf.Properties.Entry community = new RunJobSnmpLeaf.Properties.Entry();
        community.setKey("community");
        community.setValue(txtCommunity.getText());
        properties.getEntry().add(community);

        RunJobSnmpLeaf.Properties.Entry oid = new RunJobSnmpLeaf.Properties.Entry();
        oid.setKey("oid");
        oid.setValue(txtOID.getText());
        properties.getEntry().add(oid);

        port.runJobSnmpLeafAsync(properties, 
            new AsyncHandler<RunJobSnmpLeafResponse>() {
                @Override
                public void handleResponse(Response<RunJobSnmpLeafResponse> res) {
                    try {
                        JOptionPane.showMessageDialog(null, res.get().getReturn(), "Info", JOptionPane.INFORMATION_MESSAGE);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        System.out.println("Time out");
                    }
                }
            }
        );
    }
    
    private void runJobSnmpTableAsync(SimpleWebService port) {
        RunJobSnmpTable.Properties properties = new RunJobSnmpTable.Properties();
        RunJobSnmpTable.Properties.Entry address = new RunJobSnmpTable.Properties.Entry();
        address.setKey("host");
        address.setValue(txtAddress.getText());
        properties.getEntry().add(address);

        RunJobSnmpTable.Properties.Entry community = new RunJobSnmpTable.Properties.Entry();
        community.setKey("community");
        community.setValue(txtCommunity.getText());
        properties.getEntry().add(community);

        RunJobSnmpTable.Properties.Entry oid = new RunJobSnmpTable.Properties.Entry();
        oid.setKey("oid");
        oid.setValue(txtOID.getText());
        properties.getEntry().add(oid);

        port.runJobSnmpTableAsync(properties, 
            new AsyncHandler<RunJobSnmpTableResponse>() {
                @Override
                public void handleResponse(Response<RunJobSnmpTableResponse> res) {
                    try {
                        JOptionPane.showMessageDialog(null, res.get().getReturn(), "Info", JOptionPane.INFORMATION_MESSAGE);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        System.out.println("Time out");
                    }
                }
            }
        );
    }
}
