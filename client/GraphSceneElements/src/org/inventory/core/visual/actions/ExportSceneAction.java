/*
 *  Copyright 2011 Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */

package org.inventory.core.visual.actions;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.netbeans.api.visual.export.SceneExporter;
import org.netbeans.api.visual.widget.Scene;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

/**
 * Implements the action to export an scene as image (JPG/PNG) or as an XML document
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
public class ExportSceneAction extends AbstractAction{

    private Scene scene;

    public ExportSceneAction(Scene scene) {
        this.scene = scene;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        final ExportSettingsPanel myPanel = new ExportSettingsPanel();
        DialogDescriptor dd = new DialogDescriptor(myPanel,"Export Settings",true,new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == DialogDescriptor.OK_OPTION){
                    try {
                        SceneExporter.createImage(scene,
                                                  new File(myPanel.getFileName()),
                                                  myPanel.getSelectedFormat() == ExportSettingsPanel.FORMAT_JPG ? SceneExporter.ImageType.JPG:SceneExporter.ImageType.PNG,
                                                  myPanel.getSelectedZoom() == ExportSettingsPanel.ZOOM_NORMAL ? SceneExporter.ZoomType.ACTUAL_SIZE : SceneExporter.ZoomType.CURRENT_ZOOM_LEVEL,
                                                  false,
                                                  false,
                                                  100,
                                                  0,  //Not used
                                                  0); //Not used
                        JOptionPane.showMessageDialog(null, "The view was exported successfully", "Success!", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null,"The file name is not valid or you don't have enough permissions","Error",JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
        DialogDisplayer.getDefault().notify(dd);
    }

    /**
     * Panel to show options for exporting object views to JPG/PNG formats
     * @author Charles Edward Bedon Cortazar <charles.bedon@zoho.com>
     */
    private class ExportSettingsPanel extends javax.swing.JPanel {

        public static final int ZOOM_NORMAL = 0;
        public static final int ZOOM_CURRENT = 1;
        public static final int FORMAT_JPG = 0;
        public static final int FORMAT_PNG = 1;

        /** Creates new form ExportSettingsPanel */
        public ExportSettingsPanel() {
            initComponents();
        }

        /** This method is called from within the constructor to
         * initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {

            lblLocaltion = new javax.swing.JLabel();
            lblZoomType = new javax.swing.JLabel();
            btnLocation = new javax.swing.JButton();
            txtLocation = new javax.swing.JTextField();
            cmbFormat = new javax.swing.JComboBox();
            lblFormat = new javax.swing.JLabel();
            cmbZoomType = new javax.swing.JComboBox();

            lblLocaltion.setText(org.openide.util.NbBundle.getMessage(ExportSettingsPanel.class, "ExportSettingsPanel.lblLocaltion.text")); // NOI18N

            lblZoomType.setText(org.openide.util.NbBundle.getMessage(ExportSettingsPanel.class, "ExportSettingsPanel.lblZoomType.text")); // NOI18N

            btnLocation.setText(org.openide.util.NbBundle.getMessage(ExportSettingsPanel.class, "ExportSettingsPanel.btnLocation.text")); // NOI18N
            btnLocation.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnLocationActionPerformed(evt);
                }
            });

            txtLocation.setText(org.openide.util.NbBundle.getMessage(ExportSettingsPanel.class, "ExportSettingsPanel.txtLocation.text")); // NOI18N

            cmbFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPG", "PNG" }));

            lblFormat.setText(org.openide.util.NbBundle.getMessage(ExportSettingsPanel.class, "ExportSettingsPanel.lblFormat.text")); // NOI18N

            cmbZoomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Current zoom level" }));

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblLocaltion)
                        .addComponent(lblFormat)
                        .addComponent(lblZoomType))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(btnLocation))
                        .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbZoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblFormat)
                                .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLocation)
                            .addComponent(lblLocaltion)
                            .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblZoomType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbZoomType))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
        }// </editor-fold>

        private void btnLocationActionPerformed(java.awt.event.ActionEvent evt) {
            JFileChooser fChooser = new JFileChooser();
            fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fChooser.setDialogTitle("Select a directory");
            if (fChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
                txtLocation.setText(fChooser.getSelectedFile().getAbsolutePath()+
                        File.separator+"view"+Calendar.getInstance().get(Calendar.DAY_OF_YEAR)+ //NOI18N
                        "-"+Calendar.getInstance().get(Calendar.MINUTE)+ //NOI18N
                        (cmbFormat.getSelectedIndex() == 0?".jpg":".png")); //NOI18N
    }


        // Variables declaration - do not modify
        private javax.swing.JButton btnLocation;
        private javax.swing.JComboBox cmbFormat;
        private javax.swing.JComboBox cmbZoomType;
        private javax.swing.JLabel lblFormat;
        private javax.swing.JLabel lblLocaltion;
        private javax.swing.JLabel lblZoomType;
        private javax.swing.JTextField txtLocation;
        // End of variables declaration

        public String getFileName(){
            return txtLocation.getText();
        }

        public int getSelectedFormat(){
            return cmbFormat.getSelectedIndex();
        }
        public int getSelectedZoom(){
            return cmbZoomType.getSelectedIndex();
        }
    }

}
