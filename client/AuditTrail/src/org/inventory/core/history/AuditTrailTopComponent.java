/*
 *  Copyright 2010 - 2014 Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.core.history;

import java.util.Date;
import org.inventory.communications.CommunicationsStub;
import org.inventory.communications.core.LocalApplicationLogEntry;
import org.inventory.core.services.api.export.ExportTablePanel;
import org.inventory.core.services.api.export.ExportableTable;
import org.inventory.core.services.api.export.filters.CSVFilter;
import org.inventory.core.services.api.export.filters.TextExportFilter;
import org.inventory.core.services.api.notifications.NotificationUtil;
import org.netbeans.swing.etable.ETable;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Audit trail module main TopComponent
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
@TopComponent.Description(
    preferredID = "AuditTrailTopComponent",
iconBase = "org/inventory/core/history/res/icon.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.inventory.core.history.AuditTrailTopComponent")
@ActionReferences(value = {@ActionReference(path = "Menu/Tools"),
    @ActionReference(path = "Toolbars/Tools")})
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_AuditTrailAction",
preferredID = "AuditTrailTopComponent")
@Messages({
    "CTL_AuditTrailAction=AuditTrail",
    "CTL_AuditTrailTopComponent=Activity Log",
    "HINT_AuditTrailTopComponent=Activity Log"
})
public final class AuditTrailTopComponent extends TopComponent implements ExportableTable {
    private ETable aTable;
    private AuditTrailService service;
    private NotificationUtil nu = Lookup.getDefault().lookup(NotificationUtil.class);

    public AuditTrailTopComponent() {
        initComponents();
        setName(Bundle.CTL_AuditTrailTopComponent());
        setToolTipText(Bundle.HINT_AuditTrailTopComponent());
        service = new AuditTrailService(this);
        pnlScrollMain.setViewportView(aTable = new ETable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barMain = new javax.swing.JToolBar();
        btnExport = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        pnlScrollMain = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        barMain.setRollover(true);

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/history/res/export.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnExport.text")); // NOI18N
        btnExport.setToolTipText(org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnExport.toolTipText")); // NOI18N
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        barMain.add(btnExport);

        btnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/history/res/all.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAll, org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnAll.text")); // NOI18N
        btnAll.setToolTipText(org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnAll.toolTipText")); // NOI18N
        btnAll.setFocusable(false);
        btnAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });
        barMain.add(btnAll);

        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/history/res/previous.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnPrevious, org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnPrevious.text")); // NOI18N
        btnPrevious.setToolTipText(org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnPrevious.toolTipText")); // NOI18N
        btnPrevious.setFocusable(false);
        btnPrevious.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrevious.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        barMain.add(btnPrevious);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/history/res/next.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNext, org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnNext.text")); // NOI18N
        btnNext.setToolTipText(org.openide.util.NbBundle.getMessage(AuditTrailTopComponent.class, "AuditTrailTopComponent.btnNext.toolTipText")); // NOI18N
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        barMain.add(btnNext);

        add(barMain, java.awt.BorderLayout.PAGE_START);
        add(pnlScrollMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        service.updateTable(AuditTrailService.SHOW_ALL);
        service.setCurrentPage(1);
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        service.updateTable(AuditTrailService.SHOW_PREVIOUS_PAGE);
        if (service.getCurrentPage() == 1)
            btnPrevious.setEnabled(false);
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        service.updateTable(AuditTrailService.SHOW_NEXT_PAGE);
        if (service.getCurrentPage() > 1)
            btnPrevious.setEnabled(true);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        ExportTablePanel exportPanel = new ExportTablePanel(new TextExportFilter[]{CSVFilter.getInstance()}, this);
        DialogDescriptor dd = new DialogDescriptor(exportPanel, "Export options",true, exportPanel);
        DialogDisplayer.getDefault().createDialog(dd).setVisible(true);
    }//GEN-LAST:event_btnExportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barMain;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JScrollPane pnlScrollMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        service.updateTable(AuditTrailService.SHOW_FIRST_PAGE);
        btnPrevious.setEnabled(false);
        service.setCurrentPage(1);
    }

    @Override
    public void componentClosed() {
        aTable.removeAll();   
    }
    
    void writeProperties(java.util.Properties p) {    }

    void readProperties(java.util.Properties p) {    }
    
    public ETable getTable(){
        return aTable;
    }
    
    public NotificationUtil getNotifier(){
        return nu;
    }

    @Override
    public Object[][] getResults(Range range) {
        Object[][] res;
        if (range == Range.CURRENT_PAGE){
            res = new Object[aTable.getModel().getRowCount() + 1][aTable.getModel().getColumnCount()];
            res[0] = ((AuditTrailTableModel)aTable.getModel()).getColumnNames();
            for (int i = 0; i < aTable.getModel().getRowCount(); i++)
                for (int j = 0; j < aTable.getModel().getColumnCount(); j++)
                    res[i + 1][j] = aTable.getModel().getValueAt(i, j);
            
        }else{
            LocalApplicationLogEntry[] records = CommunicationsStub.getInstance().getGeneralActivityAuditTrail(0, 0);
            if (records == null){
                nu.showSimplePopup("Error", NotificationUtil.ERROR_MESSAGE, CommunicationsStub.getInstance().getError());
                return new Object[0][0];
            }
            else{
                res = new Object[records.length + 1][7];
                res[0] = ((AuditTrailTableModel)aTable.getModel()).getColumnNames();
                for (int i = 0; i < records.length; i++){
                    res[i + 1][0] = new Date(records[i].getTimestamp());
                    res[i + 1][1] = LocalApplicationLogEntry.types[records[i].getType() - 1];
                    res[i + 1][2] = records[i].getUserName();
                    res[i + 1][3] = records[i].getAffectedProperty();
                    res[i + 1][4] = records[i].getOldValue();
                    res[i + 1][5] = records[i].getNewValue();
                    res[i + 1][6] = records[i].getNotes();
                }
            }
        }
        return res;
    }
}
