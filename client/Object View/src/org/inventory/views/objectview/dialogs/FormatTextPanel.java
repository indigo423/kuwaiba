/*
 *  Copyright 2010-2019 Neotropic SAS <contact@neotropic.co>
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */

package org.inventory.views.objectview.dialogs;

import java.awt.Color;
import java.awt.Component;
//import java.awt.Font;
//import java.awt.GraphicsEnvironment;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import org.inventory.communications.util.Utils;

/**
 * Panel that shows
 * @author Charles Edward Bedon Cortazar {@literal <charles.bedon@kuwaiba.org>}
 */
public class FormatTextPanel extends javax.swing.JPanel {

    /** Creates new form FormatTextPanel */
    public FormatTextPanel() {
        initComponents();
        pnlTabMain.addTab("Node", new SingleFormatPanel());
        //pnlTabMain.addTab("Connections",new SingleFormatPanel());
    }

    public Color getNodesFontColor(){
        return ((SingleFormatPanel)pnlTabMain.getComponent(0)).getSelectedColor();
    }

//    public Font getNodesFontType(){
//        return ((SingleFormatPanel)pnlTabMain.getComponent(0)).getSelectedType();
//    }

    public Integer getNodesFontSize(){
        return ((SingleFormatPanel)pnlTabMain.getComponent(0)).getSelectedSize();
    }

    public Color getEdgesFontColor(){
        return ((SingleFormatPanel)pnlTabMain.getComponent(1)).getSelectedColor();
    }

//    public Font getEdgesFontType(){
//        return ((SingleFormatPanel)pnlTabMain.getComponent(1)).getSelectedType();
//    }

    public Integer getEdgesFontSize(){
        return ((SingleFormatPanel)pnlTabMain.getComponent(1)).getSelectedSize();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTabMain = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabMain, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTabMain, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane pnlTabMain;
    // End of variables declaration//GEN-END:variables

    private class SingleFormatPanel extends JPanel{
        private javax.swing.JComboBox cmbFontColor;
        private javax.swing.JComboBox cmbFontSize;
//        private javax.swing.JComboBox cmbFontType;
        private javax.swing.JLabel lblFontColor;
        private javax.swing.JLabel lblFontSize;
//        private javax.swing.JLabel lblFontType;

        public SingleFormatPanel() {
            initComponents();
            initCustomComponents();
        }


        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Default code">
        private void initComponents() {

//            lblFontType = new javax.swing.JLabel();
            lblFontColor = new javax.swing.JLabel();
//            cmbFontType = new javax.swing.JComboBox();
            cmbFontColor = new javax.swing.JComboBox();
            cmbFontSize = new javax.swing.JComboBox();
            lblFontSize = new javax.swing.JLabel();

//            lblFontType.setText(org.openide.util.NbBundle.getMessage(FormatTextPanel.class, "FormatTextPanel.lblFontType.text")); // NOI18N

            lblFontColor.setText(org.openide.util.NbBundle.getMessage(FormatTextPanel.class, "FormatTextPanel.lblFontColor.text")); // NOI18N

            lblFontSize.setText(org.openide.util.NbBundle.getMessage(FormatTextPanel.class, "FormatTextPanel.lblFontSize.text")); // NOI18N

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                        .addGroup(layout.createSequentialGroup()
//                            .addComponent(lblFontType)
//                            .addGap(32, 32, 32)
//                            .addComponent(cmbFontType, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblFontColor)
                                .addComponent(lblFontSize))
                                
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbFontColor, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
//                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                        .addComponent(lblFontType)
//                        .addComponent(cmbFontType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFontColor)
                        .addComponent(cmbFontColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFontSize)
                        .addComponent(cmbFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            );
        }// </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="Custom init Code">
        private void initCustomComponents() {

            Color[] colors = new Color []{Color.black, Color.white, Color.red,
                                        Color.blue,Color.green,Color.orange, Color.yellow};

            cmbFontSize.addItem(null);
            for (int i = 6; i < 30; i++){
                if (i%2 == 0)
                    cmbFontSize.addItem(i);
            }

            cmbFontSize.setRenderer(new ListCellRenderer() {

                @Override
                public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                    JLabel item = new JLabel();
                    if (value != null)
                        item.setText(String.valueOf(value));
                    else
                        item.setText("Current Value");

                    item.setBackground(UIManager.getColor("ComboBox.selectionBackground")); //NOI18N
                    item.setOpaque(isSelected);
                    return item;
                }
            });

            cmbFontColor.addItem(null);
            for (Color color : colors)
                cmbFontColor.addItem(color);

            cmbFontColor.setRenderer(new ListCellRenderer() {

                @Override
                public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                    JLabel item = new JLabel();
                    if (value != null){
                        if (value instanceof Color){
                            item.setText(Utils.getColorName((Color)value));
                            item.setForeground((Color)value);
                        }
                    }else
                        item.setText("Current Value");

                    item.setBackground(UIManager.getColor("ComboBox.selectionBackground")); //NOI18N
                    item.setOpaque(isSelected);
                    return item;
                }
            });

//            cmbFontType.addItem(null);
//            for (Font font : GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts())
//                cmbFontType.addItem(font);
//
//            cmbFontType.setRenderer(new ListCellRenderer() {
//
//                public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
//                    JLabel item = new JLabel();
//                    if (value != null){
//                        if (value instanceof Font){ //Weird, the -1 index is a String, not null
//                            item.setFont(new Font(((Font)value).getFontName(),Font.PLAIN,12));
//                            item.setText(((Font)value).getFontName());
//                        }
//                    }else
//                        item.setText("Current Value");
//
//                    item.setBackground(UIManager.getColor("ComboBox.selectionBackground")); //NOI18N
//                    
//                    item.setOpaque(isSelected);
//                    return item;
//                }
//            });
        }// </editor-fold>

        public Color getSelectedColor(){
            return (Color)cmbFontColor.getSelectedItem();
        }

//        public Font getSelectedType(){
//            return (Font)cmbFontType.getSelectedItem();
//        }

        public int getSelectedSize(){
            return cmbFontSize.getSelectedItem() == null? -1: (Integer)cmbFontSize.getSelectedItem();
        }
    }
}
