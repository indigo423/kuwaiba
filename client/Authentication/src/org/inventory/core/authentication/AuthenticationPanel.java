/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */

package org.inventory.core.authentication;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.net.MalformedURLException;
import java.net.URL;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import org.inventory.communications.CommunicationsStub;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.LifecycleManager;
import org.openide.util.Exceptions;

/**
 * This is the main auth panel which contains the login and password textfields
 * and the connection settings section
 * @author Charles Edward Bedon Cortazar <charles.bedon@zoho.com>
 */
public class AuthenticationPanel extends javax.swing.JPanel {

    /** Creates new form AuthenticationPanel */
    public AuthenticationPanel() {
        initComponents();
        initCustomComponents();
    }
    
    private void initCustomComponents(){
        btnLogin = new JButton("Login");
        btnExit = new JButton("Exit");
        btnLogin.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                
                ConnectionSettingsPanel containedPanel = (ConnectionSettingsPanel)pnlSettingsContainer.getComponent(0);
                try {                   
                    CommunicationsStub.setServerURL(
                            new URL("http", containedPanel.getServerAddress() , containedPanel.getServerPort(),
                            containedPanel.getWSDLPath()));
                } catch (MalformedURLException ex) {
                    Exceptions.printStackTrace(ex);
                }

                try{
                    if (!CommunicationsStub.getInstance().createSession(txtUser.getText(), new String(txtPassword.getPassword())))
                       showMeAgain(CommunicationsStub.getInstance().getError(),
                               txtUser.getText(),
                               containedPanel.getTxtServerAddress().getText(),
                               containedPanel.getTxtServerPort().getText(),
                               containedPanel.getTxtWSDLPath().getText());
                }catch(Exception exp){
                    CommunicationsStub.resetInstance();
                    showMeAgain(exp.getMessage(),
                            txtUser.getText(),
                               containedPanel.getTxtServerAddress().getText(),
                               containedPanel.getTxtServerPort().getText(),
                               containedPanel.getTxtWSDLPath().getText());
                }
            }
        });
        
         btnExit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                LifecycleManager.getDefault().exit();
            }
        });

        pnlSettingsContainer.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                toggleView();
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        //Finally we embed the connections settings into the collapsable panel
        pnlSettingsContainer.add(new ConnectionSettingsPanel(),BorderLayout.CENTER);
        pnlSettingsContainer.getComponent(0).setVisible(false);
        txtUser.setRequestFocusEnabled(true);
        lblError.setVisible(false);
        lblDetails.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLogin = new javax.swing.JPanel();
        lblUser = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        lblError = new javax.swing.JLabel();
        lblDetails = new javax.swing.JLabel();
        pnlSettingsContainer = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        lblUser.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.lblUser.text")); // NOI18N

        lblPassword.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.lblPassword.text")); // NOI18N

        txtUser.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.txtUser.text")); // NOI18N

        txtPassword.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.txtPassword.text")); // NOI18N

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/authentication/res/error.png"))); // NOI18N
        lblError.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.lblError.text")); // NOI18N
        lblError.setAutoscrolls(true);
        lblError.setFocusable(false);

        lblDetails.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        lblDetails.setForeground(new java.awt.Color(0, 0, 204));
        lblDetails.setText(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.lblDetails.text")); // NOI18N

        javax.swing.GroupLayout pnlLoginLayout = new javax.swing.GroupLayout(pnlLogin);
        pnlLogin.setLayout(pnlLoginLayout);
        pnlLoginLayout.setHorizontalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLoginLayout.createSequentialGroup()
                            .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPassword)
                                .addComponent(lblUser))
                            .addGap(16, 16, 16)
                            .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPassword)
                                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblDetails))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        pnlLoginLayout.setVerticalGroup(
            pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDetails))
        );

        add(pnlLogin, java.awt.BorderLayout.NORTH);

        pnlSettingsContainer.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AuthenticationPanel.class, "AuthenticationPanel.pnlSettingsContainer.border.title"))); // NOI18N
        pnlSettingsContainer.setRequestFocusEnabled(false);
        pnlSettingsContainer.setLayout(new java.awt.BorderLayout());
        add(pnlSettingsContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDetails;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JPanel pnlSettingsContainer;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnExit;

    /**
     * Hides or shows the collapseable panel
     * Thanks to Craig Wood and H Tasfr at CodeRanch for their ideas on this
     * http://www.coderanch.com/t/341737/GUI/java/Expand-Collapse-Panels
     */
    private void toggleView(){
        JPanel contained = (JPanel)pnlSettingsContainer.getComponent(0);
        if (contained.isShowing()){
            contained.setVisible(false);
            ((TitledBorder)pnlSettingsContainer.getBorder()).setTitle("[+] Connection Settings");
        }
        else{
            contained.setVisible(true);
            ((TitledBorder)pnlSettingsContainer.getBorder()).setTitle("[-] Connection Settings");
        }

        //validate();
        //pnlSettingsContainer.repaint();
        ((JDialog)SwingUtilities.getAncestorOfClass(JDialog.class,this)).pack();
    }

    public Object[] getOptions(){
        return new Object[]{btnLogin,btnExit};
    }

    public JLabel getLblError(){
        return this.lblError;
    }

    public JLabel getLblDetails(){
        return this.lblDetails;
    }

    public JTextField getTxtUser(){
        return this.txtUser;
    }

    public ConnectionSettingsPanel getContainedPanel(){
        return (ConnectionSettingsPanel)this.pnlSettingsContainer.getComponent(0);
    }

    public void showMeAgain(String errorText, String user, String serverAddress, String serverPort, String WSDLPath){
        AuthenticationPanel pnlAuthentication =  new AuthenticationPanel();

        pnlAuthentication.getTxtUser().setText(user);
        pnlAuthentication.getContainedPanel().getTxtServerAddress().setText(serverAddress);
        pnlAuthentication.getContainedPanel().getTxtServerPort().setText(serverPort);
        pnlAuthentication.getContainedPanel().getTxtWSDLPath().setText(WSDLPath);

        //If the message is too long we assigned to the tooltiptext
        if (errorText.length() > 50){
            pnlAuthentication.getLblDetails().setToolTipText(errorText);
            pnlAuthentication.getLblDetails().setVisible(true);
            pnlAuthentication.getLblError().setText(errorText.substring(0, 50)+"..."); //NOI18n
        }else{
            pnlAuthentication.getLblError().setText(errorText);
            pnlAuthentication.getLblDetails().setVisible(false);
        }
        pnlAuthentication.getLblError().setVisible(true);

        DialogDescriptor dd = new DialogDescriptor(pnlAuthentication,"Login Window",true,
                pnlAuthentication.getOptions(),null,DialogDescriptor.BOTTOM_ALIGN,null,null);

        JDialog dialog = (JDialog)DialogDisplayer.getDefault().createDialog(dd);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dialog.setVisible(true);
    }
}
