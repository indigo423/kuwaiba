/*
 *  Copyright 2010-2016 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package org.inventory.core.authentication;

import java.util.Properties;

/**
 * This panel shows the form with the connection settings (server, port and WSDL path)
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
public class ConnectionSettingsPanel extends javax.swing.JPanel {

    ConnectionSettingsPanel(Properties loginProperties) {
        initComponents();        
        if (loginProperties != null){
            if (loginProperties.getProperty("protocol") != null) //NOI18N
                if (Boolean.valueOf(loginProperties.getProperty("protocol")))
                    radBtnHttps.setSelected(true);
            if (loginProperties.getProperty("address") != null) //NOI18N
                txtServerAddress.setText(loginProperties.getProperty("address")); //NOI18N
            if (loginProperties.getProperty("port") != null) //NOI18N
                txtServerPort.setText(loginProperties.getProperty("port")); //NOI18N
            if (loginProperties.getProperty("path") != null) //NOI18N
                txtWSDLPath.setText(loginProperties.getProperty("path")); //NOI18N
            
            //Only visible if HTTPS is selected
            chkHostVerification.setEnabled(radBtnHttps.isSelected());
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpBtnProtocol = new javax.swing.ButtonGroup();
        txtServerPort = new javax.swing.JTextField();
        lblServerPort = new javax.swing.JLabel();
        lblServerAddress = new javax.swing.JLabel();
        txtServerAddress = new javax.swing.JTextField();
        lblWSDLPath = new javax.swing.JLabel();
        txtWSDLPath = new javax.swing.JTextField();
        radBtnHttps = new javax.swing.JRadioButton();
        radBtnHttp = new javax.swing.JRadioButton();
        chkHostVerification = new javax.swing.JCheckBox();

        txtServerPort.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.txtServerPort.text")); // NOI18N

        lblServerPort.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.lblServerPort.text")); // NOI18N

        lblServerAddress.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.lblServerAddress.text")); // NOI18N

        txtServerAddress.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.txtServerAddress.text")); // NOI18N

        lblWSDLPath.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.lblWSDLPath.text")); // NOI18N

        txtWSDLPath.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.txtWSDLPath.text")); // NOI18N

        grpBtnProtocol.add(radBtnHttps);
        radBtnHttps.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.radBtnHttps.text")); // NOI18N
        radBtnHttps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnHttpsActionPerformed(evt);
            }
        });

        grpBtnProtocol.add(radBtnHttp);
        radBtnHttp.setSelected(true);
        radBtnHttp.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.radBtnHttp.text")); // NOI18N
        radBtnHttp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnHttpActionPerformed(evt);
            }
        });

        chkHostVerification.setText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.chkHostVerification.text")); // NOI18N
        chkHostVerification.setToolTipText(org.openide.util.NbBundle.getMessage(ConnectionSettingsPanel.class, "ConnectionSettingsPanel.chkHostVerification.toolTipText")); // NOI18N
        chkHostVerification.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWSDLPath)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblServerAddress)
                                    .addComponent(lblServerPort))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtWSDLPath, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtServerPort)
                                        .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(radBtnHttps)
                                .addGap(57, 57, 57)
                                .addComponent(radBtnHttp)))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(chkHostVerification)
                        .addGap(67, 67, 67))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServerAddress)
                    .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServerPort)
                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWSDLPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWSDLPath))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radBtnHttps)
                    .addComponent(radBtnHttp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHostVerification)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radBtnHttpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnHttpActionPerformed
        this.txtServerPort.setText("8080"); //NOI18N
        chkHostVerification.setEnabled(false);
    }//GEN-LAST:event_radBtnHttpActionPerformed

    private void radBtnHttpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnHttpsActionPerformed
        this.txtServerPort.setText("8181"); //NOI18N
        chkHostVerification.setEnabled(true);
    }//GEN-LAST:event_radBtnHttpsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkHostVerification;
    private javax.swing.ButtonGroup grpBtnProtocol;
    private javax.swing.JLabel lblServerAddress;
    private javax.swing.JLabel lblServerPort;
    private javax.swing.JLabel lblWSDLPath;
    private javax.swing.JRadioButton radBtnHttp;
    private javax.swing.JRadioButton radBtnHttps;
    private javax.swing.JTextField txtServerAddress;
    private javax.swing.JTextField txtServerPort;
    private javax.swing.JTextField txtWSDLPath;
    // End of variables declaration//GEN-END:variables


    /**
     * Retrieves the server address
     * @return a string with an IP or a canonical name
     */
    public String getServerAddress(){
        return txtServerAddress.getText();
    }
    
    public void setServerAddress (String serverAddress) {
        txtServerAddress.setText(serverAddress);
    }

    /**
     * Retrieves the port number. Defaults to 8080 if the text is formatted incorrectly
     * @return an integer with a valid port number
     */
    public int getServerPort(){
        try{
            int res = Integer.valueOf(txtServerPort.getText());
            if (res > 65535 || res < 1)
                return 8080;
            return res;
        }catch (NumberFormatException nfe){
            return 8080;
        }
    }
    
    public void setServerPort(int serverPort) {
            if (serverPort > 65535 || serverPort < 1)
                txtServerPort.setText("8080");
            else
                txtServerPort.setText(String.valueOf(serverPort));
    }

    /**
     * Retrieves the WSDL path from the root of the application server
     * @return a String with the path
     */
    public String getWSDLPath(){
        return txtWSDLPath.getText();
    }
    
    public void setWSDLPath(String wsdlPath) {
        txtWSDLPath.setText(wsdlPath);
    }
    
    public boolean getProtocol() {
        return radBtnHttps.isSelected();
    }
    
    public void setProtocol(boolean protocol) {
        radBtnHttps.setSelected(protocol);
    }
    
    public boolean getHostVerification(){
        return chkHostVerification.isSelected();
    }
    
    public void setHostVerification(boolean selected) {
        chkHostVerification.setSelected(selected);
    }
}
