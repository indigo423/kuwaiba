/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package org.inventory.views.viewrenderer;

import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import org.openide.explorer.ExplorerManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager.Provider;
import org.openide.explorer.ExplorerUtils;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.inventory.views.viewrenderer//ViewRenderer//EN",
autostore = false)
public final class ViewRendererTopComponent extends TopComponent implements Provider {

    private static ViewRendererTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/inventory/views/viewrenderer/res/icon.png";
    private static final String PREFERRED_ID = "ViewRendererTopComponent";

    private ExplorerManager em = new ExplorerManager();
    private ViewRendererService vrs;

    public ViewRendererTopComponent() {
        initComponents();
        initCustomComponents();
        setName(NbBundle.getMessage(ViewRendererTopComponent.class, "CTL_ViewRendererTopComponent"));
        setToolTipText(NbBundle.getMessage(ViewRendererTopComponent.class, "HINT_ViewRendererTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    public final void initCustomComponents(){
        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em));
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(em));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
        

        //Now the keystrokes (doesn't seem to be working)
        InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        keys.put(KeyStroke.getKeyStroke("control C"), DefaultEditorKit.copyAction);
        keys.put(KeyStroke.getKeyStroke("control X"), DefaultEditorKit.cutAction);
        keys.put(KeyStroke.getKeyStroke("control V"), DefaultEditorKit.pasteAction);
        
        associateLookup(ExplorerUtils.createLookup(em, map));
        
        vrs = new ViewRendererService(this);
       // cmbViewType
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barMain = new javax.swing.JToolBar();
        btnAddBackgroundImage = new javax.swing.JButton();
        btnZomOut = new javax.swing.JButton();
        btnZoomIn = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        cmbViewType = new javax.swing.JComboBox();
        pnlScrollMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        barMain.setRollover(true);

        btnAddBackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/viewrenderer/res/background.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAddBackgroundImage, org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnAddBackgroundImage.text")); // NOI18N
        btnAddBackgroundImage.setToolTipText(org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnAddBackgroundImage.toolTipText")); // NOI18N
        btnAddBackgroundImage.setFocusable(false);
        btnAddBackgroundImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddBackgroundImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barMain.add(btnAddBackgroundImage);

        btnZomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/viewrenderer/res/zoom-out.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnZomOut, org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnZomOut.text")); // NOI18N
        btnZomOut.setToolTipText(org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnZomOut.toolTipText")); // NOI18N
        btnZomOut.setFocusable(false);
        btnZomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barMain.add(btnZomOut);

        btnZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/viewrenderer/res/zoom-in.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnZoomIn, org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnZoomIn.text")); // NOI18N
        btnZoomIn.setToolTipText(org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnZoomIn.toolTipText")); // NOI18N
        btnZoomIn.setFocusable(false);
        btnZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barMain.add(btnZoomIn);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/views/viewrenderer/res/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnRefresh.text")); // NOI18N
        btnRefresh.setToolTipText(org.openide.util.NbBundle.getMessage(ViewRendererTopComponent.class, "ViewRendererTopComponent.btnRefresh.toolTipText")); // NOI18N
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barMain.add(btnRefresh);

        barMain.add(cmbViewType);

        add(barMain, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        pnlScrollMain.setViewportView(pnlMain);

        add(pnlScrollMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barMain;
    private javax.swing.JButton btnAddBackgroundImage;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnZomOut;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JComboBox cmbViewType;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane pnlScrollMain;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ViewRendererTopComponent getDefault() {
        if (instance == null) {
            instance = new ViewRendererTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ViewRendererTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ViewRendererTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ViewRendererTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ViewRendererTopComponent) {
            return (ViewRendererTopComponent) win;
        }
        Logger.getLogger(ViewRendererTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return em;
    }
}
