/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */


package org.inventory.customization.classmanager;

import java.awt.Image;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import org.inventory.core.services.interfaces.LocalClassMetadataLight;
import org.inventory.core.services.interfaces.NotificationUtil;
import org.inventory.core.services.utils.Utils;
import org.openide.util.Lookup;

/**
 * Displays the form to customize a class' properties
 * @author Charles Edward Bedon Cortazar <charles.bedon@zoho.com>
 */
public class ClassManagerFrame extends javax.swing.JFrame {
    private JFileChooser fChooser;
    private ClassManagerService cms;
    private NotificationUtil nu;
    private byte[] smallIcon=null;
    private byte[] icon=null;

    /** Creates new form ClassManagerFrame */
    public ClassManagerFrame() {
        initComponents();
        initCustomComponents();
    }

    public final void initCustomComponents(){
        cms = new ClassManagerService(this);
        fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fChooser.setFileFilter(cms);
        fChooser.setAcceptAllFileFilterUsed(false);

        List<LocalClassMetadataLight> lcml = cms.getAllMeta();
        for (LocalClassMetadataLight lcm : lcml)
            cmbClass.addItem(lcm);
        cmbClass.addActionListener(cms);
        cmbClass.setSelectedIndex(-1);
        this.setLocationRelativeTo(getRootPane());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barMain = new javax.swing.JToolBar();
        btnSave = new javax.swing.JButton();
        pnlScrollMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        txtDisplayName = new javax.swing.JTextField();
        lblDisplayName = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        lblSmallIcon = new javax.swing.JLabel();
        btnSmallIconChooser = new javax.swing.JButton();
        lblClass = new javax.swing.JLabel();
        btnIconChooser = new javax.swing.JButton();
        txtIcon = new javax.swing.JTextField();
        txtSmallIcon = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        lblIcon = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        barMain.setRollover(true);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/customization/classmanager/res/save.png"))); // NOI18N
        btnSave.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.btnSave.toolTipText")); // NOI18N
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        barMain.add(btnSave);

        getContentPane().add(barMain, java.awt.BorderLayout.PAGE_START);

        txtDisplayName.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.txtDisplayName.text")); // NOI18N
        txtDisplayName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDisplayNameActionPerformed(evt);
            }
        });

        lblDisplayName.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.lblDisplayName.text")); // NOI18N

        lblSmallIcon.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.lblSmallIcon.text")); // NOI18N

        btnSmallIconChooser.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.btnSmallIconChooser.text")); // NOI18N
        btnSmallIconChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmallIconChooserActionPerformed(evt);
            }
        });

        lblClass.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.lblClass.text")); // NOI18N

        btnIconChooser.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.btnIconChooser.text")); // NOI18N
        btnIconChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIconChooserActionPerformed(evt);
            }
        });

        txtIcon.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.txtIcon.text")); // NOI18N
        txtIcon.setEnabled(false);

        txtSmallIcon.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.txtSmallIcon.text")); // NOI18N
        txtSmallIcon.setEnabled(false);

        txtDescription.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.txtDescription.text")); // NOI18N

        lblIcon.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.lblIcon.text")); // NOI18N

        lblDescription.setText(org.openide.util.NbBundle.getMessage(ClassManagerFrame.class, "ClassManagerFrame.lblDescription.text")); // NOI18N

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClass)
                    .addComponent(lblDisplayName)
                    .addComponent(lblDescription)
                    .addComponent(lblSmallIcon)
                    .addComponent(lblIcon))
                .addGap(34, 34, 34)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(txtIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIconChooser))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(txtSmallIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSmallIconChooser))
                    .addComponent(txtDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(txtDisplayName, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(cmbClass, 0, 521, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDisplayName)
                    .addComponent(txtDisplayName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSmallIcon)
                        .addComponent(txtSmallIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSmallIconChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIcon))
                    .addComponent(btnIconChooser))
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pnlScrollMain.setViewportView(pnlMain);

        getContentPane().add(pnlScrollMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if(cms.saveProperties((LocalClassMetadataLight)cmbClass.getSelectedItem(),
                txtDisplayName.getText().trim(),txtDescription.getText().trim(),smallIcon,icon))
            getNotifier().showSimplePopup("Class Properties Modification", NotificationUtil.INFO, "Operation completed successfully");
        else
            getNotifier().showSimplePopup("Class Properties Modification", NotificationUtil.ERROR, "Operation completed with errors. Check log for details");
}//GEN-LAST:event_btnSaveActionPerformed

    private void txtDisplayNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDisplayNameActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtDisplayNameActionPerformed

    private void btnSmallIconChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmallIconChooserActionPerformed
        if (fChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            txtSmallIcon.setText(fChooser.getSelectedFile().getAbsolutePath());
            Image mySmallIcon = Toolkit.getDefaultToolkit().createImage(fChooser.getSelectedFile().getAbsolutePath());
            if (mySmallIcon == null)
                getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "Image in "+fChooser.getSelectedFile().getAbsolutePath()+" couldn't be loaded");
            else{
                //This image trick if useful because for some 8bits gif, the getHeight/Width returns -1
                if((new ImageIcon(mySmallIcon)).getIconHeight() > 16) //We don't accept images of more tha 16x16 pixels
                    getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The height if the given image exceeds 16 pixels");
                else{
                    if((new ImageIcon(mySmallIcon)).getIconWidth() > 16) //We don't accept images of more tha 16x16 pixels
                        getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The widtth if the given image exceeds 16 pixels");
                    else{
                        smallIcon = Utils.getByteArrayFromImage(fChooser.getSelectedFile(),cms.getExtension(fChooser.getSelectedFile()));
                        if (smallIcon == null)
                            getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The file couldn't be converted");
                    }
                }
            }
        }
}//GEN-LAST:event_btnSmallIconChooserActionPerformed

    private void btnIconChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIconChooserActionPerformed
        if (fChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            Image mySmallIcon = Toolkit.getDefaultToolkit().createImage(fChooser.getSelectedFile().getAbsolutePath());
            if (mySmallIcon == null)
                getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "Image in "+fChooser.getSelectedFile().getAbsolutePath()+" couldn't be loaded");
            else{
                if(mySmallIcon.getHeight(null) > 48) //We don't accept images of more tha 48x48 pixels
                    getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The height if the given image is bigger tha 16 pixels");
                else{
                    if(mySmallIcon.getWidth(null) > 48) //We don't accept images of more tha 48x48 pixels
                        getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The widtth if the given image is bigger tha 16 pixels");
                    else{
                        icon = Utils.getByteArrayFromImage(fChooser.getSelectedFile(),cms.getExtension(fChooser.getSelectedFile()));
                        if (icon == null)
                            getNotifier().showSimplePopup("Image Load", NotificationUtil.ERROR, "The file couldn't be converted");
                        else
                            txtIcon.setText(fChooser.getSelectedFile().getAbsolutePath());
                    }
                }
            }
        }
}//GEN-LAST:event_btnIconChooserActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barMain;
    private javax.swing.JButton btnIconChooser;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSmallIconChooser;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDisplayName;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblSmallIcon;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane pnlScrollMain;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtDisplayName;
    private javax.swing.JTextField txtIcon;
    private javax.swing.JTextField txtSmallIcon;
    // End of variables declaration//GEN-END:variables

   public NotificationUtil getNotifier(){
        if (nu == null)
            nu = Lookup.getDefault().lookup(NotificationUtil.class);
        return nu;
    }

    public JTextField getTxtDescription() {
        return txtDescription;
    }

    public JTextField getTxtDisplayName() {
        return txtDisplayName;
    }

    public JTextField getTxtIcon() {
        return txtIcon;
    }

    public JTextField getTxtSmallIcon() {
        return txtSmallIcon;
    }
}
