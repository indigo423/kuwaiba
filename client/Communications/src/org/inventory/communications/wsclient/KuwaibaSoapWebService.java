
package org.inventory.communications.wsclient;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "KuwaibaSoapWebService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface KuwaibaSoapWebService {


    /**
     * 
     * @param showAll
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetClassHierarchyResponse>
     */
    @WebMethod(operationName = "getClassHierarchy")
    @RequestWrapper(localName = "getClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchy")
    @ResponseWrapper(localName = "getClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchyResponse")
    public Response<GetClassHierarchyResponse> getClassHierarchyAsync(
        @WebParam(name = "showAll", targetNamespace = "")
        boolean showAll,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param showAll
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getClassHierarchy")
    @RequestWrapper(localName = "getClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchy")
    @ResponseWrapper(localName = "getClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchyResponse")
    public Future<?> getClassHierarchyAsync(
        @WebParam(name = "showAll", targetNamespace = "")
        boolean showAll,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetClassHierarchyResponse> asyncHandler);

    /**
     * 
     * @param showAll
     * @param sessionId
     * @return
     *     returns byte[]
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchy")
    @ResponseWrapper(localName = "getClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassHierarchyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassHierarchyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassHierarchyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassHierarchy/Fault/ServerSideException")
    })
    public byte[] getClassHierarchy(
        @WebParam(name = "showAll", targetNamespace = "")
        boolean showAll,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.HasAttributeResponse>
     */
    @WebMethod(operationName = "hasAttribute")
    @RequestWrapper(localName = "hasAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttribute")
    @ResponseWrapper(localName = "hasAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttributeResponse")
    public Response<HasAttributeResponse> hasAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "hasAttribute")
    @RequestWrapper(localName = "hasAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttribute")
    @ResponseWrapper(localName = "hasAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttributeResponse")
    public Future<?> hasAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<HasAttributeResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @return
     *     returns boolean
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hasAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttribute")
    @ResponseWrapper(localName = "hasAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.HasAttributeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/hasAttributeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/hasAttributeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/hasAttribute/Fault/ServerSideException")
    })
    public boolean hasAttribute(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetServiceResponse>
     */
    @WebMethod(operationName = "getService")
    @RequestWrapper(localName = "getService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetService")
    @ResponseWrapper(localName = "getServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServiceResponse")
    public Response<GetServiceResponse> getServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getService")
    @RequestWrapper(localName = "getService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetService")
    @ResponseWrapper(localName = "getServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServiceResponse")
    public Future<?> getServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetService")
    @ResponseWrapper(localName = "getServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getService/Fault/ServerSideException")
    })
    public RemoteObject getService(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param isInDesign
     * @param color
     * @param displayName
     * @param parentClassName
     * @param isCustom
     * @param icon
     * @param description
     * @param className
     * @param isCountable
     * @param smallIcon
     * @param sessionId
     * @param isAbstract
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateClassResponse>
     */
    @WebMethod(operationName = "createClass")
    @RequestWrapper(localName = "createClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClass")
    @ResponseWrapper(localName = "createClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassResponse")
    public Response<CreateClassResponse> createClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "isAbstract", targetNamespace = "")
        boolean isAbstract,
        @WebParam(name = "isCustom", targetNamespace = "")
        boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        boolean isCountable,
        @WebParam(name = "isInDesign", targetNamespace = "")
        boolean isInDesign,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param isInDesign
     * @param color
     * @param displayName
     * @param parentClassName
     * @param icon
     * @param description
     * @param className
     * @param isCountable
     * @param sessionId
     * @param asyncHandler
     * @param isAbstract
     * @param isCustom
     * @param smallIcon
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createClass")
    @RequestWrapper(localName = "createClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClass")
    @ResponseWrapper(localName = "createClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassResponse")
    public Future<?> createClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "isAbstract", targetNamespace = "")
        boolean isAbstract,
        @WebParam(name = "isCustom", targetNamespace = "")
        boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        boolean isCountable,
        @WebParam(name = "isInDesign", targetNamespace = "")
        boolean isInDesign,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateClassResponse> asyncHandler);

    /**
     * 
     * @param isInDesign
     * @param color
     * @param displayName
     * @param parentClassName
     * @param isCustom
     * @param icon
     * @param description
     * @param className
     * @param isCountable
     * @param smallIcon
     * @param sessionId
     * @param isAbstract
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClass")
    @ResponseWrapper(localName = "createClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClass/Fault/ServerSideException")
    })
    public long createClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "isAbstract", targetNamespace = "")
        boolean isAbstract,
        @WebParam(name = "isCustom", targetNamespace = "")
        boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        boolean isCountable,
        @WebParam(name = "isInDesign", targetNamespace = "")
        boolean isInDesign,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classId
     * @param isInDesign
     * @param color
     * @param displayName
     * @param icon
     * @param isCustom
     * @param description
     * @param className
     * @param smallIcon
     * @param isCountable
     * @param sessionId
     * @param isAbstract
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetClassPropertiesResponse>
     */
    @WebMethod(operationName = "setClassProperties")
    @RequestWrapper(localName = "setClassProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassProperties")
    @ResponseWrapper(localName = "setClassPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassPropertiesResponse")
    public Response<SetClassPropertiesResponse> setClassPropertiesAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "isAbstract", targetNamespace = "")
        Boolean isAbstract,
        @WebParam(name = "isInDesign", targetNamespace = "")
        Boolean isInDesign,
        @WebParam(name = "isCustom", targetNamespace = "")
        Boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        Boolean isCountable,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param isInDesign
     * @param color
     * @param displayName
     * @param icon
     * @param description
     * @param className
     * @param isCountable
     * @param sessionId
     * @param asyncHandler
     * @param isAbstract
     * @param classId
     * @param isCustom
     * @param smallIcon
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setClassProperties")
    @RequestWrapper(localName = "setClassProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassProperties")
    @ResponseWrapper(localName = "setClassPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassPropertiesResponse")
    public Future<?> setClassPropertiesAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "isAbstract", targetNamespace = "")
        Boolean isAbstract,
        @WebParam(name = "isInDesign", targetNamespace = "")
        Boolean isInDesign,
        @WebParam(name = "isCustom", targetNamespace = "")
        Boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        Boolean isCountable,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetClassPropertiesResponse> asyncHandler);

    /**
     * 
     * @param classId
     * @param isInDesign
     * @param color
     * @param displayName
     * @param icon
     * @param isCustom
     * @param description
     * @param className
     * @param smallIcon
     * @param isCountable
     * @param sessionId
     * @param isAbstract
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setClassProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassProperties")
    @ResponseWrapper(localName = "setClassPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetClassPropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setClassPropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setClassPropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setClassProperties/Fault/ServerSideException")
    })
    public void setClassProperties(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "smallIcon", targetNamespace = "")
        byte[] smallIcon,
        @WebParam(name = "icon", targetNamespace = "")
        byte[] icon,
        @WebParam(name = "color", targetNamespace = "")
        int color,
        @WebParam(name = "isAbstract", targetNamespace = "")
        Boolean isAbstract,
        @WebParam(name = "isInDesign", targetNamespace = "")
        Boolean isInDesign,
        @WebParam(name = "isCustom", targetNamespace = "")
        Boolean isCustom,
        @WebParam(name = "isCountable", targetNamespace = "")
        Boolean isCountable,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteClassResponse>
     */
    @WebMethod(operationName = "deleteClass")
    @RequestWrapper(localName = "deleteClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClass")
    @ResponseWrapper(localName = "deleteClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassResponse")
    public Response<DeleteClassResponse> deleteClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteClass")
    @RequestWrapper(localName = "deleteClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClass")
    @ResponseWrapper(localName = "deleteClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassResponse")
    public Future<?> deleteClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteClassResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClass")
    @ResponseWrapper(localName = "deleteClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClass/Fault/ServerSideException")
    })
    public void deleteClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllClassesLightResponse>
     */
    @WebMethod(operationName = "getAllClassesLight")
    @RequestWrapper(localName = "getAllClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLight")
    @ResponseWrapper(localName = "getAllClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLightResponse")
    public Response<GetAllClassesLightResponse> getAllClassesLightAsync(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllClassesLight")
    @RequestWrapper(localName = "getAllClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLight")
    @ResponseWrapper(localName = "getAllClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLightResponse")
    public Future<?> getAllClassesLightAsync(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllClassesLightResponse> asyncHandler);

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLight")
    @ResponseWrapper(localName = "getAllClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClassesLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClassesLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClassesLight/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getAllClassesLight(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateObjectResponse>
     */
    @WebMethod(operationName = "updateObject")
    @RequestWrapper(localName = "updateObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObject")
    @ResponseWrapper(localName = "updateObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectResponse")
    public Response<UpdateObjectResponse> updateObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateObject")
    @RequestWrapper(localName = "updateObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObject")
    @ResponseWrapper(localName = "updateObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectResponse")
    public Future<?> updateObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateObjectResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObject")
    @ResponseWrapper(localName = "updateObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObject/Fault/ServerSideException")
    })
    public void updateObject(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsWithFilterResponse>
     */
    @WebMethod(operationName = "getObjectsWithFilter")
    @RequestWrapper(localName = "getObjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilter")
    @ResponseWrapper(localName = "getObjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterResponse")
    public Response<GetObjectsWithFilterResponse> getObjectsWithFilterAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsWithFilter")
    @RequestWrapper(localName = "getObjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilter")
    @ResponseWrapper(localName = "getObjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterResponse")
    public Future<?> getObjectsWithFilterAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsWithFilterResponse> asyncHandler);

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObject>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilter")
    @ResponseWrapper(localName = "getObjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilterRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilterResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilter/Fault/ServerSideException")
    })
    public List<RemoteObject> getObjectsWithFilter(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param aObjectClass
     * @param aOid
     * @param bOid
     * @param bObjectClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCommonParentResponse>
     */
    @WebMethod(operationName = "getCommonParent")
    @RequestWrapper(localName = "getCommonParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParent")
    @ResponseWrapper(localName = "getCommonParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParentResponse")
    public Response<GetCommonParentResponse> getCommonParentAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aOid", targetNamespace = "")
        String aOid,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bOid", targetNamespace = "")
        String bOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param aObjectClass
     * @param aOid
     * @param bOid
     * @param bObjectClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCommonParent")
    @RequestWrapper(localName = "getCommonParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParent")
    @ResponseWrapper(localName = "getCommonParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParentResponse")
    public Future<?> getCommonParentAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aOid", targetNamespace = "")
        String aOid,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bOid", targetNamespace = "")
        String bOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCommonParentResponse> asyncHandler);

    /**
     * 
     * @param aObjectClass
     * @param aOid
     * @param bOid
     * @param bObjectClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectLight
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCommonParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParent")
    @ResponseWrapper(localName = "getCommonParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCommonParentResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCommonParentRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCommonParentResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCommonParent/Fault/ServerSideException")
    })
    public RemoteObjectLight getCommonParent(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aOid", targetNamespace = "")
        String aOid,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bOid", targetNamespace = "")
        String bOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetParentsResponse>
     */
    @WebMethod(operationName = "getParents")
    @RequestWrapper(localName = "getParents", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParents")
    @ResponseWrapper(localName = "getParentsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsResponse")
    public Response<GetParentsResponse> getParentsAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param objectclass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getParents")
    @RequestWrapper(localName = "getParents", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParents")
    @ResponseWrapper(localName = "getParentsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsResponse")
    public Future<?> getParentsAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetParentsResponse> asyncHandler);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getParents", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParents")
    @ResponseWrapper(localName = "getParentsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParents/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getParents(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetParentsUntilFirstOfClassResponse>
     */
    @WebMethod(operationName = "getParentsUntilFirstOfClass")
    @RequestWrapper(localName = "getParentsUntilFirstOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClass")
    @ResponseWrapper(localName = "getParentsUntilFirstOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClassResponse")
    public Response<GetParentsUntilFirstOfClassResponse> getParentsUntilFirstOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getParentsUntilFirstOfClass")
    @RequestWrapper(localName = "getParentsUntilFirstOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClass")
    @ResponseWrapper(localName = "getParentsUntilFirstOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClassResponse")
    public Future<?> getParentsUntilFirstOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetParentsUntilFirstOfClassResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getParentsUntilFirstOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClass")
    @ResponseWrapper(localName = "getParentsUntilFirstOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentsUntilFirstOfClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentsUntilFirstOfClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentsUntilFirstOfClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentsUntilFirstOfClass/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getParentsUntilFirstOfClass(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFirstParentOfClassResponse>
     */
    @WebMethod(operationName = "getFirstParentOfClass")
    @RequestWrapper(localName = "getFirstParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClass")
    @ResponseWrapper(localName = "getFirstParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClassResponse")
    public Response<GetFirstParentOfClassResponse> getFirstParentOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFirstParentOfClass")
    @RequestWrapper(localName = "getFirstParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClass")
    @ResponseWrapper(localName = "getFirstParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClassResponse")
    public Future<?> getFirstParentOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFirstParentOfClassResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param objectToMatchClassName
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectLight
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFirstParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClass")
    @ResponseWrapper(localName = "getFirstParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFirstParentOfClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFirstParentOfClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFirstParentOfClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFirstParentOfClass/Fault/ServerSideException")
    })
    public RemoteObjectLight getFirstParentOfClass(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectToMatchClassName", targetNamespace = "")
        String objectToMatchClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classNames
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteObjectsResponse>
     */
    @WebMethod(operationName = "deleteObjects")
    @RequestWrapper(localName = "deleteObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjects")
    @ResponseWrapper(localName = "deleteObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectsResponse")
    public Response<DeleteObjectsResponse> deleteObjectsAsync(
        @WebParam(name = "classNames", targetNamespace = "")
        List<String> classNames,
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classNames
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param releaseRelationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteObjects")
    @RequestWrapper(localName = "deleteObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjects")
    @ResponseWrapper(localName = "deleteObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectsResponse")
    public Future<?> deleteObjectsAsync(
        @WebParam(name = "classNames", targetNamespace = "")
        List<String> classNames,
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteObjectsResponse> asyncHandler);

    /**
     * 
     * @param classNames
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjects")
    @ResponseWrapper(localName = "deleteObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObjects/Fault/ServerSideException")
    })
    public void deleteObjects(
        @WebParam(name = "classNames", targetNamespace = "")
        List<String> classNames,
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteObjectResponse>
     */
    @WebMethod(operationName = "deleteObject")
    @RequestWrapper(localName = "deleteObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObject")
    @ResponseWrapper(localName = "deleteObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectResponse")
    public Response<DeleteObjectResponse> deleteObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param releaseRelationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteObject")
    @RequestWrapper(localName = "deleteObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObject")
    @ResponseWrapper(localName = "deleteObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectResponse")
    public Future<?> deleteObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteObjectResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObject")
    @ResponseWrapper(localName = "deleteObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteObject/Fault/ServerSideException")
    })
    public void deleteObject(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveObjectsToPoolResponse>
     */
    @WebMethod(operationName = "moveObjectsToPool")
    @RequestWrapper(localName = "moveObjectsToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPool")
    @ResponseWrapper(localName = "moveObjectsToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPoolResponse")
    public Response<MoveObjectsToPoolResponse> moveObjectsToPoolAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveObjectsToPool")
    @RequestWrapper(localName = "moveObjectsToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPool")
    @ResponseWrapper(localName = "moveObjectsToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPoolResponse")
    public Future<?> moveObjectsToPoolAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveObjectsToPoolResponse> asyncHandler);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveObjectsToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPool")
    @ResponseWrapper(localName = "moveObjectsToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToPool/Fault/ServerSideException")
    })
    public void moveObjectsToPool(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSpecialObjectResponse>
     */
    @WebMethod(operationName = "createSpecialObject")
    @RequestWrapper(localName = "createSpecialObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObject")
    @ResponseWrapper(localName = "createSpecialObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObjectResponse")
    public Response<CreateSpecialObjectResponse> createSpecialObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSpecialObject")
    @RequestWrapper(localName = "createSpecialObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObject")
    @ResponseWrapper(localName = "createSpecialObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObjectResponse")
    public Future<?> createSpecialObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSpecialObjectResponse> asyncHandler);

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSpecialObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObject")
    @ResponseWrapper(localName = "createSpecialObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSpecialObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSpecialObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSpecialObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSpecialObject/Fault/ServerSideException")
    })
    public String createSpecialObject(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePoolItemResponse>
     */
    @WebMethod(operationName = "createPoolItem")
    @RequestWrapper(localName = "createPoolItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItem")
    @ResponseWrapper(localName = "createPoolItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItemResponse")
    public Response<CreatePoolItemResponse> createPoolItemAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPoolItem")
    @RequestWrapper(localName = "createPoolItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItem")
    @ResponseWrapper(localName = "createPoolItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItemResponse")
    public Future<?> createPoolItemAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePoolItemResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPoolItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItem")
    @ResponseWrapper(localName = "createPoolItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolItemResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolItemRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolItemResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolItem/Fault/ServerSideException")
    })
    public String createPoolItem(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param namePattern
     * @param parentOid
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateBulkObjectsResponse>
     */
    @WebMethod(operationName = "createBulkObjects")
    @RequestWrapper(localName = "createBulkObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjects")
    @ResponseWrapper(localName = "createBulkObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjectsResponse")
    public Response<CreateBulkObjectsResponse> createBulkObjectsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param namePattern
     * @param parentOid
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createBulkObjects")
    @RequestWrapper(localName = "createBulkObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjects")
    @ResponseWrapper(localName = "createBulkObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjectsResponse")
    public Future<?> createBulkObjectsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateBulkObjectsResponse> asyncHandler);

    /**
     * 
     * @param namePattern
     * @param parentOid
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBulkObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjects")
    @ResponseWrapper(localName = "createBulkObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkObjects/Fault/ServerSideException")
    })
    public List<String> createBulkObjects(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param namePattern
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @param parentId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateBulkSpecialObjectsResponse>
     */
    @WebMethod(operationName = "createBulkSpecialObjects")
    @RequestWrapper(localName = "createBulkSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjects")
    @ResponseWrapper(localName = "createBulkSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjectsResponse")
    public Response<CreateBulkSpecialObjectsResponse> createBulkSpecialObjectsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param namePattern
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @param parentId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createBulkSpecialObjects")
    @RequestWrapper(localName = "createBulkSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjects")
    @ResponseWrapper(localName = "createBulkSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjectsResponse")
    public Future<?> createBulkSpecialObjectsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateBulkSpecialObjectsResponse> asyncHandler);

    /**
     * 
     * @param namePattern
     * @param parentClassName
     * @param className
     * @param sessionId
     * @param templateId
     * @param parentId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBulkSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjects")
    @ResponseWrapper(localName = "createBulkSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialObjects/Fault/ServerSideException")
    })
    public List<String> createBulkSpecialObjects(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "namePattern", targetNamespace = "")
        String namePattern,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectLightResponse>
     */
    @WebMethod(operationName = "getObjectLight")
    @RequestWrapper(localName = "getObjectLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLight")
    @ResponseWrapper(localName = "getObjectLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLightResponse")
    public Response<GetObjectLightResponse> getObjectLightAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param objectclass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectLight")
    @RequestWrapper(localName = "getObjectLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLight")
    @ResponseWrapper(localName = "getObjectLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLightResponse")
    public Future<?> getObjectLightAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectLightResponse> asyncHandler);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectLight
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLight")
    @ResponseWrapper(localName = "getObjectLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectLight/Fault/ServerSideException")
    })
    public RemoteObjectLight getObjectLight(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsWithFilterLightResponse>
     */
    @WebMethod(operationName = "getObjectsWithFilterLight")
    @RequestWrapper(localName = "getObjectsWithFilterLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLight")
    @ResponseWrapper(localName = "getObjectsWithFilterLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLightResponse")
    public Response<GetObjectsWithFilterLightResponse> getObjectsWithFilterLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsWithFilterLight")
    @RequestWrapper(localName = "getObjectsWithFilterLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLight")
    @ResponseWrapper(localName = "getObjectsWithFilterLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLightResponse")
    public Future<?> getObjectsWithFilterLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsWithFilterLightResponse> asyncHandler);

    /**
     * 
     * @param filterValue
     * @param filterName
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsWithFilterLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLight")
    @ResponseWrapper(localName = "getObjectsWithFilterLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsWithFilterLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilterLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilterLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsWithFilterLight/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectsWithFilterLight(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "filterName", targetNamespace = "")
        String filterName,
        @WebParam(name = "filterValue", targetNamespace = "")
        String filterValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveObjectsResponse>
     */
    @WebMethod(operationName = "moveObjects")
    @RequestWrapper(localName = "moveObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjects")
    @ResponseWrapper(localName = "moveObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsResponse")
    public Response<MoveObjectsResponse> moveObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveObjects")
    @RequestWrapper(localName = "moveObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjects")
    @ResponseWrapper(localName = "moveObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsResponse")
    public Future<?> moveObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveObjectsResponse> asyncHandler);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjects")
    @ResponseWrapper(localName = "moveObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjects/Fault/ServerSideException")
    })
    public void moveObjects(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveSpecialObjectsResponse>
     */
    @WebMethod(operationName = "moveSpecialObjects")
    @RequestWrapper(localName = "moveSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjects")
    @ResponseWrapper(localName = "moveSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjectsResponse")
    public Response<MoveSpecialObjectsResponse> moveSpecialObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveSpecialObjects")
    @RequestWrapper(localName = "moveSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjects")
    @ResponseWrapper(localName = "moveSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjectsResponse")
    public Future<?> moveSpecialObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveSpecialObjectsResponse> asyncHandler);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveSpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjects")
    @ResponseWrapper(localName = "moveSpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSpecialObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSpecialObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSpecialObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSpecialObjects/Fault/ServerSideException")
    })
    public void moveSpecialObjects(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param templateClases
     * @param recursive
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopyObjectsResponse>
     */
    @WebMethod(operationName = "copyObjects")
    @RequestWrapper(localName = "copyObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjects")
    @ResponseWrapper(localName = "copyObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjectsResponse")
    public Response<CopyObjectsResponse> copyObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @param templateClases
     * @param recursive
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copyObjects")
    @RequestWrapper(localName = "copyObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjects")
    @ResponseWrapper(localName = "copyObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjectsResponse")
    public Future<?> copyObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopyObjectsResponse> asyncHandler);

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param templateClases
     * @param recursive
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "copyObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjects")
    @ResponseWrapper(localName = "copyObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyObjects/Fault/ServerSideException")
    })
    public List<String> copyObjects(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param templateClases
     * @param recursive
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopySpecialObjectsResponse>
     */
    @WebMethod(operationName = "copySpecialObjects")
    @RequestWrapper(localName = "copySpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjects")
    @ResponseWrapper(localName = "copySpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjectsResponse")
    public Response<CopySpecialObjectsResponse> copySpecialObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @param templateClases
     * @param recursive
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copySpecialObjects")
    @RequestWrapper(localName = "copySpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjects")
    @ResponseWrapper(localName = "copySpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjectsResponse")
    public Future<?> copySpecialObjectsAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopySpecialObjectsResponse> asyncHandler);

    /**
     * 
     * @param templateOids
     * @param targetClass
     * @param targetOid
     * @param sessionId
     * @param templateClases
     * @param recursive
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "copySpecialObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjects")
    @ResponseWrapper(localName = "copySpecialObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySpecialObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySpecialObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySpecialObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySpecialObjects/Fault/ServerSideException")
    })
    public List<String> copySpecialObjects(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "templateClases", targetNamespace = "")
        List<String> templateClases,
        @WebParam(name = "templateOids", targetNamespace = "")
        List<String> templateOids,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectChildrenResponse>
     */
    @WebMethod(operationName = "getObjectChildren")
    @RequestWrapper(localName = "getObjectChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildren")
    @ResponseWrapper(localName = "getObjectChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenResponse")
    public Response<GetObjectChildrenResponse> getObjectChildrenAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectChildren")
    @RequestWrapper(localName = "getObjectChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildren")
    @ResponseWrapper(localName = "getObjectChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenResponse")
    public Future<?> getObjectChildrenAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectChildrenResponse> asyncHandler);

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildren")
    @ResponseWrapper(localName = "getObjectChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildren/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectChildren(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSiblingsResponse>
     */
    @WebMethod(operationName = "getSiblings")
    @RequestWrapper(localName = "getSiblings", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblings")
    @ResponseWrapper(localName = "getSiblingsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblingsResponse")
    public Response<GetSiblingsResponse> getSiblingsAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSiblings")
    @RequestWrapper(localName = "getSiblings", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblings")
    @ResponseWrapper(localName = "getSiblingsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblingsResponse")
    public Future<?> getSiblingsAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSiblingsResponse> asyncHandler);

    /**
     * 
     * @param objectClassName
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSiblings", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblings")
    @ResponseWrapper(localName = "getSiblingsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSiblingsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSiblingsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSiblingsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSiblings/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSiblings(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributesToFilter
     * @param maxResults
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsOfClassLightResponse>
     */
    @WebMethod(operationName = "getObjectsOfClassLight")
    @RequestWrapper(localName = "getObjectsOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLight")
    @ResponseWrapper(localName = "getObjectsOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLightResponse")
    public Response<GetObjectsOfClassLightResponse> getObjectsOfClassLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributesToFilter", targetNamespace = "")
        List<StringPair> attributesToFilter,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributesToFilter
     * @param maxResults
     * @param className
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsOfClassLight")
    @RequestWrapper(localName = "getObjectsOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLight")
    @ResponseWrapper(localName = "getObjectsOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLightResponse")
    public Future<?> getObjectsOfClassLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributesToFilter", targetNamespace = "")
        List<StringPair> attributesToFilter,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsOfClassLightResponse> asyncHandler);

    /**
     * 
     * @param attributesToFilter
     * @param maxResults
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLight")
    @ResponseWrapper(localName = "getObjectsOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsOfClassLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsOfClassLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsOfClassLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsOfClassLight/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectsOfClassLight(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributesToFilter", targetNamespace = "")
        List<StringPair> attributesToFilter,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetChildrenOfClassResponse>
     */
    @WebMethod(operationName = "getChildrenOfClass")
    @RequestWrapper(localName = "getChildrenOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClass")
    @ResponseWrapper(localName = "getChildrenOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassResponse")
    public Response<GetChildrenOfClassResponse> getChildrenOfClassAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getChildrenOfClass")
    @RequestWrapper(localName = "getChildrenOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClass")
    @ResponseWrapper(localName = "getChildrenOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassResponse")
    public Future<?> getChildrenOfClassAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetChildrenOfClassResponse> asyncHandler);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObject>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildrenOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClass")
    @ResponseWrapper(localName = "getChildrenOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClass/Fault/ServerSideException")
    })
    public List<RemoteObject> getChildrenOfClass(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param classToFilter
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightResponse>
     */
    @WebMethod(operationName = "getSpecialChildrenOfClassLight")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLight")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightResponse")
    public Response<GetSpecialChildrenOfClassLightResponse> getSpecialChildrenOfClassLightAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param asyncHandler
     * @param classToFilter
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSpecialChildrenOfClassLight")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLight")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightResponse")
    public Future<?> getSpecialChildrenOfClassLightAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSpecialChildrenOfClassLightResponse> asyncHandler);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param classToFilter
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLight")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLight/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSpecialChildrenOfClassLight(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetChildrenOfClassLightRecursiveResponse>
     */
    @WebMethod(operationName = "getChildrenOfClassLightRecursive")
    @RequestWrapper(localName = "getChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursiveResponse")
    public Response<GetChildrenOfClassLightRecursiveResponse> getChildrenOfClassLightRecursiveAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getChildrenOfClassLightRecursive")
    @RequestWrapper(localName = "getChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursiveResponse")
    public Future<?> getChildrenOfClassLightRecursiveAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetChildrenOfClassLightRecursiveResponse> asyncHandler);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightRecursiveResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLightRecursiveRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLightRecursiveResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLightRecursive/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getChildrenOfClassLightRecursive(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param classToFilter
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursiveResponse>
     */
    @WebMethod(operationName = "getSpecialChildrenOfClassLightRecursive")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursiveResponse")
    public Response<GetSpecialChildrenOfClassLightRecursiveResponse> getSpecialChildrenOfClassLightRecursiveAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param asyncHandler
     * @param classToFilter
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSpecialChildrenOfClassLightRecursive")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursiveResponse")
    public Future<?> getSpecialChildrenOfClassLightRecursiveAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSpecialChildrenOfClassLightRecursiveResponse> asyncHandler);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param parentClass
     * @param sessionId
     * @param classToFilter
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSpecialChildrenOfClassLightRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursive")
    @ResponseWrapper(localName = "getSpecialChildrenOfClassLightRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialChildrenOfClassLightRecursiveResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLightRecursiveRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLightRecursiveResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialChildrenOfClassLightRecursive/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSpecialChildrenOfClassLightRecursive(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "classToFilter", targetNamespace = "")
        String classToFilter,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetChildrenOfClassLightResponse>
     */
    @WebMethod(operationName = "getChildrenOfClassLight")
    @RequestWrapper(localName = "getChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLight")
    @ResponseWrapper(localName = "getChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightResponse")
    public Response<GetChildrenOfClassLightResponse> getChildrenOfClassLightAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getChildrenOfClassLight")
    @RequestWrapper(localName = "getChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLight")
    @ResponseWrapper(localName = "getChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightResponse")
    public Future<?> getChildrenOfClassLightAsync(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetChildrenOfClassLightResponse> asyncHandler);

    /**
     * 
     * @param parentOid
     * @param maxResults
     * @param childrenClass
     * @param parentClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getChildrenOfClassLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLight")
    @ResponseWrapper(localName = "getChildrenOfClassLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetChildrenOfClassLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getChildrenOfClassLight/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getChildrenOfClassLight(
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "childrenClass", targetNamespace = "")
        String childrenClass,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param oid
     * @param attributename
     * @param sessionId
     * @param objectclass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSpecialAttributeResponse>
     */
    @WebMethod(operationName = "getSpecialAttribute")
    @RequestWrapper(localName = "getSpecialAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttribute")
    @ResponseWrapper(localName = "getSpecialAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributeResponse")
    public Response<GetSpecialAttributeResponse> getSpecialAttributeAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributename", targetNamespace = "")
        String attributename,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param oid
     * @param attributename
     * @param sessionId
     * @param asyncHandler
     * @param objectclass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSpecialAttribute")
    @RequestWrapper(localName = "getSpecialAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttribute")
    @ResponseWrapper(localName = "getSpecialAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributeResponse")
    public Future<?> getSpecialAttributeAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributename", targetNamespace = "")
        String attributename,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSpecialAttributeResponse> asyncHandler);

    /**
     * 
     * @param oid
     * @param attributename
     * @param sessionId
     * @param objectclass
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSpecialAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttribute")
    @ResponseWrapper(localName = "getSpecialAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttributeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttributeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttribute/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSpecialAttribute(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributename", targetNamespace = "")
        String attributename,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSpecialAttributesResponse>
     */
    @WebMethod(operationName = "getSpecialAttributes")
    @RequestWrapper(localName = "getSpecialAttributes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributes")
    @ResponseWrapper(localName = "getSpecialAttributesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributesResponse")
    public Response<GetSpecialAttributesResponse> getSpecialAttributesAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSpecialAttributes")
    @RequestWrapper(localName = "getSpecialAttributes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributes")
    @ResponseWrapper(localName = "getSpecialAttributesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributesResponse")
    public Future<?> getSpecialAttributesAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSpecialAttributesResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectSpecialRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSpecialAttributes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributes")
    @ResponseWrapper(localName = "getSpecialAttributesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSpecialAttributesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttributesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttributesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSpecialAttributes/Fault/ServerSideException")
    })
    public RemoteObjectSpecialRelationships getSpecialAttributes(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param objectclass
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectSpecialChildrenResponse>
     */
    @WebMethod(operationName = "getObjectSpecialChildren")
    @RequestWrapper(localName = "getObjectSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildren")
    @ResponseWrapper(localName = "getObjectSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildrenResponse")
    public Response<GetObjectSpecialChildrenResponse> getObjectSpecialChildrenAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param objectclass
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectSpecialChildren")
    @RequestWrapper(localName = "getObjectSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildren")
    @ResponseWrapper(localName = "getObjectSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildrenResponse")
    public Future<?> getObjectSpecialChildrenAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectSpecialChildrenResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param objectclass
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildren")
    @ResponseWrapper(localName = "getObjectSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectSpecialChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectSpecialChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectSpecialChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectSpecialChildren/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectSpecialChildren(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contactClass
     * @param customerId
     * @param sessionId
     * @param customerClassName
     * @param properties
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateContactResponse>
     */
    @WebMethod(operationName = "createContact")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContactResponse")
    public Response<CreateContactResponse> createContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "customerClassName", targetNamespace = "")
        String customerClassName,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contactClass
     * @param customerId
     * @param sessionId
     * @param asyncHandler
     * @param customerClassName
     * @param properties
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createContact")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContactResponse")
    public Future<?> createContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "customerClassName", targetNamespace = "")
        String customerClassName,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateContactResponse> asyncHandler);

    /**
     * 
     * @param contactClass
     * @param customerId
     * @param sessionId
     * @param customerClassName
     * @param properties
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContactResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContactRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContactResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContact/Fault/ServerSideException")
    })
    public String createContact(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "customerClassName", targetNamespace = "")
        String customerClassName,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @param properties
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateContactResponse>
     */
    @WebMethod(operationName = "updateContact")
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContactResponse")
    public Response<UpdateContactResponse> updateContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @param asyncHandler
     * @param properties
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateContact")
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContactResponse")
    public Future<?> updateContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateContactResponse> asyncHandler);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @param properties
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContactResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContactRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContactResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContact/Fault/ServerSideException")
    })
    public void updateContact(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteContactResponse>
     */
    @WebMethod(operationName = "deleteContact")
    @RequestWrapper(localName = "deleteContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContact")
    @ResponseWrapper(localName = "deleteContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContactResponse")
    public Response<DeleteContactResponse> deleteContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteContact")
    @RequestWrapper(localName = "deleteContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContact")
    @ResponseWrapper(localName = "deleteContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContactResponse")
    public Future<?> deleteContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteContactResponse> asyncHandler);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContact")
    @ResponseWrapper(localName = "deleteContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContactResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContactRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContactResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContact/Fault/ServerSideException")
    })
    public void deleteContact(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContactResponse>
     */
    @WebMethod(operationName = "getContact")
    @RequestWrapper(localName = "getContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContact")
    @ResponseWrapper(localName = "getContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactResponse")
    public Response<GetContactResponse> getContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContact")
    @RequestWrapper(localName = "getContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContact")
    @ResponseWrapper(localName = "getContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactResponse")
    public Future<?> getContactAsync(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContactResponse> asyncHandler);

    /**
     * 
     * @param contactClass
     * @param contactId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteContact
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContact", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContact")
    @ResponseWrapper(localName = "getContactResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContact/Fault/ServerSideException")
    })
    public RemoteContact getContact(
        @WebParam(name = "contactClass", targetNamespace = "")
        String contactClass,
        @WebParam(name = "contactId", targetNamespace = "")
        String contactId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContactsForCustomerResponse>
     */
    @WebMethod(operationName = "getContactsForCustomer")
    @RequestWrapper(localName = "getContactsForCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomer")
    @ResponseWrapper(localName = "getContactsForCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomerResponse")
    public Response<GetContactsForCustomerResponse> getContactsForCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContactsForCustomer")
    @RequestWrapper(localName = "getContactsForCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomer")
    @ResponseWrapper(localName = "getContactsForCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomerResponse")
    public Future<?> getContactsForCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContactsForCustomerResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteContact>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContactsForCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomer")
    @ResponseWrapper(localName = "getContactsForCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsForCustomerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactsForCustomerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactsForCustomerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactsForCustomer/Fault/ServerSideException")
    })
    public List<RemoteContact> getContactsForCustomer(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param searchString
     * @param maxResults
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SearchForContactsResponse>
     */
    @WebMethod(operationName = "searchForContacts")
    @RequestWrapper(localName = "searchForContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContacts")
    @ResponseWrapper(localName = "searchForContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContactsResponse")
    public Response<SearchForContactsResponse> searchForContactsAsync(
        @WebParam(name = "searchString", targetNamespace = "")
        String searchString,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param searchString
     * @param maxResults
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "searchForContacts")
    @RequestWrapper(localName = "searchForContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContacts")
    @ResponseWrapper(localName = "searchForContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContactsResponse")
    public Future<?> searchForContactsAsync(
        @WebParam(name = "searchString", targetNamespace = "")
        String searchString,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SearchForContactsResponse> asyncHandler);

    /**
     * 
     * @param searchString
     * @param maxResults
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteContact>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchForContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContacts")
    @ResponseWrapper(localName = "searchForContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SearchForContactsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/searchForContactsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/searchForContactsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/searchForContacts/Fault/ServerSideException")
    })
    public List<RemoteContact> searchForContacts(
        @WebParam(name = "searchString", targetNamespace = "")
        String searchString,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param page
     * @param filters
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContactsResponse>
     */
    @WebMethod(operationName = "getContacts")
    @RequestWrapper(localName = "getContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContacts")
    @ResponseWrapper(localName = "getContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsResponse")
    public Response<GetContactsResponse> getContactsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param page
     * @param filters
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContacts")
    @RequestWrapper(localName = "getContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContacts")
    @ResponseWrapper(localName = "getContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsResponse")
    public Future<?> getContactsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContactsResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param page
     * @param filters
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteContact>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContacts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContacts")
    @ResponseWrapper(localName = "getContactsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContactsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContactsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContacts/Fault/ServerSideException")
    })
    public List<RemoteContact> getContacts(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param file
     * @param name
     * @param className
     * @param sessionId
     * @param objectId
     * @param tags
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AttachFileToObjectResponse>
     */
    @WebMethod(operationName = "attachFileToObject")
    @RequestWrapper(localName = "attachFileToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObject")
    @ResponseWrapper(localName = "attachFileToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObjectResponse")
    public Response<AttachFileToObjectResponse> attachFileToObjectAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "tags", targetNamespace = "")
        String tags,
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param file
     * @param name
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @param tags
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "attachFileToObject")
    @RequestWrapper(localName = "attachFileToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObject")
    @ResponseWrapper(localName = "attachFileToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObjectResponse")
    public Future<?> attachFileToObjectAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "tags", targetNamespace = "")
        String tags,
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AttachFileToObjectResponse> asyncHandler);

    /**
     * 
     * @param file
     * @param name
     * @param className
     * @param sessionId
     * @param objectId
     * @param tags
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "attachFileToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObject")
    @ResponseWrapper(localName = "attachFileToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AttachFileToObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/attachFileToObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/attachFileToObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/attachFileToObject/Fault/ServerSideException")
    })
    public long attachFileToObject(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "tags", targetNamespace = "")
        String tags,
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFilesForObjectResponse>
     */
    @WebMethod(operationName = "getFilesForObject")
    @RequestWrapper(localName = "getFilesForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObject")
    @ResponseWrapper(localName = "getFilesForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObjectResponse")
    public Response<GetFilesForObjectResponse> getFilesForObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFilesForObject")
    @RequestWrapper(localName = "getFilesForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObject")
    @ResponseWrapper(localName = "getFilesForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObjectResponse")
    public Future<?> getFilesForObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFilesForObjectResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteFileObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFilesForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObject")
    @ResponseWrapper(localName = "getFilesForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFilesForObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFilesForObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFilesForObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFilesForObject/Fault/ServerSideException")
    })
    public List<RemoteFileObjectLight> getFilesForObject(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DetachFileFromObjectResponse>
     */
    @WebMethod(operationName = "detachFileFromObject")
    @RequestWrapper(localName = "detachFileFromObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObject")
    @ResponseWrapper(localName = "detachFileFromObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObjectResponse")
    public Response<DetachFileFromObjectResponse> detachFileFromObjectAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "detachFileFromObject")
    @RequestWrapper(localName = "detachFileFromObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObject")
    @ResponseWrapper(localName = "detachFileFromObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObjectResponse")
    public Future<?> detachFileFromObjectAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DetachFileFromObjectResponse> asyncHandler);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "detachFileFromObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObject")
    @ResponseWrapper(localName = "detachFileFromObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DetachFileFromObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/detachFileFromObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/detachFileFromObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/detachFileFromObject/Fault/ServerSideException")
    })
    public void detachFileFromObject(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param properties
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateFilePropertiesResponse>
     */
    @WebMethod(operationName = "updateFileProperties")
    @RequestWrapper(localName = "updateFileProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFileProperties")
    @ResponseWrapper(localName = "updateFilePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFilePropertiesResponse")
    public Response<UpdateFilePropertiesResponse> updateFilePropertiesAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param properties
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateFileProperties")
    @RequestWrapper(localName = "updateFileProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFileProperties")
    @ResponseWrapper(localName = "updateFilePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFilePropertiesResponse")
    public Future<?> updateFilePropertiesAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateFilePropertiesResponse> asyncHandler);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param properties
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateFileProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFileProperties")
    @ResponseWrapper(localName = "updateFilePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFilePropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFilePropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFilePropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFileProperties/Fault/ServerSideException")
    })
    public void updateFileProperties(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param className
     * @param sessionId
     * @param script
     * @param enabled
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateClassLevelReportResponse>
     */
    @WebMethod(operationName = "createClassLevelReport")
    @RequestWrapper(localName = "createClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReport")
    @ResponseWrapper(localName = "createClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReportResponse")
    public Response<CreateClassLevelReportResponse> createClassLevelReportAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param script
     * @param enabled
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createClassLevelReport")
    @RequestWrapper(localName = "createClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReport")
    @ResponseWrapper(localName = "createClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReportResponse")
    public Future<?> createClassLevelReportAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateClassLevelReportResponse> asyncHandler);

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param className
     * @param sessionId
     * @param script
     * @param enabled
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReport")
    @ResponseWrapper(localName = "createClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateClassLevelReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClassLevelReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClassLevelReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createClassLevelReport/Fault/ServerSideException")
    })
    public long createClassLevelReport(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param sessionId
     * @param parameters
     * @param script
     * @param enabled
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateInventoryLevelReportResponse>
     */
    @WebMethod(operationName = "createInventoryLevelReport")
    @RequestWrapper(localName = "createInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReport")
    @ResponseWrapper(localName = "createInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReportResponse")
    public Response<CreateInventoryLevelReportResponse> createInventoryLevelReportAsync(
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @param script
     * @param enabled
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createInventoryLevelReport")
    @RequestWrapper(localName = "createInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReport")
    @ResponseWrapper(localName = "createInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReportResponse")
    public Future<?> createInventoryLevelReportAsync(
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateInventoryLevelReportResponse> asyncHandler);

    /**
     * 
     * @param reportName
     * @param reportDescription
     * @param outputType
     * @param sessionId
     * @param parameters
     * @param script
     * @param enabled
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReport")
    @ResponseWrapper(localName = "createInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateInventoryLevelReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createInventoryLevelReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createInventoryLevelReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createInventoryLevelReport/Fault/ServerSideException")
    })
    public long createInventoryLevelReport(
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "outputType", targetNamespace = "")
        int outputType,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteReportResponse>
     */
    @WebMethod(operationName = "deleteReport")
    @RequestWrapper(localName = "deleteReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReport")
    @ResponseWrapper(localName = "deleteReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReportResponse")
    public Response<DeleteReportResponse> deleteReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteReport")
    @RequestWrapper(localName = "deleteReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReport")
    @ResponseWrapper(localName = "deleteReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReportResponse")
    public Future<?> deleteReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteReportResponse> asyncHandler);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReport")
    @ResponseWrapper(localName = "deleteReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteReport/Fault/ServerSideException")
    })
    public void deleteReport(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportId
     * @param reportName
     * @param reportDescription
     * @param sessionId
     * @param type
     * @param enabled
     * @param script
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateReportResponse>
     */
    @WebMethod(operationName = "updateReport")
    @RequestWrapper(localName = "updateReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReport")
    @ResponseWrapper(localName = "updateReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportResponse")
    public Response<UpdateReportResponse> updateReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        Integer type,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportId
     * @param reportName
     * @param reportDescription
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param enabled
     * @param script
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateReport")
    @RequestWrapper(localName = "updateReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReport")
    @ResponseWrapper(localName = "updateReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportResponse")
    public Future<?> updateReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        Integer type,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateReportResponse> asyncHandler);

    /**
     * 
     * @param reportId
     * @param reportName
     * @param reportDescription
     * @param sessionId
     * @param type
     * @param enabled
     * @param script
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReport")
    @ResponseWrapper(localName = "updateReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReport/Fault/ServerSideException")
    })
    public void updateReport(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "reportName", targetNamespace = "")
        String reportName,
        @WebParam(name = "reportDescription", targetNamespace = "")
        String reportDescription,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        Integer type,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateReportParametersResponse>
     */
    @WebMethod(operationName = "updateReportParameters")
    @RequestWrapper(localName = "updateReportParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParameters")
    @ResponseWrapper(localName = "updateReportParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParametersResponse")
    public Response<UpdateReportParametersResponse> updateReportParametersAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateReportParameters")
    @RequestWrapper(localName = "updateReportParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParameters")
    @ResponseWrapper(localName = "updateReportParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParametersResponse")
    public Future<?> updateReportParametersAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateReportParametersResponse> asyncHandler);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param parameters
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateReportParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParameters")
    @ResponseWrapper(localName = "updateReportParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateReportParametersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReportParametersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReportParametersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateReportParameters/Fault/ServerSideException")
    })
    public void updateReportParameters(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param includeDisabled
     * @param sessionId
     * @param recursive
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetClassLevelReportsResponse>
     */
    @WebMethod(operationName = "getClassLevelReports")
    @RequestWrapper(localName = "getClassLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReports")
    @ResponseWrapper(localName = "getClassLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReportsResponse")
    public Response<GetClassLevelReportsResponse> getClassLevelReportsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param includeDisabled
     * @param sessionId
     * @param asyncHandler
     * @param recursive
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getClassLevelReports")
    @RequestWrapper(localName = "getClassLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReports")
    @ResponseWrapper(localName = "getClassLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReportsResponse")
    public Future<?> getClassLevelReportsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetClassLevelReportsResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param includeDisabled
     * @param sessionId
     * @param recursive
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteReportMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getClassLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReports")
    @ResponseWrapper(localName = "getClassLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassLevelReportsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassLevelReportsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassLevelReportsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassLevelReports/Fault/ServerSideException")
    })
    public List<RemoteReportMetadataLight> getClassLevelReports(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeDisabled
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetInventoryLevelReportsResponse>
     */
    @WebMethod(operationName = "getInventoryLevelReports")
    @RequestWrapper(localName = "getInventoryLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReports")
    @ResponseWrapper(localName = "getInventoryLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReportsResponse")
    public Response<GetInventoryLevelReportsResponse> getInventoryLevelReportsAsync(
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeDisabled
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getInventoryLevelReports")
    @RequestWrapper(localName = "getInventoryLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReports")
    @ResponseWrapper(localName = "getInventoryLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReportsResponse")
    public Future<?> getInventoryLevelReportsAsync(
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetInventoryLevelReportsResponse> asyncHandler);

    /**
     * 
     * @param includeDisabled
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteReportMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getInventoryLevelReports", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReports")
    @ResponseWrapper(localName = "getInventoryLevelReportsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInventoryLevelReportsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInventoryLevelReportsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInventoryLevelReportsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInventoryLevelReports/Fault/ServerSideException")
    })
    public List<RemoteReportMetadataLight> getInventoryLevelReports(
        @WebParam(name = "includeDisabled", targetNamespace = "")
        boolean includeDisabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetReportResponse>
     */
    @WebMethod(operationName = "getReport")
    @RequestWrapper(localName = "getReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReport")
    @ResponseWrapper(localName = "getReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReportResponse")
    public Response<GetReportResponse> getReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getReport")
    @RequestWrapper(localName = "getReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReport")
    @ResponseWrapper(localName = "getReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReportResponse")
    public Future<?> getReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetReportResponse> asyncHandler);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteReportMetadata
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReport")
    @ResponseWrapper(localName = "getReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getReport/Fault/ServerSideException")
    })
    public RemoteReportMetadata getReport(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassName
     * @param reportId
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ExecuteClassLevelReportResponse>
     */
    @WebMethod(operationName = "executeClassLevelReport")
    @RequestWrapper(localName = "executeClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReport")
    @ResponseWrapper(localName = "executeClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReportResponse")
    public Response<ExecuteClassLevelReportResponse> executeClassLevelReportAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassName
     * @param reportId
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "executeClassLevelReport")
    @RequestWrapper(localName = "executeClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReport")
    @ResponseWrapper(localName = "executeClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReportResponse")
    public Future<?> executeClassLevelReportAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExecuteClassLevelReportResponse> asyncHandler);

    /**
     * 
     * @param objectClassName
     * @param reportId
     * @param sessionId
     * @param objectId
     * @return
     *     returns byte[]
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeClassLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReport")
    @ResponseWrapper(localName = "executeClassLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteClassLevelReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeClassLevelReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeClassLevelReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeClassLevelReport/Fault/ServerSideException")
    })
    public byte[] executeClassLevelReport(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ExecuteInventoryLevelReportResponse>
     */
    @WebMethod(operationName = "executeInventoryLevelReport")
    @RequestWrapper(localName = "executeInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReport")
    @ResponseWrapper(localName = "executeInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReportResponse")
    public Response<ExecuteInventoryLevelReportResponse> executeInventoryLevelReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "executeInventoryLevelReport")
    @RequestWrapper(localName = "executeInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReport")
    @ResponseWrapper(localName = "executeInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReportResponse")
    public Future<?> executeInventoryLevelReportAsync(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExecuteInventoryLevelReportResponse> asyncHandler);

    /**
     * 
     * @param reportId
     * @param sessionId
     * @param parameters
     * @return
     *     returns byte[]
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeInventoryLevelReport", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReport")
    @ResponseWrapper(localName = "executeInventoryLevelReportResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteInventoryLevelReportResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeInventoryLevelReportRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeInventoryLevelReportResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeInventoryLevelReport/Fault/ServerSideException")
    })
    public byte[] executeInventoryLevelReport(
        @WebParam(name = "reportId", targetNamespace = "")
        long reportId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param type
     * @param includeSubclasses
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetRootPoolsResponse>
     */
    @WebMethod(operationName = "getRootPools")
    @RequestWrapper(localName = "getRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPools")
    @ResponseWrapper(localName = "getRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPoolsResponse")
    public Response<GetRootPoolsResponse> getRootPoolsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "includeSubclasses", targetNamespace = "")
        boolean includeSubclasses,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param includeSubclasses
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getRootPools")
    @RequestWrapper(localName = "getRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPools")
    @ResponseWrapper(localName = "getRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPoolsResponse")
    public Future<?> getRootPoolsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "includeSubclasses", targetNamespace = "")
        boolean includeSubclasses,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetRootPoolsResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param type
     * @param includeSubclasses
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPools")
    @ResponseWrapper(localName = "getRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetRootPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getRootPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getRootPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getRootPools/Fault/ServerSideException")
    })
    public List<RemotePool> getRootPools(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "includeSubclasses", targetNamespace = "")
        boolean includeSubclasses,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassName
     * @param poolClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPoolsInObjectResponse>
     */
    @WebMethod(operationName = "getPoolsInObject")
    @RequestWrapper(localName = "getPoolsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObject")
    @ResponseWrapper(localName = "getPoolsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObjectResponse")
    public Response<GetPoolsInObjectResponse> getPoolsInObjectAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassName
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPoolsInObject")
    @RequestWrapper(localName = "getPoolsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObject")
    @ResponseWrapper(localName = "getPoolsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObjectResponse")
    public Future<?> getPoolsInObjectAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPoolsInObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClassName
     * @param poolClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPoolsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObject")
    @ResponseWrapper(localName = "getPoolsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInObject/Fault/ServerSideException")
    })
    public List<RemotePool> getPoolsInObject(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolClass
     * @param sessionId
     * @param parentPoolId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPoolsInPoolResponse>
     */
    @WebMethod(operationName = "getPoolsInPool")
    @RequestWrapper(localName = "getPoolsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPool")
    @ResponseWrapper(localName = "getPoolsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPoolResponse")
    public Response<GetPoolsInPoolResponse> getPoolsInPoolAsync(
        @WebParam(name = "parentPoolId", targetNamespace = "")
        String parentPoolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @param parentPoolId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPoolsInPool")
    @RequestWrapper(localName = "getPoolsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPool")
    @ResponseWrapper(localName = "getPoolsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPoolResponse")
    public Future<?> getPoolsInPoolAsync(
        @WebParam(name = "parentPoolId", targetNamespace = "")
        String parentPoolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPoolsInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolClass
     * @param sessionId
     * @param parentPoolId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPoolsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPool")
    @ResponseWrapper(localName = "getPoolsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInPool/Fault/ServerSideException")
    })
    public List<RemotePool> getPoolsInPool(
        @WebParam(name = "parentPoolId", targetNamespace = "")
        String parentPoolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPoolItemsResponse>
     */
    @WebMethod(operationName = "getPoolItems")
    @RequestWrapper(localName = "getPoolItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItems")
    @ResponseWrapper(localName = "getPoolItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItemsResponse")
    public Response<GetPoolItemsResponse> getPoolItemsAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPoolItems")
    @RequestWrapper(localName = "getPoolItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItems")
    @ResponseWrapper(localName = "getPoolItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItemsResponse")
    public Future<?> getPoolItemsAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPoolItemsResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPoolItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItems")
    @ResponseWrapper(localName = "getPoolItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolItemsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolItemsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolItemsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolItems/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getPoolItems(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubClassesLightResponse>
     */
    @WebMethod(operationName = "getSubClassesLight")
    @RequestWrapper(localName = "getSubClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLight")
    @ResponseWrapper(localName = "getSubClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightResponse")
    public Response<GetSubClassesLightResponse> getSubClassesLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubClassesLight")
    @RequestWrapper(localName = "getSubClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLight")
    @ResponseWrapper(localName = "getSubClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightResponse")
    public Future<?> getSubClassesLightAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubClassesLightResponse> asyncHandler);

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubClassesLight", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLight")
    @ResponseWrapper(localName = "getSubClassesLightResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLightRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLightResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLight/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getSubClassesLight(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubClassesLightNoRecursiveResponse>
     */
    @WebMethod(operationName = "getSubClassesLightNoRecursive")
    @RequestWrapper(localName = "getSubClassesLightNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursive")
    @ResponseWrapper(localName = "getSubClassesLightNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursiveResponse")
    public Response<GetSubClassesLightNoRecursiveResponse> getSubClassesLightNoRecursiveAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubClassesLightNoRecursive")
    @RequestWrapper(localName = "getSubClassesLightNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursive")
    @ResponseWrapper(localName = "getSubClassesLightNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursiveResponse")
    public Future<?> getSubClassesLightNoRecursiveAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubClassesLightNoRecursiveResponse> asyncHandler);

    /**
     * 
     * @param includeSelf
     * @param includeAbstractClasses
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubClassesLightNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursive")
    @ResponseWrapper(localName = "getSubClassesLightNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubClassesLightNoRecursiveResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLightNoRecursiveRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLightNoRecursiveResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubClassesLightNoRecursive/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getSubClassesLightNoRecursive(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeAbstractClasses", targetNamespace = "")
        boolean includeAbstractClasses,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllClassesResponse>
     */
    @WebMethod(operationName = "getAllClasses")
    @RequestWrapper(localName = "getAllClasses", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClasses")
    @ResponseWrapper(localName = "getAllClassesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesResponse")
    public Response<GetAllClassesResponse> getAllClassesAsync(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllClasses")
    @RequestWrapper(localName = "getAllClasses", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClasses")
    @ResponseWrapper(localName = "getAllClassesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesResponse")
    public Future<?> getAllClassesAsync(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllClassesResponse> asyncHandler);

    /**
     * 
     * @param includeListTypes
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadata>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllClasses", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClasses")
    @ResponseWrapper(localName = "getAllClassesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllClassesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClassesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClassesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllClasses/Fault/ServerSideException")
    })
    public List<RemoteClassMetadata> getAllClasses(
        @WebParam(name = "includeListTypes", targetNamespace = "")
        boolean includeListTypes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param sessionId
     * @param type
     * @param mandatory
     * @param isReadOnly
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateAttributeResponse>
     */
    @WebMethod(operationName = "createAttribute")
    @RequestWrapper(localName = "createAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttribute")
    @ResponseWrapper(localName = "createAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeResponse")
    public Response<CreateAttributeResponse> createAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "isReadOnly", targetNamespace = "")
        boolean isReadOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param mandatory
     * @param isReadOnly
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createAttribute")
    @RequestWrapper(localName = "createAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttribute")
    @ResponseWrapper(localName = "createAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeResponse")
    public Future<?> createAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "isReadOnly", targetNamespace = "")
        boolean isReadOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateAttributeResponse> asyncHandler);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param sessionId
     * @param type
     * @param mandatory
     * @param isReadOnly
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttribute")
    @ResponseWrapper(localName = "createAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttributeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttributeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttribute/Fault/ServerSideException")
    })
    public void createAttribute(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "isReadOnly", targetNamespace = "")
        boolean isReadOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param attributeId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetAttributePropertiesResponse>
     */
    @WebMethod(operationName = "setAttributeProperties")
    @RequestWrapper(localName = "setAttributeProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributeProperties")
    @ResponseWrapper(localName = "setAttributePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesResponse")
    public Response<SetAttributePropertiesResponse> setAttributePropertiesAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param readOnly
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param mandatory
     * @param attributeId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setAttributeProperties")
    @RequestWrapper(localName = "setAttributeProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributeProperties")
    @ResponseWrapper(localName = "setAttributePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesResponse")
    public Future<?> setAttributePropertiesAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetAttributePropertiesResponse> asyncHandler);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param className
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param attributeId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setAttributeProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributeProperties")
    @ResponseWrapper(localName = "setAttributePropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributePropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributePropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributeProperties/Fault/ServerSideException")
    })
    public void setAttributeProperties(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteAttributeResponse>
     */
    @WebMethod(operationName = "deleteAttribute")
    @RequestWrapper(localName = "deleteAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttribute")
    @ResponseWrapper(localName = "deleteAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeResponse")
    public Response<DeleteAttributeResponse> deleteAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteAttribute")
    @RequestWrapper(localName = "deleteAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttribute")
    @ResponseWrapper(localName = "deleteAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeResponse")
    public Future<?> deleteAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteAttributeResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param attributeName
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttribute")
    @ResponseWrapper(localName = "deleteAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttributeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttributeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttribute/Fault/ServerSideException")
    })
    public void deleteAttribute(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPossibleChildrenResponse>
     */
    @WebMethod(operationName = "getPossibleChildren")
    @RequestWrapper(localName = "getPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildren")
    @ResponseWrapper(localName = "getPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenResponse")
    public Response<GetPossibleChildrenResponse> getPossibleChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPossibleChildren")
    @RequestWrapper(localName = "getPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildren")
    @ResponseWrapper(localName = "getPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenResponse")
    public Future<?> getPossibleChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPossibleChildrenResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildren")
    @ResponseWrapper(localName = "getPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildren/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getPossibleChildren(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPossibleSpecialChildrenResponse>
     */
    @WebMethod(operationName = "getPossibleSpecialChildren")
    @RequestWrapper(localName = "getPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildren")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenResponse")
    public Response<GetPossibleSpecialChildrenResponse> getPossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPossibleSpecialChildren")
    @RequestWrapper(localName = "getPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildren")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenResponse")
    public Future<?> getPossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPossibleSpecialChildrenResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildren")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildren/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getPossibleSpecialChildren(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPossibleChildrenNoRecursiveResponse>
     */
    @WebMethod(operationName = "getPossibleChildrenNoRecursive")
    @RequestWrapper(localName = "getPossibleChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursiveResponse")
    public Response<GetPossibleChildrenNoRecursiveResponse> getPossibleChildrenNoRecursiveAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPossibleChildrenNoRecursive")
    @RequestWrapper(localName = "getPossibleChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursiveResponse")
    public Future<?> getPossibleChildrenNoRecursiveAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPossibleChildrenNoRecursiveResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPossibleChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleChildrenNoRecursiveResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildrenNoRecursiveRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildrenNoRecursiveResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleChildrenNoRecursive/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getPossibleChildrenNoRecursive(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursiveResponse>
     */
    @WebMethod(operationName = "getPossibleSpecialChildrenNoRecursive")
    @RequestWrapper(localName = "getPossibleSpecialChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursiveResponse")
    public Response<GetPossibleSpecialChildrenNoRecursiveResponse> getPossibleSpecialChildrenNoRecursiveAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPossibleSpecialChildrenNoRecursive")
    @RequestWrapper(localName = "getPossibleSpecialChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursiveResponse")
    public Future<?> getPossibleSpecialChildrenNoRecursiveAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPossibleSpecialChildrenNoRecursiveResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPossibleSpecialChildrenNoRecursive", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursive")
    @ResponseWrapper(localName = "getPossibleSpecialChildrenNoRecursiveResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPossibleSpecialChildrenNoRecursiveResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildrenNoRecursiveRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildrenNoRecursiveResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPossibleSpecialChildrenNoRecursive/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getPossibleSpecialChildrenNoRecursive(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param childrenToBeAdded
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddPossibleChildrenResponse>
     */
    @WebMethod(operationName = "addPossibleChildren")
    @RequestWrapper(localName = "addPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildren")
    @ResponseWrapper(localName = "addPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenResponse")
    public Response<AddPossibleChildrenResponse> addPossibleChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<String> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param childrenToBeAdded
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addPossibleChildren")
    @RequestWrapper(localName = "addPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildren")
    @ResponseWrapper(localName = "addPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenResponse")
    public Future<?> addPossibleChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<String> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddPossibleChildrenResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param childrenToBeAdded
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addPossibleChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildren")
    @ResponseWrapper(localName = "addPossibleChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildren/Fault/ServerSideException")
    })
    public void addPossibleChildren(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<String> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param possibleSpecialChildren
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddPossibleSpecialChildrenResponse>
     */
    @WebMethod(operationName = "addPossibleSpecialChildren")
    @RequestWrapper(localName = "addPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildren")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenResponse")
    public Response<AddPossibleSpecialChildrenResponse> addPossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<String> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param possibleSpecialChildren
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addPossibleSpecialChildren")
    @RequestWrapper(localName = "addPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildren")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenResponse")
    public Future<?> addPossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<String> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddPossibleSpecialChildrenResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param possibleSpecialChildren
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addPossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildren")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildren/Fault/ServerSideException")
    })
    public void addPossibleSpecialChildren(
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<String> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassId
     * @param specialChildrenToBeRemoved
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemovePossibleSpecialChildrenResponse>
     */
    @WebMethod(operationName = "removePossibleSpecialChildren")
    @RequestWrapper(localName = "removePossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildren")
    @ResponseWrapper(localName = "removePossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildrenResponse")
    public Response<RemovePossibleSpecialChildrenResponse> removePossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "specialChildrenToBeRemoved", targetNamespace = "")
        List<Long> specialChildrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassId
     * @param specialChildrenToBeRemoved
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removePossibleSpecialChildren")
    @RequestWrapper(localName = "removePossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildren")
    @ResponseWrapper(localName = "removePossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildrenResponse")
    public Future<?> removePossibleSpecialChildrenAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "specialChildrenToBeRemoved", targetNamespace = "")
        List<Long> specialChildrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemovePossibleSpecialChildrenResponse> asyncHandler);

    /**
     * 
     * @param parentClassId
     * @param specialChildrenToBeRemoved
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removePossibleSpecialChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildren")
    @ResponseWrapper(localName = "removePossibleSpecialChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleSpecialChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleSpecialChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleSpecialChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleSpecialChildren/Fault/ServerSideException")
    })
    public void removePossibleSpecialChildren(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "specialChildrenToBeRemoved", targetNamespace = "")
        List<Long> specialChildrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param recursive
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetUpstreamContainmentHierarchyResponse>
     */
    @WebMethod(operationName = "getUpstreamContainmentHierarchy")
    @RequestWrapper(localName = "getUpstreamContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchyResponse")
    public Response<GetUpstreamContainmentHierarchyResponse> getUpstreamContainmentHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param recursive
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getUpstreamContainmentHierarchy")
    @RequestWrapper(localName = "getUpstreamContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchyResponse")
    public Future<?> getUpstreamContainmentHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUpstreamContainmentHierarchyResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param recursive
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUpstreamContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamContainmentHierarchyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamContainmentHierarchyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamContainmentHierarchyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamContainmentHierarchy/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getUpstreamContainmentHierarchy(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param recursive
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchyResponse>
     */
    @WebMethod(operationName = "getUpstreamSpecialContainmentHierarchy")
    @RequestWrapper(localName = "getUpstreamSpecialContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamSpecialContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchyResponse")
    public Response<GetUpstreamSpecialContainmentHierarchyResponse> getUpstreamSpecialContainmentHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param recursive
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getUpstreamSpecialContainmentHierarchy")
    @RequestWrapper(localName = "getUpstreamSpecialContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamSpecialContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchyResponse")
    public Future<?> getUpstreamSpecialContainmentHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUpstreamSpecialContainmentHierarchyResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param recursive
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUpstreamSpecialContainmentHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchy")
    @ResponseWrapper(localName = "getUpstreamSpecialContainmentHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamSpecialContainmentHierarchyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamSpecialContainmentHierarchyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamSpecialContainmentHierarchyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamSpecialContainmentHierarchy/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getUpstreamSpecialContainmentHierarchy(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeSelf
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetUpstreamClassHierarchyResponse>
     */
    @WebMethod(operationName = "getUpstreamClassHierarchy")
    @RequestWrapper(localName = "getUpstreamClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchy")
    @ResponseWrapper(localName = "getUpstreamClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchyResponse")
    public Response<GetUpstreamClassHierarchyResponse> getUpstreamClassHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeSelf
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getUpstreamClassHierarchy")
    @RequestWrapper(localName = "getUpstreamClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchy")
    @ResponseWrapper(localName = "getUpstreamClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchyResponse")
    public Future<?> getUpstreamClassHierarchyAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUpstreamClassHierarchyResponse> asyncHandler);

    /**
     * 
     * @param includeSelf
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUpstreamClassHierarchy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchy")
    @ResponseWrapper(localName = "getUpstreamClassHierarchyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUpstreamClassHierarchyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamClassHierarchyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamClassHierarchyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUpstreamClassHierarchy/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getUpstreamClassHierarchy(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "includeSelf", targetNamespace = "")
        boolean includeSelf,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetMandatoryAttributesInClassResponse>
     */
    @WebMethod(operationName = "getMandatoryAttributesInClass")
    @RequestWrapper(localName = "getMandatoryAttributesInClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClass")
    @ResponseWrapper(localName = "getMandatoryAttributesInClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClassResponse")
    public Response<GetMandatoryAttributesInClassResponse> getMandatoryAttributesInClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getMandatoryAttributesInClass")
    @RequestWrapper(localName = "getMandatoryAttributesInClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClass")
    @ResponseWrapper(localName = "getMandatoryAttributesInClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClassResponse")
    public Future<?> getMandatoryAttributesInClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetMandatoryAttributesInClassResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteAttributeMetadata>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMandatoryAttributesInClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClass")
    @ResponseWrapper(localName = "getMandatoryAttributesInClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMandatoryAttributesInClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMandatoryAttributesInClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMandatoryAttributesInClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMandatoryAttributesInClass/Fault/ServerSideException")
    })
    public List<RemoteAttributeMetadata> getMandatoryAttributesInClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param groupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetUsersInGroupResponse>
     */
    @WebMethod(operationName = "getUsersInGroup")
    @RequestWrapper(localName = "getUsersInGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroup")
    @ResponseWrapper(localName = "getUsersInGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroupResponse")
    public Response<GetUsersInGroupResponse> getUsersInGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getUsersInGroup")
    @RequestWrapper(localName = "getUsersInGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroup")
    @ResponseWrapper(localName = "getUsersInGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroupResponse")
    public Future<?> getUsersInGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUsersInGroupResponse> asyncHandler);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteUserInfo>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUsersInGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroup")
    @ResponseWrapper(localName = "getUsersInGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersInGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsersInGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsersInGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsersInGroup/Fault/ServerSideException")
    })
    public List<RemoteUserInfo> getUsersInGroup(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetGroupsForUserResponse>
     */
    @WebMethod(operationName = "getGroupsForUser")
    @RequestWrapper(localName = "getGroupsForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUser")
    @ResponseWrapper(localName = "getGroupsForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUserResponse")
    public Response<GetGroupsForUserResponse> getGroupsForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getGroupsForUser")
    @RequestWrapper(localName = "getGroupsForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUser")
    @ResponseWrapper(localName = "getGroupsForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUserResponse")
    public Future<?> getGroupsForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGroupsForUserResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.GroupInfoLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGroupsForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUser")
    @ResponseWrapper(localName = "getGroupsForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsForUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroupsForUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroupsForUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroupsForUser/Fault/ServerSideException")
    })
    public List<GroupInfoLight> getGroupsForUser(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CloseSessionResponse>
     */
    @WebMethod(operationName = "closeSession")
    @RequestWrapper(localName = "closeSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSession")
    @ResponseWrapper(localName = "closeSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSessionResponse")
    public Response<CloseSessionResponse> closeSessionAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "closeSession")
    @RequestWrapper(localName = "closeSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSession")
    @ResponseWrapper(localName = "closeSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSessionResponse")
    public Future<?> closeSessionAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CloseSessionResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "closeSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSession")
    @ResponseWrapper(localName = "closeSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CloseSessionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/closeSessionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/closeSessionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/closeSession/Fault/ServerSideException")
    })
    public void closeSession(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param schedule
     * @param name
     * @param commitOnExecute
     * @param description
     * @param notificationType
     * @param sessionId
     * @param parameters
     * @param enabled
     * @param script
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateTaskResponse>
     */
    @WebMethod(operationName = "createTask")
    @RequestWrapper(localName = "createTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTask")
    @ResponseWrapper(localName = "createTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTaskResponse")
    public Response<CreateTaskResponse> createTaskAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "commitOnExecute", targetNamespace = "")
        boolean commitOnExecute,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param schedule
     * @param name
     * @param commitOnExecute
     * @param description
     * @param notificationType
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @param enabled
     * @param script
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createTask")
    @RequestWrapper(localName = "createTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTask")
    @ResponseWrapper(localName = "createTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTaskResponse")
    public Future<?> createTaskAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "commitOnExecute", targetNamespace = "")
        boolean commitOnExecute,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateTaskResponse> asyncHandler);

    /**
     * 
     * @param schedule
     * @param name
     * @param commitOnExecute
     * @param description
     * @param notificationType
     * @param sessionId
     * @param parameters
     * @param enabled
     * @param script
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTask")
    @ResponseWrapper(localName = "createTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTask/Fault/ServerSideException")
    })
    public long createTask(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "commitOnExecute", targetNamespace = "")
        boolean commitOnExecute,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param propertyName
     * @param propertyValue
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateTaskPropertiesResponse>
     */
    @WebMethod(operationName = "updateTaskProperties")
    @RequestWrapper(localName = "updateTaskProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskProperties")
    @ResponseWrapper(localName = "updateTaskPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskPropertiesResponse")
    public Response<UpdateTaskPropertiesResponse> updateTaskPropertiesAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "propertyName", targetNamespace = "")
        String propertyName,
        @WebParam(name = "propertyValue", targetNamespace = "")
        String propertyValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param propertyName
     * @param propertyValue
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateTaskProperties")
    @RequestWrapper(localName = "updateTaskProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskProperties")
    @ResponseWrapper(localName = "updateTaskPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskPropertiesResponse")
    public Future<?> updateTaskPropertiesAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "propertyName", targetNamespace = "")
        String propertyName,
        @WebParam(name = "propertyValue", targetNamespace = "")
        String propertyValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateTaskPropertiesResponse> asyncHandler);

    /**
     * 
     * @param propertyName
     * @param propertyValue
     * @param sessionId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateTaskProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskProperties")
    @ResponseWrapper(localName = "updateTaskPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskPropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskPropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskPropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskProperties/Fault/ServerSideException")
    })
    public void updateTaskProperties(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "propertyName", targetNamespace = "")
        String propertyName,
        @WebParam(name = "propertyValue", targetNamespace = "")
        String propertyValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param parameters
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateTaskParametersResponse>
     */
    @WebMethod(operationName = "updateTaskParameters")
    @RequestWrapper(localName = "updateTaskParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParameters")
    @ResponseWrapper(localName = "updateTaskParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParametersResponse")
    public Response<UpdateTaskParametersResponse> updateTaskParametersAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateTaskParameters")
    @RequestWrapper(localName = "updateTaskParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParameters")
    @ResponseWrapper(localName = "updateTaskParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParametersResponse")
    public Future<?> updateTaskParametersAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateTaskParametersResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param parameters
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateTaskParameters", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParameters")
    @ResponseWrapper(localName = "updateTaskParametersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskParametersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskParametersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskParametersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskParameters/Fault/ServerSideException")
    })
    public void updateTaskParameters(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param schedule
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateTaskScheduleResponse>
     */
    @WebMethod(operationName = "updateTaskSchedule")
    @RequestWrapper(localName = "updateTaskSchedule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskSchedule")
    @ResponseWrapper(localName = "updateTaskScheduleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskScheduleResponse")
    public Response<UpdateTaskScheduleResponse> updateTaskScheduleAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param schedule
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateTaskSchedule")
    @RequestWrapper(localName = "updateTaskSchedule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskSchedule")
    @ResponseWrapper(localName = "updateTaskScheduleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskScheduleResponse")
    public Future<?> updateTaskScheduleAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateTaskScheduleResponse> asyncHandler);

    /**
     * 
     * @param schedule
     * @param sessionId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateTaskSchedule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskSchedule")
    @ResponseWrapper(localName = "updateTaskScheduleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskScheduleResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskScheduleRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskScheduleResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskSchedule/Fault/ServerSideException")
    })
    public void updateTaskSchedule(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "schedule", targetNamespace = "")
        RemoteTaskScheduleDescriptor schedule,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param notificationType
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateTaskNotificationTypeResponse>
     */
    @WebMethod(operationName = "updateTaskNotificationType")
    @RequestWrapper(localName = "updateTaskNotificationType", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationType")
    @ResponseWrapper(localName = "updateTaskNotificationTypeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationTypeResponse")
    public Response<UpdateTaskNotificationTypeResponse> updateTaskNotificationTypeAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param notificationType
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateTaskNotificationType")
    @RequestWrapper(localName = "updateTaskNotificationType", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationType")
    @ResponseWrapper(localName = "updateTaskNotificationTypeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationTypeResponse")
    public Future<?> updateTaskNotificationTypeAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateTaskNotificationTypeResponse> asyncHandler);

    /**
     * 
     * @param notificationType
     * @param sessionId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateTaskNotificationType", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationType")
    @ResponseWrapper(localName = "updateTaskNotificationTypeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTaskNotificationTypeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskNotificationTypeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskNotificationTypeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTaskNotificationType/Fault/ServerSideException")
    })
    public void updateTaskNotificationType(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "notificationType", targetNamespace = "")
        RemoteTaskNotificationDescriptor notificationType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteTaskResponse>
     */
    @WebMethod(operationName = "deleteTask")
    @RequestWrapper(localName = "deleteTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTask")
    @ResponseWrapper(localName = "deleteTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTaskResponse")
    public Response<DeleteTaskResponse> deleteTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteTask")
    @RequestWrapper(localName = "deleteTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTask")
    @ResponseWrapper(localName = "deleteTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTaskResponse")
    public Future<?> deleteTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTask")
    @ResponseWrapper(localName = "deleteTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTask/Fault/ServerSideException")
    })
    public void deleteTask(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param userId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SubscribeUserToTaskResponse>
     */
    @WebMethod(operationName = "subscribeUserToTask")
    @RequestWrapper(localName = "subscribeUserToTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTask")
    @ResponseWrapper(localName = "subscribeUserToTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTaskResponse")
    public Response<SubscribeUserToTaskResponse> subscribeUserToTaskAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "subscribeUserToTask")
    @RequestWrapper(localName = "subscribeUserToTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTask")
    @ResponseWrapper(localName = "subscribeUserToTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTaskResponse")
    public Future<?> subscribeUserToTaskAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SubscribeUserToTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param userId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "subscribeUserToTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTask")
    @ResponseWrapper(localName = "subscribeUserToTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SubscribeUserToTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/subscribeUserToTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/subscribeUserToTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/subscribeUserToTask/Fault/ServerSideException")
    })
    public void subscribeUserToTask(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param userId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UnsubscribeUserFromTaskResponse>
     */
    @WebMethod(operationName = "unsubscribeUserFromTask")
    @RequestWrapper(localName = "unsubscribeUserFromTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTask")
    @ResponseWrapper(localName = "unsubscribeUserFromTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTaskResponse")
    public Response<UnsubscribeUserFromTaskResponse> unsubscribeUserFromTaskAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "unsubscribeUserFromTask")
    @RequestWrapper(localName = "unsubscribeUserFromTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTask")
    @ResponseWrapper(localName = "unsubscribeUserFromTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTaskResponse")
    public Future<?> unsubscribeUserFromTaskAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UnsubscribeUserFromTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param userId
     * @param taskId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "unsubscribeUserFromTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTask")
    @ResponseWrapper(localName = "unsubscribeUserFromTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UnsubscribeUserFromTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/unsubscribeUserFromTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/unsubscribeUserFromTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/unsubscribeUserFromTask/Fault/ServerSideException")
    })
    public void unsubscribeUserFromTask(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTaskResponse>
     */
    @WebMethod(operationName = "getTask")
    @RequestWrapper(localName = "getTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTask")
    @ResponseWrapper(localName = "getTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTaskResponse")
    public Response<GetTaskResponse> getTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTask")
    @RequestWrapper(localName = "getTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTask")
    @ResponseWrapper(localName = "getTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTaskResponse")
    public Future<?> getTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteTask
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTask")
    @ResponseWrapper(localName = "getTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTask/Fault/ServerSideException")
    })
    public RemoteTask getTask(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubscribersForTaskResponse>
     */
    @WebMethod(operationName = "getSubscribersForTask")
    @RequestWrapper(localName = "getSubscribersForTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTask")
    @ResponseWrapper(localName = "getSubscribersForTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTaskResponse")
    public Response<GetSubscribersForTaskResponse> getSubscribersForTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubscribersForTask")
    @RequestWrapper(localName = "getSubscribersForTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTask")
    @ResponseWrapper(localName = "getSubscribersForTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTaskResponse")
    public Future<?> getSubscribersForTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubscribersForTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteUserInfoLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubscribersForTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTask")
    @ResponseWrapper(localName = "getSubscribersForTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubscribersForTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubscribersForTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubscribersForTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubscribersForTask/Fault/ServerSideException")
    })
    public List<RemoteUserInfoLight> getSubscribersForTask(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTasksResponse>
     */
    @WebMethod(operationName = "getTasks")
    @RequestWrapper(localName = "getTasks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasks")
    @ResponseWrapper(localName = "getTasksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksResponse")
    public Response<GetTasksResponse> getTasksAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTasks")
    @RequestWrapper(localName = "getTasks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasks")
    @ResponseWrapper(localName = "getTasksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksResponse")
    public Future<?> getTasksAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTasksResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteTask>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTasks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasks")
    @ResponseWrapper(localName = "getTasksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasksRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasksResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasks/Fault/ServerSideException")
    })
    public List<RemoteTask> getTasks(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTasksForUserResponse>
     */
    @WebMethod(operationName = "getTasksForUser")
    @RequestWrapper(localName = "getTasksForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUser")
    @ResponseWrapper(localName = "getTasksForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUserResponse")
    public Response<GetTasksForUserResponse> getTasksForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTasksForUser")
    @RequestWrapper(localName = "getTasksForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUser")
    @ResponseWrapper(localName = "getTasksForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUserResponse")
    public Future<?> getTasksForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTasksForUserResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteTask>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTasksForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUser")
    @ResponseWrapper(localName = "getTasksForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTasksForUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasksForUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasksForUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTasksForUser/Fault/ServerSideException")
    })
    public List<RemoteTask> getTasksForUser(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ExecuteTaskResponse>
     */
    @WebMethod(operationName = "executeTask")
    @RequestWrapper(localName = "executeTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTask")
    @ResponseWrapper(localName = "executeTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTaskResponse")
    public Response<ExecuteTaskResponse> executeTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param taskId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "executeTask")
    @RequestWrapper(localName = "executeTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTask")
    @ResponseWrapper(localName = "executeTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTaskResponse")
    public Future<?> executeTaskAsync(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExecuteTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param taskId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteTaskResult
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTask")
    @ResponseWrapper(localName = "executeTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeTask/Fault/ServerSideException")
    })
    public RemoteTaskResult executeTask(
        @WebParam(name = "taskId", targetNamespace = "")
        long taskId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateName
     * @param templateClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateTemplateResponse>
     */
    @WebMethod(operationName = "createTemplate")
    @RequestWrapper(localName = "createTemplate", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplate")
    @ResponseWrapper(localName = "createTemplateResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateResponse")
    public Response<CreateTemplateResponse> createTemplateAsync(
        @WebParam(name = "templateClass", targetNamespace = "")
        String templateClass,
        @WebParam(name = "templateName", targetNamespace = "")
        String templateName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateName
     * @param templateClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createTemplate")
    @RequestWrapper(localName = "createTemplate", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplate")
    @ResponseWrapper(localName = "createTemplateResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateResponse")
    public Future<?> createTemplateAsync(
        @WebParam(name = "templateClass", targetNamespace = "")
        String templateClass,
        @WebParam(name = "templateName", targetNamespace = "")
        String templateName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateTemplateResponse> asyncHandler);

    /**
     * 
     * @param templateName
     * @param templateClass
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createTemplate", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplate")
    @ResponseWrapper(localName = "createTemplateResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplate/Fault/ServerSideException")
    })
    public String createTemplate(
        @WebParam(name = "templateClass", targetNamespace = "")
        String templateClass,
        @WebParam(name = "templateName", targetNamespace = "")
        String templateName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateElementParentId
     * @param templateElementName
     * @param templateElementClass
     * @param sessionId
     * @param templateElementParentClassName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateTemplateElementResponse>
     */
    @WebMethod(operationName = "createTemplateElement")
    @RequestWrapper(localName = "createTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElement")
    @ResponseWrapper(localName = "createTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElementResponse")
    public Response<CreateTemplateElementResponse> createTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementName", targetNamespace = "")
        String templateElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateElementParentId
     * @param templateElementName
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @param templateElementParentClassName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createTemplateElement")
    @RequestWrapper(localName = "createTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElement")
    @ResponseWrapper(localName = "createTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElementResponse")
    public Future<?> createTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementName", targetNamespace = "")
        String templateElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param templateElementParentId
     * @param templateElementName
     * @param templateElementClass
     * @param sessionId
     * @param templateElementParentClassName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElement")
    @ResponseWrapper(localName = "createTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateElement/Fault/ServerSideException")
    })
    public String createTemplateElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementName", targetNamespace = "")
        String templateElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param tsElementParentClassName
     * @param tsElementName
     * @param tsElementParentId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateTemplateSpecialElementResponse>
     */
    @WebMethod(operationName = "createTemplateSpecialElement")
    @RequestWrapper(localName = "createTemplateSpecialElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElement")
    @ResponseWrapper(localName = "createTemplateSpecialElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElementResponse")
    public Response<CreateTemplateSpecialElementResponse> createTemplateSpecialElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "tsElementParentClassName", targetNamespace = "")
        String tsElementParentClassName,
        @WebParam(name = "tsElementParentId", targetNamespace = "")
        String tsElementParentId,
        @WebParam(name = "tsElementName", targetNamespace = "")
        String tsElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param tsElementParentClassName
     * @param tsElementName
     * @param tsElementParentId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createTemplateSpecialElement")
    @RequestWrapper(localName = "createTemplateSpecialElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElement")
    @ResponseWrapper(localName = "createTemplateSpecialElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElementResponse")
    public Future<?> createTemplateSpecialElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "tsElementParentClassName", targetNamespace = "")
        String tsElementParentClassName,
        @WebParam(name = "tsElementParentId", targetNamespace = "")
        String tsElementParentId,
        @WebParam(name = "tsElementName", targetNamespace = "")
        String tsElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateTemplateSpecialElementResponse> asyncHandler);

    /**
     * 
     * @param tsElementParentClassName
     * @param tsElementName
     * @param tsElementParentId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createTemplateSpecialElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElement")
    @ResponseWrapper(localName = "createTemplateSpecialElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateTemplateSpecialElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateSpecialElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateSpecialElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createTemplateSpecialElement/Fault/ServerSideException")
    })
    public String createTemplateSpecialElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "tsElementParentClassName", targetNamespace = "")
        String tsElementParentClassName,
        @WebParam(name = "tsElementParentId", targetNamespace = "")
        String tsElementParentId,
        @WebParam(name = "tsElementName", targetNamespace = "")
        String tsElementName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateElementNamePattern
     * @param templateElementParentId
     * @param templateElementClass
     * @param sessionId
     * @param templateElementParentClassName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateBulkTemplateElementResponse>
     */
    @WebMethod(operationName = "createBulkTemplateElement")
    @RequestWrapper(localName = "createBulkTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElement")
    @ResponseWrapper(localName = "createBulkTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElementResponse")
    public Response<CreateBulkTemplateElementResponse> createBulkTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementNamePattern", targetNamespace = "")
        String templateElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateElementNamePattern
     * @param templateElementParentId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @param templateElementParentClassName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createBulkTemplateElement")
    @RequestWrapper(localName = "createBulkTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElement")
    @ResponseWrapper(localName = "createBulkTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElementResponse")
    public Future<?> createBulkTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementNamePattern", targetNamespace = "")
        String templateElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateBulkTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param templateElementNamePattern
     * @param templateElementParentId
     * @param templateElementClass
     * @param sessionId
     * @param templateElementParentClassName
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBulkTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElement")
    @ResponseWrapper(localName = "createBulkTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkTemplateElement/Fault/ServerSideException")
    })
    public List<String> createBulkTemplateElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementParentClassName", targetNamespace = "")
        String templateElementParentClassName,
        @WebParam(name = "templateElementParentId", targetNamespace = "")
        String templateElementParentId,
        @WebParam(name = "templateElementNamePattern", targetNamespace = "")
        String templateElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param stElementParentId
     * @param stElementParentClassName
     * @param sessionId
     * @param stElementNamePattern
     * @param stElementClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateBulkSpecialTemplateElementResponse>
     */
    @WebMethod(operationName = "createBulkSpecialTemplateElement")
    @RequestWrapper(localName = "createBulkSpecialTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElement")
    @ResponseWrapper(localName = "createBulkSpecialTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElementResponse")
    public Response<CreateBulkSpecialTemplateElementResponse> createBulkSpecialTemplateElementAsync(
        @WebParam(name = "stElementClass", targetNamespace = "")
        String stElementClass,
        @WebParam(name = "stElementParentClassName", targetNamespace = "")
        String stElementParentClassName,
        @WebParam(name = "stElementParentId", targetNamespace = "")
        String stElementParentId,
        @WebParam(name = "stElementNamePattern", targetNamespace = "")
        String stElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param stElementParentId
     * @param stElementParentClassName
     * @param sessionId
     * @param stElementNamePattern
     * @param asyncHandler
     * @param stElementClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createBulkSpecialTemplateElement")
    @RequestWrapper(localName = "createBulkSpecialTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElement")
    @ResponseWrapper(localName = "createBulkSpecialTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElementResponse")
    public Future<?> createBulkSpecialTemplateElementAsync(
        @WebParam(name = "stElementClass", targetNamespace = "")
        String stElementClass,
        @WebParam(name = "stElementParentClassName", targetNamespace = "")
        String stElementParentClassName,
        @WebParam(name = "stElementParentId", targetNamespace = "")
        String stElementParentId,
        @WebParam(name = "stElementNamePattern", targetNamespace = "")
        String stElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateBulkSpecialTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param stElementParentId
     * @param stElementParentClassName
     * @param sessionId
     * @param stElementNamePattern
     * @param stElementClass
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBulkSpecialTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElement")
    @ResponseWrapper(localName = "createBulkSpecialTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBulkSpecialTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBulkSpecialTemplateElement/Fault/ServerSideException")
    })
    public List<String> createBulkSpecialTemplateElement(
        @WebParam(name = "stElementClass", targetNamespace = "")
        String stElementClass,
        @WebParam(name = "stElementParentClassName", targetNamespace = "")
        String stElementParentClassName,
        @WebParam(name = "stElementParentId", targetNamespace = "")
        String stElementParentId,
        @WebParam(name = "stElementNamePattern", targetNamespace = "")
        String stElementNamePattern,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateTemplateElementResponse>
     */
    @WebMethod(operationName = "updateTemplateElement")
    @RequestWrapper(localName = "updateTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElement")
    @ResponseWrapper(localName = "updateTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElementResponse")
    public Response<UpdateTemplateElementResponse> updateTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateTemplateElement")
    @RequestWrapper(localName = "updateTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElement")
    @ResponseWrapper(localName = "updateTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElementResponse")
    public Future<?> updateTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElement")
    @ResponseWrapper(localName = "updateTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateTemplateElement/Fault/ServerSideException")
    })
    public void updateTemplateElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteTemplateElementResponse>
     */
    @WebMethod(operationName = "deleteTemplateElement")
    @RequestWrapper(localName = "deleteTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElement")
    @ResponseWrapper(localName = "deleteTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElementResponse")
    public Response<DeleteTemplateElementResponse> deleteTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteTemplateElement")
    @RequestWrapper(localName = "deleteTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElement")
    @ResponseWrapper(localName = "deleteTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElementResponse")
    public Future<?> deleteTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElement")
    @ResponseWrapper(localName = "deleteTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteTemplateElement/Fault/ServerSideException")
    })
    public void deleteTemplateElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTemplatesForClassResponse>
     */
    @WebMethod(operationName = "getTemplatesForClass")
    @RequestWrapper(localName = "getTemplatesForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClass")
    @ResponseWrapper(localName = "getTemplatesForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClassResponse")
    public Response<GetTemplatesForClassResponse> getTemplatesForClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTemplatesForClass")
    @RequestWrapper(localName = "getTemplatesForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClass")
    @ResponseWrapper(localName = "getTemplatesForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClassResponse")
    public Future<?> getTemplatesForClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTemplatesForClassResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTemplatesForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClass")
    @ResponseWrapper(localName = "getTemplatesForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplatesForClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplatesForClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplatesForClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplatesForClass/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getTemplatesForClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTemplateElementChildrenResponse>
     */
    @WebMethod(operationName = "getTemplateElementChildren")
    @RequestWrapper(localName = "getTemplateElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildren")
    @ResponseWrapper(localName = "getTemplateElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildrenResponse")
    public Response<GetTemplateElementChildrenResponse> getTemplateElementChildrenAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTemplateElementChildren")
    @RequestWrapper(localName = "getTemplateElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildren")
    @ResponseWrapper(localName = "getTemplateElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildrenResponse")
    public Future<?> getTemplateElementChildrenAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTemplateElementChildrenResponse> asyncHandler);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTemplateElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildren")
    @ResponseWrapper(localName = "getTemplateElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElementChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElementChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElementChildren/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getTemplateElementChildren(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param tsElementId
     * @param tsElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTemplateSpecialElementChildrenResponse>
     */
    @WebMethod(operationName = "getTemplateSpecialElementChildren")
    @RequestWrapper(localName = "getTemplateSpecialElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildren")
    @ResponseWrapper(localName = "getTemplateSpecialElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildrenResponse")
    public Response<GetTemplateSpecialElementChildrenResponse> getTemplateSpecialElementChildrenAsync(
        @WebParam(name = "tsElementClass", targetNamespace = "")
        String tsElementClass,
        @WebParam(name = "tsElementId", targetNamespace = "")
        String tsElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param tsElementId
     * @param tsElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTemplateSpecialElementChildren")
    @RequestWrapper(localName = "getTemplateSpecialElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildren")
    @ResponseWrapper(localName = "getTemplateSpecialElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildrenResponse")
    public Future<?> getTemplateSpecialElementChildrenAsync(
        @WebParam(name = "tsElementClass", targetNamespace = "")
        String tsElementClass,
        @WebParam(name = "tsElementId", targetNamespace = "")
        String tsElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTemplateSpecialElementChildrenResponse> asyncHandler);

    /**
     * 
     * @param tsElementId
     * @param tsElementClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTemplateSpecialElementChildren", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildren")
    @ResponseWrapper(localName = "getTemplateSpecialElementChildrenResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateSpecialElementChildrenResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateSpecialElementChildrenRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateSpecialElementChildrenResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateSpecialElementChildren/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getTemplateSpecialElementChildren(
        @WebParam(name = "tsElementClass", targetNamespace = "")
        String tsElementClass,
        @WebParam(name = "tsElementId", targetNamespace = "")
        String tsElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetTemplateElementResponse>
     */
    @WebMethod(operationName = "getTemplateElement")
    @RequestWrapper(localName = "getTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElement")
    @ResponseWrapper(localName = "getTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementResponse")
    public Response<GetTemplateElementResponse> getTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTemplateElement")
    @RequestWrapper(localName = "getTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElement")
    @ResponseWrapper(localName = "getTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementResponse")
    public Future<?> getTemplateElementAsync(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTemplateElementResponse> asyncHandler);

    /**
     * 
     * @param templateElementId
     * @param templateElementClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTemplateElement", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElement")
    @ResponseWrapper(localName = "getTemplateElementResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetTemplateElementResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElementRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElementResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getTemplateElement/Fault/ServerSideException")
    })
    public RemoteObject getTemplateElement(
        @WebParam(name = "templateElementClass", targetNamespace = "")
        String templateElementClass,
        @WebParam(name = "templateElementId", targetNamespace = "")
        String templateElementId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopyTemplateElementsResponse>
     */
    @WebMethod(operationName = "copyTemplateElements")
    @RequestWrapper(localName = "copyTemplateElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElements")
    @ResponseWrapper(localName = "copyTemplateElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElementsResponse")
    public Response<CopyTemplateElementsResponse> copyTemplateElementsAsync(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copyTemplateElements")
    @RequestWrapper(localName = "copyTemplateElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElements")
    @ResponseWrapper(localName = "copyTemplateElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElementsResponse")
    public Future<?> copyTemplateElementsAsync(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopyTemplateElementsResponse> asyncHandler);

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "copyTemplateElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElements")
    @ResponseWrapper(localName = "copyTemplateElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateElementsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateElementsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateElementsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateElements/Fault/ServerSideException")
    })
    public List<String> copyTemplateElements(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderName
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateFavoritesFolderForUserResponse>
     */
    @WebMethod(operationName = "createFavoritesFolderForUser")
    @RequestWrapper(localName = "createFavoritesFolderForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUser")
    @ResponseWrapper(localName = "createFavoritesFolderForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUserResponse")
    public Response<CreateFavoritesFolderForUserResponse> createFavoritesFolderForUserAsync(
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderName
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createFavoritesFolderForUser")
    @RequestWrapper(localName = "createFavoritesFolderForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUser")
    @ResponseWrapper(localName = "createFavoritesFolderForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUserResponse")
    public Future<?> createFavoritesFolderForUserAsync(
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateFavoritesFolderForUserResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderName
     * @param sessionId
     * @param userId
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createFavoritesFolderForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUser")
    @ResponseWrapper(localName = "createFavoritesFolderForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateFavoritesFolderForUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createFavoritesFolderForUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createFavoritesFolderForUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createFavoritesFolderForUser/Fault/ServerSideException")
    })
    public long createFavoritesFolderForUser(
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteFavoritesFoldersResponse>
     */
    @WebMethod(operationName = "deleteFavoritesFolders")
    @RequestWrapper(localName = "deleteFavoritesFolders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFolders")
    @ResponseWrapper(localName = "deleteFavoritesFoldersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFoldersResponse")
    public Response<DeleteFavoritesFoldersResponse> deleteFavoritesFoldersAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        List<Long> favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteFavoritesFolders")
    @RequestWrapper(localName = "deleteFavoritesFolders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFolders")
    @ResponseWrapper(localName = "deleteFavoritesFoldersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFoldersResponse")
    public Future<?> deleteFavoritesFoldersAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        List<Long> favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteFavoritesFoldersResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteFavoritesFolders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFolders")
    @ResponseWrapper(localName = "deleteFavoritesFoldersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteFavoritesFoldersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteFavoritesFoldersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteFavoritesFoldersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteFavoritesFolders/Fault/ServerSideException")
    })
    public void deleteFavoritesFolders(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        List<Long> favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFavoritesFoldersForUserResponse>
     */
    @WebMethod(operationName = "getFavoritesFoldersForUser")
    @RequestWrapper(localName = "getFavoritesFoldersForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUser")
    @ResponseWrapper(localName = "getFavoritesFoldersForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUserResponse")
    public Response<GetFavoritesFoldersForUserResponse> getFavoritesFoldersForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFavoritesFoldersForUser")
    @RequestWrapper(localName = "getFavoritesFoldersForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUser")
    @ResponseWrapper(localName = "getFavoritesFoldersForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUserResponse")
    public Future<?> getFavoritesFoldersForUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFavoritesFoldersForUserResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param userId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteFavoritesFolder>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFavoritesFoldersForUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUser")
    @ResponseWrapper(localName = "getFavoritesFoldersForUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForUser/Fault/ServerSideException")
    })
    public List<RemoteFavoritesFolder> getFavoritesFoldersForUser(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param limit
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsInFavoritesFolderResponse>
     */
    @WebMethod(operationName = "getObjectsInFavoritesFolder")
    @RequestWrapper(localName = "getObjectsInFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolder")
    @ResponseWrapper(localName = "getObjectsInFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolderResponse")
    public Response<GetObjectsInFavoritesFolderResponse> getObjectsInFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsInFavoritesFolder")
    @RequestWrapper(localName = "getObjectsInFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolder")
    @ResponseWrapper(localName = "getObjectsInFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolderResponse")
    public Future<?> getObjectsInFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsInFavoritesFolderResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param limit
     * @param sessionId
     * @param userId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsInFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolder")
    @ResponseWrapper(localName = "getObjectsInFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInFavoritesFolderResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInFavoritesFolderRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInFavoritesFolderResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInFavoritesFolder/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectsInFavoritesFolder(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFavoritesFoldersForObjectResponse>
     */
    @WebMethod(operationName = "getFavoritesFoldersForObject")
    @RequestWrapper(localName = "getFavoritesFoldersForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObject")
    @ResponseWrapper(localName = "getFavoritesFoldersForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObjectResponse")
    public Response<GetFavoritesFoldersForObjectResponse> getFavoritesFoldersForObjectAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFavoritesFoldersForObject")
    @RequestWrapper(localName = "getFavoritesFoldersForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObject")
    @ResponseWrapper(localName = "getFavoritesFoldersForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObjectResponse")
    public Future<?> getFavoritesFoldersForObjectAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFavoritesFoldersForObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteFavoritesFolder>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFavoritesFoldersForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObject")
    @ResponseWrapper(localName = "getFavoritesFoldersForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFoldersForObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFoldersForObject/Fault/ServerSideException")
    })
    public List<RemoteFavoritesFolder> getFavoritesFoldersForObject(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFavoritesFolderResponse>
     */
    @WebMethod(operationName = "getFavoritesFolder")
    @RequestWrapper(localName = "getFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolder")
    @ResponseWrapper(localName = "getFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolderResponse")
    public Response<GetFavoritesFolderResponse> getFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFavoritesFolder")
    @RequestWrapper(localName = "getFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolder")
    @ResponseWrapper(localName = "getFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolderResponse")
    public Future<?> getFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFavoritesFolderResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param sessionId
     * @param userId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteFavoritesFolder
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolder")
    @ResponseWrapper(localName = "getFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFavoritesFolderResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFolderRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFolderResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFavoritesFolder/Fault/ServerSideException")
    })
    public RemoteFavoritesFolder getFavoritesFolder(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param favoritesFolderName
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateFavoritesFolderResponse>
     */
    @WebMethod(operationName = "updateFavoritesFolder")
    @RequestWrapper(localName = "updateFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolder")
    @ResponseWrapper(localName = "updateFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolderResponse")
    public Response<UpdateFavoritesFolderResponse> updateFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param favoritesFolderName
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateFavoritesFolder")
    @RequestWrapper(localName = "updateFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolder")
    @ResponseWrapper(localName = "updateFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolderResponse")
    public Future<?> updateFavoritesFolderAsync(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateFavoritesFolderResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param favoritesFolderName
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolder")
    @ResponseWrapper(localName = "updateFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateFavoritesFolderResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFavoritesFolderRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFavoritesFolderResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateFavoritesFolder/Fault/ServerSideException")
    })
    public void updateFavoritesFolder(
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "favoritesFolderName", targetNamespace = "")
        String favoritesFolderName,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param ruleScope
     * @param ruleType
     * @param ruleVersion
     * @param ruleName
     * @param appliesTo
     * @param sessionId
     * @param constraints
     * @param ruleDescription
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateBusinessRuleResponse>
     */
    @WebMethod(operationName = "createBusinessRule")
    @RequestWrapper(localName = "createBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRule")
    @ResponseWrapper(localName = "createBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRuleResponse")
    public Response<CreateBusinessRuleResponse> createBusinessRuleAsync(
        @WebParam(name = "ruleName", targetNamespace = "")
        String ruleName,
        @WebParam(name = "ruleDescription", targetNamespace = "")
        String ruleDescription,
        @WebParam(name = "ruleType", targetNamespace = "")
        int ruleType,
        @WebParam(name = "ruleScope", targetNamespace = "")
        int ruleScope,
        @WebParam(name = "appliesTo", targetNamespace = "")
        String appliesTo,
        @WebParam(name = "ruleVersion", targetNamespace = "")
        String ruleVersion,
        @WebParam(name = "constraints", targetNamespace = "")
        List<String> constraints,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param ruleScope
     * @param ruleType
     * @param ruleVersion
     * @param ruleName
     * @param appliesTo
     * @param sessionId
     * @param asyncHandler
     * @param constraints
     * @param ruleDescription
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createBusinessRule")
    @RequestWrapper(localName = "createBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRule")
    @ResponseWrapper(localName = "createBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRuleResponse")
    public Future<?> createBusinessRuleAsync(
        @WebParam(name = "ruleName", targetNamespace = "")
        String ruleName,
        @WebParam(name = "ruleDescription", targetNamespace = "")
        String ruleDescription,
        @WebParam(name = "ruleType", targetNamespace = "")
        int ruleType,
        @WebParam(name = "ruleScope", targetNamespace = "")
        int ruleScope,
        @WebParam(name = "appliesTo", targetNamespace = "")
        String appliesTo,
        @WebParam(name = "ruleVersion", targetNamespace = "")
        String ruleVersion,
        @WebParam(name = "constraints", targetNamespace = "")
        List<String> constraints,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateBusinessRuleResponse> asyncHandler);

    /**
     * 
     * @param ruleScope
     * @param ruleType
     * @param ruleVersion
     * @param ruleName
     * @param appliesTo
     * @param sessionId
     * @param constraints
     * @param ruleDescription
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRule")
    @ResponseWrapper(localName = "createBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateBusinessRuleResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBusinessRuleRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBusinessRuleResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createBusinessRule/Fault/ServerSideException")
    })
    public long createBusinessRule(
        @WebParam(name = "ruleName", targetNamespace = "")
        String ruleName,
        @WebParam(name = "ruleDescription", targetNamespace = "")
        String ruleDescription,
        @WebParam(name = "ruleType", targetNamespace = "")
        int ruleType,
        @WebParam(name = "ruleScope", targetNamespace = "")
        int ruleScope,
        @WebParam(name = "appliesTo", targetNamespace = "")
        String appliesTo,
        @WebParam(name = "ruleVersion", targetNamespace = "")
        String ruleVersion,
        @WebParam(name = "constraints", targetNamespace = "")
        List<String> constraints,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param businessRuleId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteBusinessRuleResponse>
     */
    @WebMethod(operationName = "deleteBusinessRule")
    @RequestWrapper(localName = "deleteBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRule")
    @ResponseWrapper(localName = "deleteBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRuleResponse")
    public Response<DeleteBusinessRuleResponse> deleteBusinessRuleAsync(
        @WebParam(name = "businessRuleId", targetNamespace = "")
        long businessRuleId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param businessRuleId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteBusinessRule")
    @RequestWrapper(localName = "deleteBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRule")
    @ResponseWrapper(localName = "deleteBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRuleResponse")
    public Future<?> deleteBusinessRuleAsync(
        @WebParam(name = "businessRuleId", targetNamespace = "")
        long businessRuleId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteBusinessRuleResponse> asyncHandler);

    /**
     * 
     * @param businessRuleId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteBusinessRule", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRule")
    @ResponseWrapper(localName = "deleteBusinessRuleResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteBusinessRuleResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteBusinessRuleRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteBusinessRuleResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteBusinessRule/Fault/ServerSideException")
    })
    public void deleteBusinessRule(
        @WebParam(name = "businessRuleId", targetNamespace = "")
        long businessRuleId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetBusinessRulesResponse>
     */
    @WebMethod(operationName = "getBusinessRules")
    @RequestWrapper(localName = "getBusinessRules", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRules")
    @ResponseWrapper(localName = "getBusinessRulesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRulesResponse")
    public Response<GetBusinessRulesResponse> getBusinessRulesAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getBusinessRules")
    @RequestWrapper(localName = "getBusinessRules", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRules")
    @ResponseWrapper(localName = "getBusinessRulesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRulesResponse")
    public Future<?> getBusinessRulesAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetBusinessRulesResponse> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteBusinessRule>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBusinessRules", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRules")
    @ResponseWrapper(localName = "getBusinessRulesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessRulesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessRulesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessRulesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessRules/Fault/ServerSideException")
    })
    public List<RemoteBusinessRule> getBusinessRules(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param activityId
     * @param processinstanceId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetArtifactForActivityResponse>
     */
    @WebMethod(operationName = "getArtifactForActivity")
    @RequestWrapper(localName = "getArtifactForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivity")
    @ResponseWrapper(localName = "getArtifactForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivityResponse")
    public Response<GetArtifactForActivityResponse> getArtifactForActivityAsync(
        @WebParam(name = "processinstanceId", targetNamespace = "")
        String processinstanceId,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param activityId
     * @param processinstanceId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getArtifactForActivity")
    @RequestWrapper(localName = "getArtifactForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivity")
    @ResponseWrapper(localName = "getArtifactForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivityResponse")
    public Future<?> getArtifactForActivityAsync(
        @WebParam(name = "processinstanceId", targetNamespace = "")
        String processinstanceId,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetArtifactForActivityResponse> asyncHandler);

    /**
     * 
     * @param activityId
     * @param processinstanceId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteArtifact
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getArtifactForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivity")
    @ResponseWrapper(localName = "getArtifactForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactForActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactForActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactForActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactForActivity/Fault/ServerSideException")
    })
    public RemoteArtifact getArtifactForActivity(
        @WebParam(name = "processinstanceId", targetNamespace = "")
        String processinstanceId,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param activityDefinitionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetArtifactDefinitionForActivityResponse>
     */
    @WebMethod(operationName = "getArtifactDefinitionForActivity")
    @RequestWrapper(localName = "getArtifactDefinitionForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivity")
    @ResponseWrapper(localName = "getArtifactDefinitionForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivityResponse")
    public Response<GetArtifactDefinitionForActivityResponse> getArtifactDefinitionForActivityAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param activityDefinitionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getArtifactDefinitionForActivity")
    @RequestWrapper(localName = "getArtifactDefinitionForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivity")
    @ResponseWrapper(localName = "getArtifactDefinitionForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivityResponse")
    public Future<?> getArtifactDefinitionForActivityAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetArtifactDefinitionForActivityResponse> asyncHandler);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param activityDefinitionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteArtifactDefinition
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getArtifactDefinitionForActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivity")
    @ResponseWrapper(localName = "getArtifactDefinitionForActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetArtifactDefinitionForActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactDefinitionForActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactDefinitionForActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getArtifactDefinitionForActivity/Fault/ServerSideException")
    })
    public RemoteArtifactDefinition getArtifactDefinitionForActivity(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param artifact
     * @param processInstanceId
     * @param sessionId
     * @param activityDefinitionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CommitActivityResponse>
     */
    @WebMethod(operationName = "commitActivity")
    @RequestWrapper(localName = "commitActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivity")
    @ResponseWrapper(localName = "commitActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivityResponse")
    public Response<CommitActivityResponse> commitActivityAsync(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "artifact", targetNamespace = "")
        RemoteArtifact artifact,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param artifact
     * @param processInstanceId
     * @param sessionId
     * @param activityDefinitionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "commitActivity")
    @RequestWrapper(localName = "commitActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivity")
    @ResponseWrapper(localName = "commitActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivityResponse")
    public Future<?> commitActivityAsync(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "artifact", targetNamespace = "")
        RemoteArtifact artifact,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CommitActivityResponse> asyncHandler);

    /**
     * 
     * @param artifact
     * @param processInstanceId
     * @param sessionId
     * @param activityDefinitionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "commitActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivity")
    @ResponseWrapper(localName = "commitActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CommitActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/commitActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/commitActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/commitActivity/Fault/ServerSideException")
    })
    public void commitActivity(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "activityDefinitionId", targetNamespace = "")
        String activityDefinitionId,
        @WebParam(name = "artifact", targetNamespace = "")
        RemoteArtifact artifact,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param attributes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateActivityResponse>
     */
    @WebMethod(operationName = "updateActivity")
    @RequestWrapper(localName = "updateActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivity")
    @ResponseWrapper(localName = "updateActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivityResponse")
    public Response<UpdateActivityResponse> updateActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param attributes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateActivity")
    @RequestWrapper(localName = "updateActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivity")
    @ResponseWrapper(localName = "updateActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivityResponse")
    public Future<?> updateActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateActivityResponse> asyncHandler);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param attributes
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivity")
    @ResponseWrapper(localName = "updateActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateActivity/Fault/ServerSideException")
    })
    public void updateActivity(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processInstanceId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetNextActivityForProcessInstanceResponse>
     */
    @WebMethod(operationName = "getNextActivityForProcessInstance")
    @RequestWrapper(localName = "getNextActivityForProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstance")
    @ResponseWrapper(localName = "getNextActivityForProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstanceResponse")
    public Response<GetNextActivityForProcessInstanceResponse> getNextActivityForProcessInstanceAsync(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processInstanceId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getNextActivityForProcessInstance")
    @RequestWrapper(localName = "getNextActivityForProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstance")
    @ResponseWrapper(localName = "getNextActivityForProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstanceResponse")
    public Future<?> getNextActivityForProcessInstanceAsync(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetNextActivityForProcessInstanceResponse> asyncHandler);

    /**
     * 
     * @param processInstanceId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteActivityDefinition
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNextActivityForProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstance")
    @ResponseWrapper(localName = "getNextActivityForProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetNextActivityForProcessInstanceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getNextActivityForProcessInstanceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getNextActivityForProcessInstanceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getNextActivityForProcessInstance/Fault/ServerSideException")
    })
    public RemoteActivityDefinition getNextActivityForProcessInstance(
        @WebParam(name = "processInstanceId", targetNamespace = "")
        String processInstanceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProcessDefinitionResponse>
     */
    @WebMethod(operationName = "getProcessDefinition")
    @RequestWrapper(localName = "getProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinition")
    @ResponseWrapper(localName = "getProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinitionResponse")
    public Response<GetProcessDefinitionResponse> getProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProcessDefinition")
    @RequestWrapper(localName = "getProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinition")
    @ResponseWrapper(localName = "getProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinitionResponse")
    public Future<?> getProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProcessDefinitionResponse> asyncHandler);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteProcessDefinition
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinition")
    @ResponseWrapper(localName = "getProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProcessDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProcessDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProcessDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProcessDefinition/Fault/ServerSideException")
    })
    public RemoteProcessDefinition getProcessDefinition(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteProcessDefinitionResponse>
     */
    @WebMethod(operationName = "deleteProcessDefinition")
    @RequestWrapper(localName = "deleteProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinition")
    @ResponseWrapper(localName = "deleteProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinitionResponse")
    public Response<DeleteProcessDefinitionResponse> deleteProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteProcessDefinition")
    @RequestWrapper(localName = "deleteProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinition")
    @ResponseWrapper(localName = "deleteProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinitionResponse")
    public Future<?> deleteProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteProcessDefinitionResponse> asyncHandler);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinition")
    @ResponseWrapper(localName = "deleteProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProcessDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProcessDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProcessDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProcessDefinition/Fault/ServerSideException")
    })
    public void deleteProcessDefinition(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param properties
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateProcessDefinitionResponse>
     */
    @WebMethod(operationName = "updateProcessDefinition")
    @RequestWrapper(localName = "updateProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinition")
    @ResponseWrapper(localName = "updateProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinitionResponse")
    public Response<UpdateProcessDefinitionResponse> updateProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param asyncHandler
     * @param properties
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateProcessDefinition")
    @RequestWrapper(localName = "updateProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinition")
    @ResponseWrapper(localName = "updateProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinitionResponse")
    public Future<?> updateProcessDefinitionAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateProcessDefinitionResponse> asyncHandler);

    /**
     * 
     * @param processDefinitionId
     * @param sessionId
     * @param properties
     * @param structure
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinition")
    @ResponseWrapper(localName = "updateProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProcessDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProcessDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProcessDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProcessDefinition/Fault/ServerSideException")
    })
    public void updateProcessDefinition(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "properties", targetNamespace = "")
        List<StringPair> properties,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param version
     * @param enabled
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProcessDefinitionResponse>
     */
    @WebMethod(operationName = "createProcessDefinition")
    @RequestWrapper(localName = "createProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinition")
    @ResponseWrapper(localName = "createProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinitionResponse")
    public Response<CreateProcessDefinitionResponse> createProcessDefinitionAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "version", targetNamespace = "")
        String version,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param version
     * @param enabled
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProcessDefinition")
    @RequestWrapper(localName = "createProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinition")
    @ResponseWrapper(localName = "createProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinitionResponse")
    public Future<?> createProcessDefinitionAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "version", targetNamespace = "")
        String version,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProcessDefinitionResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param version
     * @param enabled
     * @param structure
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProcessDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinition")
    @ResponseWrapper(localName = "createProcessDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessDefinition/Fault/ServerSideException")
    })
    public String createProcessDefinition(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "version", targetNamespace = "")
        String version,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param processInstancename
     * @param processDefinitionId
     * @param processInstanceDescription
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProcessInstanceResponse>
     */
    @WebMethod(operationName = "createProcessInstance")
    @RequestWrapper(localName = "createProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstance")
    @ResponseWrapper(localName = "createProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstanceResponse")
    public Response<CreateProcessInstanceResponse> createProcessInstanceAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "processInstancename", targetNamespace = "")
        String processInstancename,
        @WebParam(name = "processInstanceDescription", targetNamespace = "")
        String processInstanceDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param processInstancename
     * @param processDefinitionId
     * @param processInstanceDescription
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProcessInstance")
    @RequestWrapper(localName = "createProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstance")
    @ResponseWrapper(localName = "createProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstanceResponse")
    public Future<?> createProcessInstanceAsync(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "processInstancename", targetNamespace = "")
        String processInstancename,
        @WebParam(name = "processInstanceDescription", targetNamespace = "")
        String processInstanceDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProcessInstanceResponse> asyncHandler);

    /**
     * 
     * @param processInstancename
     * @param processDefinitionId
     * @param processInstanceDescription
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProcessInstance", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstance")
    @ResponseWrapper(localName = "createProcessInstanceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProcessInstanceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessInstanceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessInstanceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProcessInstance/Fault/ServerSideException")
    })
    public String createProcessInstance(
        @WebParam(name = "processDefinitionId", targetNamespace = "")
        String processDefinitionId,
        @WebParam(name = "processInstancename", targetNamespace = "")
        String processInstancename,
        @WebParam(name = "processInstanceDescription", targetNamespace = "")
        String processInstanceDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param masked
     * @param name
     * @param configVariablesPoolId
     * @param description
     * @param sessionId
     * @param type
     * @param valueDefinition
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateConfigurationVariableResponse>
     */
    @WebMethod(operationName = "createConfigurationVariable")
    @RequestWrapper(localName = "createConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariable")
    @ResponseWrapper(localName = "createConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariableResponse")
    public Response<CreateConfigurationVariableResponse> createConfigurationVariableAsync(
        @WebParam(name = "configVariablesPoolId", targetNamespace = "")
        String configVariablesPoolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "masked", targetNamespace = "")
        boolean masked,
        @WebParam(name = "valueDefinition", targetNamespace = "")
        String valueDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param masked
     * @param name
     * @param configVariablesPoolId
     * @param description
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param valueDefinition
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createConfigurationVariable")
    @RequestWrapper(localName = "createConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariable")
    @ResponseWrapper(localName = "createConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariableResponse")
    public Future<?> createConfigurationVariableAsync(
        @WebParam(name = "configVariablesPoolId", targetNamespace = "")
        String configVariablesPoolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "masked", targetNamespace = "")
        boolean masked,
        @WebParam(name = "valueDefinition", targetNamespace = "")
        String valueDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateConfigurationVariableResponse> asyncHandler);

    /**
     * 
     * @param masked
     * @param name
     * @param configVariablesPoolId
     * @param description
     * @param sessionId
     * @param type
     * @param valueDefinition
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariable")
    @ResponseWrapper(localName = "createConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariableResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariableRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariableResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariable/Fault/ServerSideException")
    })
    public long createConfigurationVariable(
        @WebParam(name = "configVariablesPoolId", targetNamespace = "")
        String configVariablesPoolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "masked", targetNamespace = "")
        boolean masked,
        @WebParam(name = "valueDefinition", targetNamespace = "")
        String valueDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param newValue
     * @param propertyToUpdate
     * @param name
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateConfigurationVariableResponse>
     */
    @WebMethod(operationName = "updateConfigurationVariable")
    @RequestWrapper(localName = "updateConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariable")
    @ResponseWrapper(localName = "updateConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariableResponse")
    public Response<UpdateConfigurationVariableResponse> updateConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "newValue", targetNamespace = "")
        String newValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param newValue
     * @param propertyToUpdate
     * @param name
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateConfigurationVariable")
    @RequestWrapper(localName = "updateConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariable")
    @ResponseWrapper(localName = "updateConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariableResponse")
    public Future<?> updateConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "newValue", targetNamespace = "")
        String newValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateConfigurationVariableResponse> asyncHandler);

    /**
     * 
     * @param newValue
     * @param propertyToUpdate
     * @param name
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariable")
    @ResponseWrapper(localName = "updateConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariableResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariableRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariableResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariable/Fault/ServerSideException")
    })
    public void updateConfigurationVariable(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "newValue", targetNamespace = "")
        String newValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteConfigurationVariableResponse>
     */
    @WebMethod(operationName = "deleteConfigurationVariable")
    @RequestWrapper(localName = "deleteConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariable")
    @ResponseWrapper(localName = "deleteConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariableResponse")
    public Response<DeleteConfigurationVariableResponse> deleteConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteConfigurationVariable")
    @RequestWrapper(localName = "deleteConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariable")
    @ResponseWrapper(localName = "deleteConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariableResponse")
    public Future<?> deleteConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteConfigurationVariableResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariable")
    @ResponseWrapper(localName = "deleteConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariableResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariableRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariableResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariable/Fault/ServerSideException")
    })
    public void deleteConfigurationVariable(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetConfigurationVariableResponse>
     */
    @WebMethod(operationName = "getConfigurationVariable")
    @RequestWrapper(localName = "getConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariable")
    @ResponseWrapper(localName = "getConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableResponse")
    public Response<GetConfigurationVariableResponse> getConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getConfigurationVariable")
    @RequestWrapper(localName = "getConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariable")
    @ResponseWrapper(localName = "getConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableResponse")
    public Future<?> getConfigurationVariableAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetConfigurationVariableResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteConfigurationVariable
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConfigurationVariable", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariable")
    @ResponseWrapper(localName = "getConfigurationVariableResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariableRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariableResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariable/Fault/ServerSideException")
    })
    public RemoteConfigurationVariable getConfigurationVariable(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetConfigurationVariableValueResponse>
     */
    @WebMethod(operationName = "getConfigurationVariableValue")
    @RequestWrapper(localName = "getConfigurationVariableValue", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValue")
    @ResponseWrapper(localName = "getConfigurationVariableValueResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValueResponse")
    public Response<GetConfigurationVariableValueResponse> getConfigurationVariableValueAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getConfigurationVariableValue")
    @RequestWrapper(localName = "getConfigurationVariableValue", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValue")
    @ResponseWrapper(localName = "getConfigurationVariableValueResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValueResponse")
    public Future<?> getConfigurationVariableValueAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetConfigurationVariableValueResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConfigurationVariableValue", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValue")
    @ResponseWrapper(localName = "getConfigurationVariableValueResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariableValueResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariableValueRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariableValueResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariableValue/Fault/ServerSideException")
    })
    public RemoteObject getConfigurationVariableValue(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetConfigurationVariablesInPoolResponse>
     */
    @WebMethod(operationName = "getConfigurationVariablesInPool")
    @RequestWrapper(localName = "getConfigurationVariablesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPool")
    @ResponseWrapper(localName = "getConfigurationVariablesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPoolResponse")
    public Response<GetConfigurationVariablesInPoolResponse> getConfigurationVariablesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getConfigurationVariablesInPool")
    @RequestWrapper(localName = "getConfigurationVariablesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPool")
    @ResponseWrapper(localName = "getConfigurationVariablesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPoolResponse")
    public Future<?> getConfigurationVariablesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetConfigurationVariablesInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteConfigurationVariable>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConfigurationVariablesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPool")
    @ResponseWrapper(localName = "getConfigurationVariablesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesInPool/Fault/ServerSideException")
    })
    public List<RemoteConfigurationVariable> getConfigurationVariablesInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param prefix
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefixResponse>
     */
    @WebMethod(operationName = "getConfigurationVariablesWithPrefix")
    @RequestWrapper(localName = "getConfigurationVariablesWithPrefix", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefix")
    @ResponseWrapper(localName = "getConfigurationVariablesWithPrefixResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefixResponse")
    public Response<GetConfigurationVariablesWithPrefixResponse> getConfigurationVariablesWithPrefixAsync(
        @WebParam(name = "prefix", targetNamespace = "")
        String prefix,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param prefix
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getConfigurationVariablesWithPrefix")
    @RequestWrapper(localName = "getConfigurationVariablesWithPrefix", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefix")
    @ResponseWrapper(localName = "getConfigurationVariablesWithPrefixResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefixResponse")
    public Future<?> getConfigurationVariablesWithPrefixAsync(
        @WebParam(name = "prefix", targetNamespace = "")
        String prefix,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetConfigurationVariablesWithPrefixResponse> asyncHandler);

    /**
     * 
     * @param prefix
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteConfigurationVariable>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConfigurationVariablesWithPrefix", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefix")
    @ResponseWrapper(localName = "getConfigurationVariablesWithPrefixResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesWithPrefixResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesWithPrefixRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesWithPrefixResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesWithPrefix/Fault/ServerSideException")
    })
    public List<RemoteConfigurationVariable> getConfigurationVariablesWithPrefix(
        @WebParam(name = "prefix", targetNamespace = "")
        String prefix,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllConfigurationVariablesResponse>
     */
    @WebMethod(operationName = "getAllConfigurationVariables")
    @RequestWrapper(localName = "getAllConfigurationVariables", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariables")
    @ResponseWrapper(localName = "getAllConfigurationVariablesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariablesResponse")
    public Response<GetAllConfigurationVariablesResponse> getAllConfigurationVariablesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllConfigurationVariables")
    @RequestWrapper(localName = "getAllConfigurationVariables", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariables")
    @ResponseWrapper(localName = "getAllConfigurationVariablesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariablesResponse")
    public Future<?> getAllConfigurationVariablesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllConfigurationVariablesResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteConfigurationVariable>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllConfigurationVariables", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariables")
    @ResponseWrapper(localName = "getAllConfigurationVariablesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllConfigurationVariablesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllConfigurationVariablesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllConfigurationVariablesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllConfigurationVariables/Fault/ServerSideException")
    })
    public List<RemoteConfigurationVariable> getAllConfigurationVariables(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetConfigurationVariablesPoolsResponse>
     */
    @WebMethod(operationName = "getConfigurationVariablesPools")
    @RequestWrapper(localName = "getConfigurationVariablesPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPools")
    @ResponseWrapper(localName = "getConfigurationVariablesPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPoolsResponse")
    public Response<GetConfigurationVariablesPoolsResponse> getConfigurationVariablesPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getConfigurationVariablesPools")
    @RequestWrapper(localName = "getConfigurationVariablesPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPools")
    @ResponseWrapper(localName = "getConfigurationVariablesPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPoolsResponse")
    public Future<?> getConfigurationVariablesPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetConfigurationVariablesPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConfigurationVariablesPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPools")
    @ResponseWrapper(localName = "getConfigurationVariablesPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetConfigurationVariablesPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getConfigurationVariablesPools/Fault/ServerSideException")
    })
    public List<RemotePool> getConfigurationVariablesPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateConfigurationVariablesPoolResponse>
     */
    @WebMethod(operationName = "createConfigurationVariablesPool")
    @RequestWrapper(localName = "createConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPool")
    @ResponseWrapper(localName = "createConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPoolResponse")
    public Response<CreateConfigurationVariablesPoolResponse> createConfigurationVariablesPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createConfigurationVariablesPool")
    @RequestWrapper(localName = "createConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPool")
    @ResponseWrapper(localName = "createConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPoolResponse")
    public Future<?> createConfigurationVariablesPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateConfigurationVariablesPoolResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPool")
    @ResponseWrapper(localName = "createConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateConfigurationVariablesPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariablesPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariablesPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createConfigurationVariablesPool/Fault/ServerSideException")
    })
    public String createConfigurationVariablesPool(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param propertyToUpdate
     * @param poolId
     * @param sessionId
     * @param value
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateConfigurationVariablesPoolResponse>
     */
    @WebMethod(operationName = "updateConfigurationVariablesPool")
    @RequestWrapper(localName = "updateConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPool")
    @ResponseWrapper(localName = "updateConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPoolResponse")
    public Response<UpdateConfigurationVariablesPoolResponse> updateConfigurationVariablesPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param propertyToUpdate
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @param value
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateConfigurationVariablesPool")
    @RequestWrapper(localName = "updateConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPool")
    @ResponseWrapper(localName = "updateConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPoolResponse")
    public Future<?> updateConfigurationVariablesPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateConfigurationVariablesPoolResponse> asyncHandler);

    /**
     * 
     * @param propertyToUpdate
     * @param poolId
     * @param sessionId
     * @param value
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPool")
    @ResponseWrapper(localName = "updateConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateConfigurationVariablesPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariablesPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariablesPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateConfigurationVariablesPool/Fault/ServerSideException")
    })
    public void updateConfigurationVariablesPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "propertyToUpdate", targetNamespace = "")
        String propertyToUpdate,
        @WebParam(name = "value", targetNamespace = "")
        String value,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteConfigurationVariablesPoolResponse>
     */
    @WebMethod(operationName = "deleteConfigurationVariablesPool")
    @RequestWrapper(localName = "deleteConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPool")
    @ResponseWrapper(localName = "deleteConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPoolResponse")
    public Response<DeleteConfigurationVariablesPoolResponse> deleteConfigurationVariablesPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteConfigurationVariablesPool")
    @RequestWrapper(localName = "deleteConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPool")
    @ResponseWrapper(localName = "deleteConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPoolResponse")
    public Future<?> deleteConfigurationVariablesPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteConfigurationVariablesPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteConfigurationVariablesPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPool")
    @ResponseWrapper(localName = "deleteConfigurationVariablesPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteConfigurationVariablesPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariablesPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariablesPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteConfigurationVariablesPool/Fault/ServerSideException")
    })
    public void deleteConfigurationVariablesPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param content
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateOSPViewResponse>
     */
    @WebMethod(operationName = "createOSPView")
    @RequestWrapper(localName = "createOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPView")
    @ResponseWrapper(localName = "createOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPViewResponse")
    public Response<CreateOSPViewResponse> createOSPViewAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param content
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createOSPView")
    @RequestWrapper(localName = "createOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPView")
    @ResponseWrapper(localName = "createOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPViewResponse")
    public Future<?> createOSPViewAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateOSPViewResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param content
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPView")
    @ResponseWrapper(localName = "createOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateOSPViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createOSPViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createOSPViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createOSPView/Fault/ServerSideException")
    })
    public long createOSPView(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetOSPViewResponse>
     */
    @WebMethod(operationName = "getOSPView")
    @RequestWrapper(localName = "getOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPView")
    @ResponseWrapper(localName = "getOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewResponse")
    public Response<GetOSPViewResponse> getOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getOSPView")
    @RequestWrapper(localName = "getOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPView")
    @ResponseWrapper(localName = "getOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewResponse")
    public Future<?> getOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetOSPViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPView")
    @ResponseWrapper(localName = "getOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPView/Fault/ServerSideException")
    })
    public RemoteViewObject getOSPView(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetOSPViewsResponse>
     */
    @WebMethod(operationName = "getOSPViews")
    @RequestWrapper(localName = "getOSPViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViews")
    @ResponseWrapper(localName = "getOSPViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewsResponse")
    public Response<GetOSPViewsResponse> getOSPViewsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getOSPViews")
    @RequestWrapper(localName = "getOSPViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViews")
    @ResponseWrapper(localName = "getOSPViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewsResponse")
    public Future<?> getOSPViewsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetOSPViewsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteViewObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOSPViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViews")
    @ResponseWrapper(localName = "getOSPViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetOSPViewsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPViewsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPViewsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getOSPViews/Fault/ServerSideException")
    })
    public List<RemoteViewObjectLight> getOSPViews(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param name
     * @param description
     * @param sessionId
     * @param content
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateOSPViewResponse>
     */
    @WebMethod(operationName = "updateOSPView")
    @RequestWrapper(localName = "updateOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPView")
    @ResponseWrapper(localName = "updateOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPViewResponse")
    public Response<UpdateOSPViewResponse> updateOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param content
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateOSPView")
    @RequestWrapper(localName = "updateOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPView")
    @ResponseWrapper(localName = "updateOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPViewResponse")
    public Future<?> updateOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateOSPViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param name
     * @param description
     * @param sessionId
     * @param content
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPView")
    @ResponseWrapper(localName = "updateOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateOSPViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateOSPViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateOSPViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateOSPView/Fault/ServerSideException")
    })
    public void updateOSPView(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "content", targetNamespace = "")
        byte[] content,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param script
     * @param enabled
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateValidatorDefinitionResponse>
     */
    @WebMethod(operationName = "createValidatorDefinition")
    @RequestWrapper(localName = "createValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinition")
    @ResponseWrapper(localName = "createValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinitionResponse")
    public Response<CreateValidatorDefinitionResponse> createValidatorDefinitionAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param asyncHandler
     * @param script
     * @param enabled
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createValidatorDefinition")
    @RequestWrapper(localName = "createValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinition")
    @ResponseWrapper(localName = "createValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinitionResponse")
    public Future<?> createValidatorDefinitionAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateValidatorDefinitionResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param script
     * @param enabled
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinition")
    @ResponseWrapper(localName = "createValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateValidatorDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createValidatorDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createValidatorDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createValidatorDefinition/Fault/ServerSideException")
    })
    public long createValidatorDefinition(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param validatorDefinitionId
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param script
     * @param enabled
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateValidatorDefinitionResponse>
     */
    @WebMethod(operationName = "updateValidatorDefinition")
    @RequestWrapper(localName = "updateValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinition")
    @ResponseWrapper(localName = "updateValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinitionResponse")
    public Response<UpdateValidatorDefinitionResponse> updateValidatorDefinitionAsync(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param validatorDefinitionId
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param asyncHandler
     * @param script
     * @param enabled
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateValidatorDefinition")
    @RequestWrapper(localName = "updateValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinition")
    @ResponseWrapper(localName = "updateValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinitionResponse")
    public Future<?> updateValidatorDefinitionAsync(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateValidatorDefinitionResponse> asyncHandler);

    /**
     * 
     * @param validatorDefinitionId
     * @param name
     * @param description
     * @param sessionId
     * @param classToBeApplied
     * @param script
     * @param enabled
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinition")
    @ResponseWrapper(localName = "updateValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateValidatorDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateValidatorDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateValidatorDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateValidatorDefinition/Fault/ServerSideException")
    })
    public void updateValidatorDefinition(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "classToBeApplied", targetNamespace = "")
        String classToBeApplied,
        @WebParam(name = "script", targetNamespace = "")
        String script,
        @WebParam(name = "enabled", targetNamespace = "")
        Boolean enabled,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetValidatorDefinitionsForClassResponse>
     */
    @WebMethod(operationName = "getValidatorDefinitionsForClass")
    @RequestWrapper(localName = "getValidatorDefinitionsForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClass")
    @ResponseWrapper(localName = "getValidatorDefinitionsForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClassResponse")
    public Response<GetValidatorDefinitionsForClassResponse> getValidatorDefinitionsForClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getValidatorDefinitionsForClass")
    @RequestWrapper(localName = "getValidatorDefinitionsForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClass")
    @ResponseWrapper(localName = "getValidatorDefinitionsForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClassResponse")
    public Future<?> getValidatorDefinitionsForClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetValidatorDefinitionsForClassResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteValidatorDefinition>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getValidatorDefinitionsForClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClass")
    @ResponseWrapper(localName = "getValidatorDefinitionsForClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetValidatorDefinitionsForClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getValidatorDefinitionsForClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getValidatorDefinitionsForClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getValidatorDefinitionsForClass/Fault/ServerSideException")
    })
    public List<RemoteValidatorDefinition> getValidatorDefinitionsForClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllValidatorDefinitionsResponse>
     */
    @WebMethod(operationName = "getAllValidatorDefinitions")
    @RequestWrapper(localName = "getAllValidatorDefinitions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitions")
    @ResponseWrapper(localName = "getAllValidatorDefinitionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitionsResponse")
    public Response<GetAllValidatorDefinitionsResponse> getAllValidatorDefinitionsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllValidatorDefinitions")
    @RequestWrapper(localName = "getAllValidatorDefinitions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitions")
    @ResponseWrapper(localName = "getAllValidatorDefinitionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitionsResponse")
    public Future<?> getAllValidatorDefinitionsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllValidatorDefinitionsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteValidatorDefinition>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllValidatorDefinitions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitions")
    @ResponseWrapper(localName = "getAllValidatorDefinitionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllValidatorDefinitionsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllValidatorDefinitionsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllValidatorDefinitionsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllValidatorDefinitions/Fault/ServerSideException")
    })
    public List<RemoteValidatorDefinition> getAllValidatorDefinitions(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RunValidationsForObjectResponse>
     */
    @WebMethod(operationName = "runValidationsForObject")
    @RequestWrapper(localName = "runValidationsForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObject")
    @ResponseWrapper(localName = "runValidationsForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObjectResponse")
    public Response<RunValidationsForObjectResponse> runValidationsForObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        long objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "runValidationsForObject")
    @RequestWrapper(localName = "runValidationsForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObject")
    @ResponseWrapper(localName = "runValidationsForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObjectResponse")
    public Future<?> runValidationsForObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        long objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RunValidationsForObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteValidator>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "runValidationsForObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObject")
    @ResponseWrapper(localName = "runValidationsForObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RunValidationsForObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/runValidationsForObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/runValidationsForObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/runValidationsForObject/Fault/ServerSideException")
    })
    public List<RemoteValidator> runValidationsForObject(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        long objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param validatorDefinitionId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteValidatorDefinitionResponse>
     */
    @WebMethod(operationName = "deleteValidatorDefinition")
    @RequestWrapper(localName = "deleteValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinition")
    @ResponseWrapper(localName = "deleteValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinitionResponse")
    public Response<DeleteValidatorDefinitionResponse> deleteValidatorDefinitionAsync(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param validatorDefinitionId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteValidatorDefinition")
    @RequestWrapper(localName = "deleteValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinition")
    @ResponseWrapper(localName = "deleteValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinitionResponse")
    public Future<?> deleteValidatorDefinitionAsync(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteValidatorDefinitionResponse> asyncHandler);

    /**
     * 
     * @param validatorDefinitionId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteValidatorDefinition", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinition")
    @ResponseWrapper(localName = "deleteValidatorDefinitionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteValidatorDefinitionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteValidatorDefinitionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteValidatorDefinitionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteValidatorDefinition/Fault/ServerSideException")
    })
    public void deleteValidatorDefinition(
        @WebParam(name = "validatorDefinitionId", targetNamespace = "")
        long validatorDefinitionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteOSPViewResponse>
     */
    @WebMethod(operationName = "deleteOSPView")
    @RequestWrapper(localName = "deleteOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPView")
    @ResponseWrapper(localName = "deleteOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPViewResponse")
    public Response<DeleteOSPViewResponse> deleteOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteOSPView")
    @RequestWrapper(localName = "deleteOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPView")
    @ResponseWrapper(localName = "deleteOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPViewResponse")
    public Future<?> deleteOSPViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteOSPViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteOSPView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPView")
    @ResponseWrapper(localName = "deleteOSPViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteOSPViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteOSPViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteOSPViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteOSPView/Fault/ServerSideException")
    })
    public void deleteOSPView(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param listTypeClassName
     * @param listTypeItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetListTypeItemResponse>
     */
    @WebMethod(operationName = "getListTypeItem")
    @RequestWrapper(localName = "getListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItem")
    @ResponseWrapper(localName = "getListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemResponse")
    public Response<GetListTypeItemResponse> getListTypeItemAsync(
        @WebParam(name = "listTypeClassName", targetNamespace = "")
        String listTypeClassName,
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param listTypeClassName
     * @param listTypeItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListTypeItem")
    @RequestWrapper(localName = "getListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItem")
    @ResponseWrapper(localName = "getListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemResponse")
    public Future<?> getListTypeItemAsync(
        @WebParam(name = "listTypeClassName", targetNamespace = "")
        String listTypeClassName,
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListTypeItemResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param listTypeClassName
     * @param listTypeItemId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItem")
    @ResponseWrapper(localName = "getListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItem/Fault/ServerSideException")
    })
    public RemoteObject getListTypeItem(
        @WebParam(name = "listTypeClassName", targetNamespace = "")
        String listTypeClassName,
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param firstName
     * @param lastName
     * @param privileges
     * @param password
     * @param defaultGroupId
     * @param sessionId
     * @param type
     * @param enabled
     * @param email
     * @param username
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateUserResponse>
     */
    @WebMethod(operationName = "createUser")
    @RequestWrapper(localName = "createUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUser")
    @ResponseWrapper(localName = "createUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUserResponse")
    public Response<CreateUserResponse> createUserAsync(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "privileges", targetNamespace = "")
        List<PrivilegeInfo> privileges,
        @WebParam(name = "defaultGroupId", targetNamespace = "")
        long defaultGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param privileges
     * @param password
     * @param defaultGroupId
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param enabled
     * @param email
     * @param username
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createUser")
    @RequestWrapper(localName = "createUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUser")
    @ResponseWrapper(localName = "createUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUserResponse")
    public Future<?> createUserAsync(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "privileges", targetNamespace = "")
        List<PrivilegeInfo> privileges,
        @WebParam(name = "defaultGroupId", targetNamespace = "")
        long defaultGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateUserResponse> asyncHandler);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param privileges
     * @param password
     * @param defaultGroupId
     * @param sessionId
     * @param type
     * @param enabled
     * @param email
     * @param username
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUser")
    @ResponseWrapper(localName = "createUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createUser/Fault/ServerSideException")
    })
    public long createUser(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "enabled", targetNamespace = "")
        boolean enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "privileges", targetNamespace = "")
        List<PrivilegeInfo> privileges,
        @WebParam(name = "defaultGroupId", targetNamespace = "")
        long defaultGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param oid
     * @param sessionId
     * @param type
     * @param enabled
     * @param email
     * @param username
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetUserPropertiesResponse>
     */
    @WebMethod(operationName = "setUserProperties")
    @RequestWrapper(localName = "setUserProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserProperties")
    @ResponseWrapper(localName = "setUserPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserPropertiesResponse")
    public Response<SetUserPropertiesResponse> setUserPropertiesAsync(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "enabled", targetNamespace = "")
        int enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param oid
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param enabled
     * @param email
     * @param username
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setUserProperties")
    @RequestWrapper(localName = "setUserProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserProperties")
    @ResponseWrapper(localName = "setUserPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserPropertiesResponse")
    public Future<?> setUserPropertiesAsync(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "enabled", targetNamespace = "")
        int enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetUserPropertiesResponse> asyncHandler);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param oid
     * @param sessionId
     * @param type
     * @param enabled
     * @param email
     * @param username
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setUserProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserProperties")
    @ResponseWrapper(localName = "setUserPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetUserPropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setUserPropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setUserPropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setUserProperties/Fault/ServerSideException")
    })
    public void setUserProperties(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "enabled", targetNamespace = "")
        int enabled,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddUserToGroupResponse>
     */
    @WebMethod(operationName = "addUserToGroup")
    @RequestWrapper(localName = "addUserToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroup")
    @ResponseWrapper(localName = "addUserToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroupResponse")
    public Response<AddUserToGroupResponse> addUserToGroupAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addUserToGroup")
    @RequestWrapper(localName = "addUserToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroup")
    @ResponseWrapper(localName = "addUserToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroupResponse")
    public Future<?> addUserToGroupAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddUserToGroupResponse> asyncHandler);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addUserToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroup")
    @ResponseWrapper(localName = "addUserToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddUserToGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addUserToGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addUserToGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addUserToGroup/Fault/ServerSideException")
    })
    public void addUserToGroup(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemoveUserFromGroupResponse>
     */
    @WebMethod(operationName = "removeUserFromGroup")
    @RequestWrapper(localName = "removeUserFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroup")
    @ResponseWrapper(localName = "removeUserFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroupResponse")
    public Response<RemoveUserFromGroupResponse> removeUserFromGroupAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removeUserFromGroup")
    @RequestWrapper(localName = "removeUserFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroup")
    @ResponseWrapper(localName = "removeUserFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroupResponse")
    public Future<?> removeUserFromGroupAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemoveUserFromGroupResponse> asyncHandler);

    /**
     * 
     * @param groupId
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removeUserFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroup")
    @ResponseWrapper(localName = "removeUserFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveUserFromGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeUserFromGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeUserFromGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeUserFromGroup/Fault/ServerSideException")
    })
    public void removeUserFromGroup(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetPrivilegeToUserResponse>
     */
    @WebMethod(operationName = "setPrivilegeToUser")
    @RequestWrapper(localName = "setPrivilegeToUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUser")
    @ResponseWrapper(localName = "setPrivilegeToUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUserResponse")
    public Response<SetPrivilegeToUserResponse> setPrivilegeToUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setPrivilegeToUser")
    @RequestWrapper(localName = "setPrivilegeToUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUser")
    @ResponseWrapper(localName = "setPrivilegeToUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUserResponse")
    public Future<?> setPrivilegeToUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetPrivilegeToUserResponse> asyncHandler);

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setPrivilegeToUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUser")
    @ResponseWrapper(localName = "setPrivilegeToUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToUser/Fault/ServerSideException")
    })
    public void setPrivilegeToUser(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetPrivilegeToGroupResponse>
     */
    @WebMethod(operationName = "setPrivilegeToGroup")
    @RequestWrapper(localName = "setPrivilegeToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroup")
    @ResponseWrapper(localName = "setPrivilegeToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroupResponse")
    public Response<SetPrivilegeToGroupResponse> setPrivilegeToGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setPrivilegeToGroup")
    @RequestWrapper(localName = "setPrivilegeToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroup")
    @ResponseWrapper(localName = "setPrivilegeToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroupResponse")
    public Future<?> setPrivilegeToGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetPrivilegeToGroupResponse> asyncHandler);

    /**
     * 
     * @param accessLevel
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setPrivilegeToGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroup")
    @ResponseWrapper(localName = "setPrivilegeToGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPrivilegeToGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPrivilegeToGroup/Fault/ServerSideException")
    })
    public void setPrivilegeToGroup(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "accessLevel", targetNamespace = "")
        int accessLevel,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param featureToken
     * @param sessionId
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemovePrivilegeFromUserResponse>
     */
    @WebMethod(operationName = "removePrivilegeFromUser")
    @RequestWrapper(localName = "removePrivilegeFromUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUser")
    @ResponseWrapper(localName = "removePrivilegeFromUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUserResponse")
    public Response<RemovePrivilegeFromUserResponse> removePrivilegeFromUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param featureToken
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removePrivilegeFromUser")
    @RequestWrapper(localName = "removePrivilegeFromUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUser")
    @ResponseWrapper(localName = "removePrivilegeFromUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUserResponse")
    public Future<?> removePrivilegeFromUserAsync(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemovePrivilegeFromUserResponse> asyncHandler);

    /**
     * 
     * @param featureToken
     * @param sessionId
     * @param userId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removePrivilegeFromUser", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUser")
    @ResponseWrapper(localName = "removePrivilegeFromUserResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromUserResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromUserRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromUserResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromUser/Fault/ServerSideException")
    })
    public void removePrivilegeFromUser(
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemovePrivilegeFromGroupResponse>
     */
    @WebMethod(operationName = "removePrivilegeFromGroup")
    @RequestWrapper(localName = "removePrivilegeFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroup")
    @ResponseWrapper(localName = "removePrivilegeFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroupResponse")
    public Response<RemovePrivilegeFromGroupResponse> removePrivilegeFromGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removePrivilegeFromGroup")
    @RequestWrapper(localName = "removePrivilegeFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroup")
    @ResponseWrapper(localName = "removePrivilegeFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroupResponse")
    public Future<?> removePrivilegeFromGroupAsync(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemovePrivilegeFromGroupResponse> asyncHandler);

    /**
     * 
     * @param featureToken
     * @param groupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removePrivilegeFromGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroup")
    @ResponseWrapper(localName = "removePrivilegeFromGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePrivilegeFromGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePrivilegeFromGroup/Fault/ServerSideException")
    })
    public void removePrivilegeFromGroup(
        @WebParam(name = "groupId", targetNamespace = "")
        long groupId,
        @WebParam(name = "featureToken", targetNamespace = "")
        String featureToken,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetUsersResponse>
     */
    @WebMethod(operationName = "getUsers")
    @RequestWrapper(localName = "getUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsers")
    @ResponseWrapper(localName = "getUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersResponse")
    public Response<GetUsersResponse> getUsersAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getUsers")
    @RequestWrapper(localName = "getUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsers")
    @ResponseWrapper(localName = "getUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersResponse")
    public Future<?> getUsersAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetUsersResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteUserInfo>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsers")
    @ResponseWrapper(localName = "getUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetUsersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getUsers/Fault/ServerSideException")
    })
    public List<RemoteUserInfo> getUsers(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetGroupsResponse>
     */
    @WebMethod(operationName = "getGroups")
    @RequestWrapper(localName = "getGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroups")
    @ResponseWrapper(localName = "getGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsResponse")
    public Response<GetGroupsResponse> getGroupsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getGroups")
    @RequestWrapper(localName = "getGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroups")
    @ResponseWrapper(localName = "getGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsResponse")
    public Future<?> getGroupsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGroupsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.GroupInfo>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroups")
    @ResponseWrapper(localName = "getGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGroupsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroupsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroupsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGroups/Fault/ServerSideException")
    })
    public List<GroupInfo> getGroups(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param groupName
     * @param description
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetGroupPropertiesResponse>
     */
    @WebMethod(operationName = "setGroupProperties")
    @RequestWrapper(localName = "setGroupProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupProperties")
    @ResponseWrapper(localName = "setGroupPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupPropertiesResponse")
    public Response<SetGroupPropertiesResponse> setGroupPropertiesAsync(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param groupName
     * @param description
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setGroupProperties")
    @RequestWrapper(localName = "setGroupProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupProperties")
    @ResponseWrapper(localName = "setGroupPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupPropertiesResponse")
    public Future<?> setGroupPropertiesAsync(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetGroupPropertiesResponse> asyncHandler);

    /**
     * 
     * @param groupName
     * @param description
     * @param oid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setGroupProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupProperties")
    @ResponseWrapper(localName = "setGroupPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetGroupPropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setGroupPropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setGroupPropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setGroupProperties/Fault/ServerSideException")
    })
    public void setGroupProperties(
        @WebParam(name = "oid", targetNamespace = "")
        long oid,
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param oids
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteUsersResponse>
     */
    @WebMethod(operationName = "deleteUsers")
    @RequestWrapper(localName = "deleteUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsers")
    @ResponseWrapper(localName = "deleteUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsersResponse")
    public Response<DeleteUsersResponse> deleteUsersAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param oids
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteUsers")
    @RequestWrapper(localName = "deleteUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsers")
    @ResponseWrapper(localName = "deleteUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsersResponse")
    public Future<?> deleteUsersAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteUsersResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param oids
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteUsers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsers")
    @ResponseWrapper(localName = "deleteUsersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteUsersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteUsersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteUsersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteUsers/Fault/ServerSideException")
    })
    public void deleteUsers(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param oids
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteGroupsResponse>
     */
    @WebMethod(operationName = "deleteGroups")
    @RequestWrapper(localName = "deleteGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroups")
    @ResponseWrapper(localName = "deleteGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroupsResponse")
    public Response<DeleteGroupsResponse> deleteGroupsAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param oids
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteGroups")
    @RequestWrapper(localName = "deleteGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroups")
    @ResponseWrapper(localName = "deleteGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroupsResponse")
    public Future<?> deleteGroupsAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteGroupsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param oids
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroups")
    @ResponseWrapper(localName = "deleteGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGroupsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGroupsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGroupsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGroups/Fault/ServerSideException")
    })
    public void deleteGroups(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param displayName
     * @param name
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateListTypeItemResponse>
     */
    @WebMethod(operationName = "createListTypeItem")
    @RequestWrapper(localName = "createListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItem")
    @ResponseWrapper(localName = "createListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemResponse")
    public Response<CreateListTypeItemResponse> createListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param displayName
     * @param name
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createListTypeItem")
    @RequestWrapper(localName = "createListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItem")
    @ResponseWrapper(localName = "createListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemResponse")
    public Future<?> createListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateListTypeItemResponse> asyncHandler);

    /**
     * 
     * @param displayName
     * @param name
     * @param className
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItem")
    @ResponseWrapper(localName = "createListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItemRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItemResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItem/Fault/ServerSideException")
    })
    public String createListTypeItem(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateListTypeItemResponse>
     */
    @WebMethod(operationName = "updateListTypeItem")
    @RequestWrapper(localName = "updateListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItem")
    @ResponseWrapper(localName = "updateListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemResponse")
    public Response<UpdateListTypeItemResponse> updateListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateListTypeItem")
    @RequestWrapper(localName = "updateListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItem")
    @ResponseWrapper(localName = "updateListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemResponse")
    public Future<?> updateListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateListTypeItemResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param attributes
     * @param oid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItem")
    @ResponseWrapper(localName = "updateListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItemRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItemResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItem/Fault/ServerSideException")
    })
    public void updateListTypeItem(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteListTypeItemResponse>
     */
    @WebMethod(operationName = "deleteListTypeItem")
    @RequestWrapper(localName = "deleteListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItem")
    @ResponseWrapper(localName = "deleteListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemResponse")
    public Response<DeleteListTypeItemResponse> deleteListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param releaseRelationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteListTypeItem")
    @RequestWrapper(localName = "deleteListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItem")
    @ResponseWrapper(localName = "deleteListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemResponse")
    public Future<?> deleteListTypeItemAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteListTypeItemResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteListTypeItem", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItem")
    @ResponseWrapper(localName = "deleteListTypeItemResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItemRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItemResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItem/Fault/ServerSideException")
    })
    public void deleteListTypeItem(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetListTypeItemsResponse>
     */
    @WebMethod(operationName = "getListTypeItems")
    @RequestWrapper(localName = "getListTypeItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItems")
    @ResponseWrapper(localName = "getListTypeItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemsResponse")
    public Response<GetListTypeItemsResponse> getListTypeItemsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListTypeItems")
    @RequestWrapper(localName = "getListTypeItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItems")
    @ResponseWrapper(localName = "getListTypeItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemsResponse")
    public Future<?> getListTypeItemsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListTypeItemsResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListTypeItems", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItems")
    @ResponseWrapper(localName = "getListTypeItemsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItems/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getListTypeItems(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetInstanceableListTypesResponse>
     */
    @WebMethod(operationName = "getInstanceableListTypes")
    @RequestWrapper(localName = "getInstanceableListTypes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypes")
    @ResponseWrapper(localName = "getInstanceableListTypesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypesResponse")
    public Response<GetInstanceableListTypesResponse> getInstanceableListTypesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getInstanceableListTypes")
    @RequestWrapper(localName = "getInstanceableListTypes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypes")
    @ResponseWrapper(localName = "getInstanceableListTypesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypesResponse")
    public Future<?> getInstanceableListTypesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetInstanceableListTypesResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteClassMetadataLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getInstanceableListTypes", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypes")
    @ResponseWrapper(localName = "getInstanceableListTypesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetInstanceableListTypesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInstanceableListTypesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInstanceableListTypesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getInstanceableListTypes/Fault/ServerSideException")
    })
    public List<RemoteClassMetadataLight> getInstanceableListTypes(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetDeviceLayoutsResponse>
     */
    @WebMethod(operationName = "getDeviceLayouts")
    @RequestWrapper(localName = "getDeviceLayouts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayouts")
    @ResponseWrapper(localName = "getDeviceLayoutsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutsResponse")
    public Response<GetDeviceLayoutsResponse> getDeviceLayoutsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getDeviceLayouts")
    @RequestWrapper(localName = "getDeviceLayouts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayouts")
    @ResponseWrapper(localName = "getDeviceLayoutsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutsResponse")
    public Future<?> getDeviceLayoutsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDeviceLayoutsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDeviceLayouts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayouts")
    @ResponseWrapper(localName = "getDeviceLayoutsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayoutsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayoutsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayouts/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getDeviceLayouts(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetDeviceLayoutStructureResponse>
     */
    @WebMethod(operationName = "getDeviceLayoutStructure")
    @RequestWrapper(localName = "getDeviceLayoutStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructure")
    @ResponseWrapper(localName = "getDeviceLayoutStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructureResponse")
    public Response<GetDeviceLayoutStructureResponse> getDeviceLayoutStructureAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getDeviceLayoutStructure")
    @RequestWrapper(localName = "getDeviceLayoutStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructure")
    @ResponseWrapper(localName = "getDeviceLayoutStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructureResponse")
    public Future<?> getDeviceLayoutStructureAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetDeviceLayoutStructureResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param oid
     * @param sessionId
     * @return
     *     returns byte[]
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDeviceLayoutStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructure")
    @ResponseWrapper(localName = "getDeviceLayoutStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetDeviceLayoutStructureResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayoutStructureRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayoutStructureResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getDeviceLayoutStructure/Fault/ServerSideException")
    })
    public byte[] getDeviceLayoutStructure(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewClassName
     * @param background
     * @param objectClass
     * @param name
     * @param description
     * @param sessionId
     * @param objectId
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateObjectRelatedViewResponse>
     */
    @WebMethod(operationName = "createObjectRelatedView")
    @RequestWrapper(localName = "createObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedView")
    @ResponseWrapper(localName = "createObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedViewResponse")
    public Response<CreateObjectRelatedViewResponse> createObjectRelatedViewAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewClassName
     * @param background
     * @param objectClass
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createObjectRelatedView")
    @RequestWrapper(localName = "createObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedView")
    @ResponseWrapper(localName = "createObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedViewResponse")
    public Future<?> createObjectRelatedViewAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateObjectRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param viewClassName
     * @param background
     * @param objectClass
     * @param name
     * @param description
     * @param sessionId
     * @param objectId
     * @param structure
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedView")
    @ResponseWrapper(localName = "createObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObjectRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObjectRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObjectRelatedView/Fault/ServerSideException")
    })
    public long createObjectRelatedView(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param viewClass
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateGeneralViewResponse>
     */
    @WebMethod(operationName = "createGeneralView")
    @RequestWrapper(localName = "createGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralView")
    @ResponseWrapper(localName = "createGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralViewResponse")
    public Response<CreateGeneralViewResponse> createGeneralViewAsync(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param viewClass
     * @param asyncHandler
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createGeneralView")
    @RequestWrapper(localName = "createGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralView")
    @ResponseWrapper(localName = "createGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralViewResponse")
    public Future<?> createGeneralViewAsync(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateGeneralViewResponse> asyncHandler);

    /**
     * 
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param viewClass
     * @param structure
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralView")
    @ResponseWrapper(localName = "createGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGeneralViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGeneralViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGeneralViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGeneralView/Fault/ServerSideException")
    })
    public long createGeneralView(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param objectClass
     * @param viewDescription
     * @param sessionId
     * @param objectOid
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateObjectRelatedViewResponse>
     */
    @WebMethod(operationName = "updateObjectRelatedView")
    @RequestWrapper(localName = "updateObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedView")
    @ResponseWrapper(localName = "updateObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedViewResponse")
    public Response<UpdateObjectRelatedViewResponse> updateObjectRelatedViewAsync(
        @WebParam(name = "objectOid", targetNamespace = "")
        String objectOid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param objectClass
     * @param viewDescription
     * @param sessionId
     * @param asyncHandler
     * @param objectOid
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateObjectRelatedView")
    @RequestWrapper(localName = "updateObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedView")
    @ResponseWrapper(localName = "updateObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedViewResponse")
    public Future<?> updateObjectRelatedViewAsync(
        @WebParam(name = "objectOid", targetNamespace = "")
        String objectOid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateObjectRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param objectClass
     * @param viewDescription
     * @param sessionId
     * @param objectOid
     * @param structure
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedView")
    @ResponseWrapper(localName = "updateObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateObjectRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObjectRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObjectRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateObjectRelatedView/Fault/ServerSideException")
    })
    public void updateObjectRelatedView(
        @WebParam(name = "objectOid", targetNamespace = "")
        String objectOid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param viewDescription
     * @param sessionId
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateGeneralViewResponse>
     */
    @WebMethod(operationName = "updateGeneralView")
    @RequestWrapper(localName = "updateGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralView")
    @ResponseWrapper(localName = "updateGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralViewResponse")
    public Response<UpdateGeneralViewResponse> updateGeneralViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param viewDescription
     * @param sessionId
     * @param asyncHandler
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateGeneralView")
    @RequestWrapper(localName = "updateGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralView")
    @ResponseWrapper(localName = "updateGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralViewResponse")
    public Future<?> updateGeneralViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateGeneralViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param viewName
     * @param background
     * @param viewDescription
     * @param sessionId
     * @param structure
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralView")
    @ResponseWrapper(localName = "updateGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateGeneralViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateGeneralViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateGeneralViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateGeneralView/Fault/ServerSideException")
    })
    public void updateGeneralView(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "viewName", targetNamespace = "")
        String viewName,
        @WebParam(name = "viewDescription", targetNamespace = "")
        String viewDescription,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectRelatedViewResponse>
     */
    @WebMethod(operationName = "getObjectRelatedView")
    @RequestWrapper(localName = "getObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedView")
    @ResponseWrapper(localName = "getObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewResponse")
    public Response<GetObjectRelatedViewResponse> getObjectRelatedViewAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectRelatedView")
    @RequestWrapper(localName = "getObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedView")
    @ResponseWrapper(localName = "getObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewResponse")
    public Future<?> getObjectRelatedViewAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedView")
    @ResponseWrapper(localName = "getObjectRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedView/Fault/ServerSideException")
    })
    public RemoteViewObject getObjectRelatedView(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param viewType
     * @param limit
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectRelatedViewsResponse>
     */
    @WebMethod(operationName = "getObjectRelatedViews")
    @RequestWrapper(localName = "getObjectRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViews")
    @ResponseWrapper(localName = "getObjectRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewsResponse")
    public Response<GetObjectRelatedViewsResponse> getObjectRelatedViewsAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewType", targetNamespace = "")
        int viewType,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param viewType
     * @param limit
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectRelatedViews")
    @RequestWrapper(localName = "getObjectRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViews")
    @ResponseWrapper(localName = "getObjectRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewsResponse")
    public Future<?> getObjectRelatedViewsAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewType", targetNamespace = "")
        int viewType,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectRelatedViewsResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param viewType
     * @param limit
     * @param oid
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteViewObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViews")
    @ResponseWrapper(localName = "getObjectRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectRelatedViewsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedViewsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedViewsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRelatedViews/Fault/ServerSideException")
    })
    public List<RemoteViewObjectLight> getObjectRelatedViews(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "viewType", targetNamespace = "")
        int viewType,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param sessionId
     * @param viewClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetGeneralViewsResponse>
     */
    @WebMethod(operationName = "getGeneralViews")
    @RequestWrapper(localName = "getGeneralViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViews")
    @ResponseWrapper(localName = "getGeneralViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewsResponse")
    public Response<GetGeneralViewsResponse> getGeneralViewsAsync(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param sessionId
     * @param viewClass
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getGeneralViews")
    @RequestWrapper(localName = "getGeneralViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViews")
    @ResponseWrapper(localName = "getGeneralViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewsResponse")
    public Future<?> getGeneralViewsAsync(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGeneralViewsResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param sessionId
     * @param viewClass
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteViewObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGeneralViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViews")
    @ResponseWrapper(localName = "getGeneralViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralViewsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralViewsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralViews/Fault/ServerSideException")
    })
    public List<RemoteViewObjectLight> getGeneralViews(
        @WebParam(name = "viewClass", targetNamespace = "")
        String viewClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetGeneralViewResponse>
     */
    @WebMethod(operationName = "getGeneralView")
    @RequestWrapper(localName = "getGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralView")
    @ResponseWrapper(localName = "getGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewResponse")
    public Response<GetGeneralViewResponse> getGeneralViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getGeneralView")
    @RequestWrapper(localName = "getGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralView")
    @ResponseWrapper(localName = "getGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewResponse")
    public Future<?> getGeneralViewAsync(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGeneralViewResponse> asyncHandler);

    /**
     * 
     * @param viewId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralView")
    @ResponseWrapper(localName = "getGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralView/Fault/ServerSideException")
    })
    public RemoteViewObject getGeneralView(
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param queryStructure
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateQueryResponse>
     */
    @WebMethod(operationName = "createQuery")
    @RequestWrapper(localName = "createQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQuery")
    @ResponseWrapper(localName = "createQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQueryResponse")
    public Response<CreateQueryResponse> createQueryAsync(
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param queryStructure
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createQuery")
    @RequestWrapper(localName = "createQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQuery")
    @ResponseWrapper(localName = "createQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQueryResponse")
    public Future<?> createQueryAsync(
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateQueryResponse> asyncHandler);

    /**
     * 
     * @param queryStructure
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQuery")
    @ResponseWrapper(localName = "createQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateQueryResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createQueryRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createQueryResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createQuery/Fault/ServerSideException")
    })
    public long createQuery(
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param queryStructure
     * @param queryOid
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SaveQueryResponse>
     */
    @WebMethod(operationName = "saveQuery")
    @RequestWrapper(localName = "saveQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQuery")
    @ResponseWrapper(localName = "saveQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQueryResponse")
    public Response<SaveQueryResponse> saveQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param queryStructure
     * @param queryOid
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "saveQuery")
    @RequestWrapper(localName = "saveQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQuery")
    @ResponseWrapper(localName = "saveQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQueryResponse")
    public Future<?> saveQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SaveQueryResponse> asyncHandler);

    /**
     * 
     * @param queryStructure
     * @param queryOid
     * @param ownerOid
     * @param queryName
     * @param description
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "saveQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQuery")
    @ResponseWrapper(localName = "saveQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SaveQueryResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/saveQueryRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/saveQueryResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/saveQuery/Fault/ServerSideException")
    })
    public void saveQuery(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "queryName", targetNamespace = "")
        String queryName,
        @WebParam(name = "ownerOid", targetNamespace = "")
        long ownerOid,
        @WebParam(name = "queryStructure", targetNamespace = "")
        byte[] queryStructure,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteQueryResponse>
     */
    @WebMethod(operationName = "deleteQuery")
    @RequestWrapper(localName = "deleteQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQuery")
    @ResponseWrapper(localName = "deleteQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQueryResponse")
    public Response<DeleteQueryResponse> deleteQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteQuery")
    @RequestWrapper(localName = "deleteQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQuery")
    @ResponseWrapper(localName = "deleteQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQueryResponse")
    public Future<?> deleteQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteQueryResponse> asyncHandler);

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQuery")
    @ResponseWrapper(localName = "deleteQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteQueryResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteQueryRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteQueryResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteQuery/Fault/ServerSideException")
    })
    public void deleteQuery(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param showPublic
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetQueriesResponse>
     */
    @WebMethod(operationName = "getQueries")
    @RequestWrapper(localName = "getQueries", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueries")
    @ResponseWrapper(localName = "getQueriesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueriesResponse")
    public Response<GetQueriesResponse> getQueriesAsync(
        @WebParam(name = "showPublic", targetNamespace = "")
        boolean showPublic,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param showPublic
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getQueries")
    @RequestWrapper(localName = "getQueries", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueries")
    @ResponseWrapper(localName = "getQueriesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueriesResponse")
    public Future<?> getQueriesAsync(
        @WebParam(name = "showPublic", targetNamespace = "")
        boolean showPublic,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetQueriesResponse> asyncHandler);

    /**
     * 
     * @param showPublic
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteQueryLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getQueries", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueries")
    @ResponseWrapper(localName = "getQueriesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueriesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQueriesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQueriesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQueries/Fault/ServerSideException")
    })
    public List<RemoteQueryLight> getQueries(
        @WebParam(name = "showPublic", targetNamespace = "")
        boolean showPublic,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param query
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ExecuteQueryResponse>
     */
    @WebMethod(operationName = "executeQuery")
    @RequestWrapper(localName = "executeQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQuery")
    @ResponseWrapper(localName = "executeQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQueryResponse")
    public Response<ExecuteQueryResponse> executeQueryAsync(
        @WebParam(name = "query", targetNamespace = "")
        TransientQuery query,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param query
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "executeQuery")
    @RequestWrapper(localName = "executeQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQuery")
    @ResponseWrapper(localName = "executeQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQueryResponse")
    public Future<?> executeQueryAsync(
        @WebParam(name = "query", targetNamespace = "")
        TransientQuery query,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExecuteQueryResponse> asyncHandler);

    /**
     * 
     * @param query
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteResultRecord>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQuery")
    @ResponseWrapper(localName = "executeQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteQueryResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeQueryRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeQueryResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeQuery/Fault/ServerSideException")
    })
    public List<RemoteResultRecord> executeQuery(
        @WebParam(name = "query", targetNamespace = "")
        TransientQuery query,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateRootPoolResponse>
     */
    @WebMethod(operationName = "createRootPool")
    @RequestWrapper(localName = "createRootPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPool")
    @ResponseWrapper(localName = "createRootPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPoolResponse")
    public Response<CreateRootPoolResponse> createRootPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createRootPool")
    @RequestWrapper(localName = "createRootPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPool")
    @ResponseWrapper(localName = "createRootPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPoolResponse")
    public Future<?> createRootPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateRootPoolResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createRootPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPool")
    @ResponseWrapper(localName = "createRootPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateRootPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createRootPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createRootPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createRootPool/Fault/ServerSideException")
    })
    public String createRootPool(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassname
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param parentId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePoolInObjectResponse>
     */
    @WebMethod(operationName = "createPoolInObject")
    @RequestWrapper(localName = "createPoolInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObject")
    @ResponseWrapper(localName = "createPoolInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObjectResponse")
    public Response<CreatePoolInObjectResponse> createPoolInObjectAsync(
        @WebParam(name = "parentClassname", targetNamespace = "")
        String parentClassname,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassname
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param parentId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPoolInObject")
    @RequestWrapper(localName = "createPoolInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObject")
    @ResponseWrapper(localName = "createPoolInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObjectResponse")
    public Future<?> createPoolInObjectAsync(
        @WebParam(name = "parentClassname", targetNamespace = "")
        String parentClassname,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePoolInObjectResponse> asyncHandler);

    /**
     * 
     * @param parentClassname
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param parentId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPoolInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObject")
    @ResponseWrapper(localName = "createPoolInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInObject/Fault/ServerSideException")
    })
    public String createPoolInObject(
        @WebParam(name = "parentClassname", targetNamespace = "")
        String parentClassname,
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param parentId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePoolInPoolResponse>
     */
    @WebMethod(operationName = "createPoolInPool")
    @RequestWrapper(localName = "createPoolInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPool")
    @ResponseWrapper(localName = "createPoolInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPoolResponse")
    public Response<CreatePoolInPoolResponse> createPoolInPoolAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param parentId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPoolInPool")
    @RequestWrapper(localName = "createPoolInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPool")
    @ResponseWrapper(localName = "createPoolInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPoolResponse")
    public Future<?> createPoolInPoolAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePoolInPoolResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param instancesOfClass
     * @param description
     * @param sessionId
     * @param type
     * @param parentId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPoolInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPool")
    @ResponseWrapper(localName = "createPoolInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInPool/Fault/ServerSideException")
    })
    public String createPoolInPool(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "type", targetNamespace = "")
        int type,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeletePoolsResponse>
     */
    @WebMethod(operationName = "deletePools")
    @RequestWrapper(localName = "deletePools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePools")
    @ResponseWrapper(localName = "deletePoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePoolsResponse")
    public Response<DeletePoolsResponse> deletePoolsAsync(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param ids
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deletePools")
    @RequestWrapper(localName = "deletePools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePools")
    @ResponseWrapper(localName = "deletePoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePoolsResponse")
    public Future<?> deletePoolsAsync(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeletePoolsResponse> asyncHandler);

    /**
     * 
     * @param ids
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deletePools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePools")
    @ResponseWrapper(localName = "deletePoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePools/Fault/ServerSideException")
    })
    public void deletePools(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param name
     * @param description
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetPoolPropertiesResponse>
     */
    @WebMethod(operationName = "setPoolProperties")
    @RequestWrapper(localName = "setPoolProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolProperties")
    @ResponseWrapper(localName = "setPoolPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolPropertiesResponse")
    public Response<SetPoolPropertiesResponse> setPoolPropertiesAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setPoolProperties")
    @RequestWrapper(localName = "setPoolProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolProperties")
    @ResponseWrapper(localName = "setPoolPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolPropertiesResponse")
    public Future<?> setPoolPropertiesAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetPoolPropertiesResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param name
     * @param description
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setPoolProperties", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolProperties")
    @ResponseWrapper(localName = "setPoolPropertiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetPoolPropertiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPoolPropertiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPoolPropertiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setPoolProperties/Fault/ServerSideException")
    })
    public void setPoolProperties(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param limit
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetBusinessObjectAuditTrailResponse>
     */
    @WebMethod(operationName = "getBusinessObjectAuditTrail")
    @RequestWrapper(localName = "getBusinessObjectAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrail")
    @ResponseWrapper(localName = "getBusinessObjectAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrailResponse")
    public Response<GetBusinessObjectAuditTrailResponse> getBusinessObjectAuditTrailAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getBusinessObjectAuditTrail")
    @RequestWrapper(localName = "getBusinessObjectAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrail")
    @ResponseWrapper(localName = "getBusinessObjectAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrailResponse")
    public Future<?> getBusinessObjectAuditTrailAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetBusinessObjectAuditTrailResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param limit
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.ApplicationLogEntry>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBusinessObjectAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrail")
    @ResponseWrapper(localName = "getBusinessObjectAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBusinessObjectAuditTrailResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessObjectAuditTrailRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessObjectAuditTrailResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBusinessObjectAuditTrail/Fault/ServerSideException")
    })
    public List<ApplicationLogEntry> getBusinessObjectAuditTrail(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetGeneralActivityAuditTrailResponse>
     */
    @WebMethod(operationName = "getGeneralActivityAuditTrail")
    @RequestWrapper(localName = "getGeneralActivityAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrail")
    @ResponseWrapper(localName = "getGeneralActivityAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrailResponse")
    public Response<GetGeneralActivityAuditTrailResponse> getGeneralActivityAuditTrailAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getGeneralActivityAuditTrail")
    @RequestWrapper(localName = "getGeneralActivityAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrail")
    @ResponseWrapper(localName = "getGeneralActivityAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrailResponse")
    public Future<?> getGeneralActivityAuditTrailAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetGeneralActivityAuditTrailResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.ApplicationLogEntry>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGeneralActivityAuditTrail", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrail")
    @ResponseWrapper(localName = "getGeneralActivityAuditTrailResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetGeneralActivityAuditTrailResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralActivityAuditTrailRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralActivityAuditTrailResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getGeneralActivityAuditTrail/Fault/ServerSideException")
    })
    public List<ApplicationLogEntry> getGeneralActivityAuditTrail(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param password
     * @param sessionType
     * @param username
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSessionResponse>
     */
    @WebMethod(operationName = "createSession")
    @RequestWrapper(localName = "createSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSession")
    @ResponseWrapper(localName = "createSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSessionResponse")
    public Response<CreateSessionResponse> createSessionAsync(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "sessionType", targetNamespace = "")
        int sessionType);

    /**
     * 
     * @param password
     * @param sessionType
     * @param asyncHandler
     * @param username
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSession")
    @RequestWrapper(localName = "createSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSession")
    @ResponseWrapper(localName = "createSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSessionResponse")
    public Future<?> createSessionAsync(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "sessionType", targetNamespace = "")
        int sessionType,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSessionResponse> asyncHandler);

    /**
     * 
     * @param password
     * @param sessionType
     * @param username
     * @return
     *     returns org.inventory.communications.wsclient.RemoteSession
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSession", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSession")
    @ResponseWrapper(localName = "createSessionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSessionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSessionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSessionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSession/Fault/ServerSideException")
    })
    public RemoteSession createSession(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "sessionType", targetNamespace = "")
        int sessionType)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProxyPoolResponse>
     */
    @WebMethod(operationName = "createProxyPool")
    @RequestWrapper(localName = "createProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPool")
    @ResponseWrapper(localName = "createProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPoolResponse")
    public Response<CreateProxyPoolResponse> createProxyPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProxyPool")
    @RequestWrapper(localName = "createProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPool")
    @ResponseWrapper(localName = "createProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPoolResponse")
    public Future<?> createProxyPoolAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProxyPoolResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param description
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPool")
    @ResponseWrapper(localName = "createProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxyPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxyPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxyPool/Fault/ServerSideException")
    })
    public String createProxyPool(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param objectId
     * @param proxyId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseObjectFromProxyResponse>
     */
    @WebMethod(operationName = "releaseObjectFromProxy")
    @RequestWrapper(localName = "releaseObjectFromProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxy")
    @ResponseWrapper(localName = "releaseObjectFromProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxyResponse")
    public Response<ReleaseObjectFromProxyResponse> releaseObjectFromProxyAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param asyncHandler
     * @param objectId
     * @param proxyId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseObjectFromProxy")
    @RequestWrapper(localName = "releaseObjectFromProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxy")
    @ResponseWrapper(localName = "releaseObjectFromProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxyResponse")
    public Future<?> releaseObjectFromProxyAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseObjectFromProxyResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param objectId
     * @param proxyId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseObjectFromProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxy")
    @ResponseWrapper(localName = "releaseObjectFromProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProxyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProxyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProxyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProxy/Fault/ServerSideException")
    })
    public void releaseObjectFromProxy(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param objectId
     * @param proxyId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AssociateObjectToProxyResponse>
     */
    @WebMethod(operationName = "associateObjectToProxy")
    @RequestWrapper(localName = "associateObjectToProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxy")
    @ResponseWrapper(localName = "associateObjectToProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxyResponse")
    public Response<AssociateObjectToProxyResponse> associateObjectToProxyAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param asyncHandler
     * @param objectId
     * @param proxyId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "associateObjectToProxy")
    @RequestWrapper(localName = "associateObjectToProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxy")
    @ResponseWrapper(localName = "associateObjectToProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxyResponse")
    public Future<?> associateObjectToProxyAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AssociateObjectToProxyResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param proxyClass
     * @param objectId
     * @param proxyId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "associateObjectToProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxy")
    @ResponseWrapper(localName = "associateObjectToProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectToProxyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectToProxyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectToProxyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectToProxy/Fault/ServerSideException")
    })
    public void associateObjectToProxy(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProxyPoolsResponse>
     */
    @WebMethod(operationName = "getProxyPools")
    @RequestWrapper(localName = "getProxyPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPools")
    @ResponseWrapper(localName = "getProxyPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPoolsResponse")
    public Response<GetProxyPoolsResponse> getProxyPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProxyPools")
    @RequestWrapper(localName = "getProxyPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPools")
    @ResponseWrapper(localName = "getProxyPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPoolsResponse")
    public Future<?> getProxyPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProxyPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProxyPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPools")
    @ResponseWrapper(localName = "getProxyPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxyPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxyPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxyPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxyPools/Fault/ServerSideException")
    })
    public List<RemotePool> getProxyPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProxiesInPoolResponse>
     */
    @WebMethod(operationName = "getProxiesInPool")
    @RequestWrapper(localName = "getProxiesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPool")
    @ResponseWrapper(localName = "getProxiesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPoolResponse")
    public Response<GetProxiesInPoolResponse> getProxiesInPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProxiesInPool")
    @RequestWrapper(localName = "getProxiesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPool")
    @ResponseWrapper(localName = "getProxiesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPoolResponse")
    public Future<?> getProxiesInPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProxiesInPoolResponse> asyncHandler);

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteInventoryProxy>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProxiesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPool")
    @ResponseWrapper(localName = "getProxiesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProxiesInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxiesInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxiesInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProxiesInPool/Fault/ServerSideException")
    })
    public List<RemoteInventoryProxy> getProxiesInPool(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllProxiesResponse>
     */
    @WebMethod(operationName = "getAllProxies")
    @RequestWrapper(localName = "getAllProxies", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxies")
    @ResponseWrapper(localName = "getAllProxiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxiesResponse")
    public Response<GetAllProxiesResponse> getAllProxiesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllProxies")
    @RequestWrapper(localName = "getAllProxies", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxies")
    @ResponseWrapper(localName = "getAllProxiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxiesResponse")
    public Future<?> getAllProxiesAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllProxiesResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteInventoryProxy>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllProxies", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxies")
    @ResponseWrapper(localName = "getAllProxiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProxiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProxiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProxiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProxies/Fault/ServerSideException")
    })
    public List<RemoteInventoryProxy> getAllProxies(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteProxyPoolResponse>
     */
    @WebMethod(operationName = "deleteProxyPool")
    @RequestWrapper(localName = "deleteProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPool")
    @ResponseWrapper(localName = "deleteProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPoolResponse")
    public Response<DeleteProxyPoolResponse> deleteProxyPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteProxyPool")
    @RequestWrapper(localName = "deleteProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPool")
    @ResponseWrapper(localName = "deleteProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPoolResponse")
    public Future<?> deleteProxyPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteProxyPoolResponse> asyncHandler);

    /**
     * 
     * @param proxyPoolId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPool")
    @ResponseWrapper(localName = "deleteProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxyPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxyPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxyPool/Fault/ServerSideException")
    })
    public void deleteProxyPool(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param proxyClass
     * @param proxyId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteProxyResponse>
     */
    @WebMethod(operationName = "deleteProxy")
    @RequestWrapper(localName = "deleteProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxy")
    @ResponseWrapper(localName = "deleteProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyResponse")
    public Response<DeleteProxyResponse> deleteProxyAsync(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param proxyClass
     * @param asyncHandler
     * @param proxyId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteProxy")
    @RequestWrapper(localName = "deleteProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxy")
    @ResponseWrapper(localName = "deleteProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyResponse")
    public Future<?> deleteProxyAsync(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteProxyResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param proxyClass
     * @param proxyId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxy")
    @ResponseWrapper(localName = "deleteProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProxyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProxy/Fault/ServerSideException")
    })
    public void deleteProxy(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSynchronizationGroupResponse>
     */
    @WebMethod(operationName = "deleteSynchronizationGroup")
    @RequestWrapper(localName = "deleteSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroup")
    @ResponseWrapper(localName = "deleteSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroupResponse")
    public Response<DeleteSynchronizationGroupResponse> deleteSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSynchronizationGroup")
    @RequestWrapper(localName = "deleteSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroup")
    @ResponseWrapper(localName = "deleteSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroupResponse")
    public Future<?> deleteSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSynchronizationGroupResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroup")
    @ResponseWrapper(localName = "deleteSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationGroup/Fault/ServerSideException")
    })
    public void deleteSynchronizationGroup(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @param proxyId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateProxyResponse>
     */
    @WebMethod(operationName = "updateProxy")
    @RequestWrapper(localName = "updateProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxy")
    @ResponseWrapper(localName = "updateProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyResponse")
    public Response<UpdateProxyResponse> updateProxyAsync(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @param asyncHandler
     * @param proxyId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateProxy")
    @RequestWrapper(localName = "updateProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxy")
    @ResponseWrapper(localName = "updateProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyResponse")
    public Future<?> updateProxyAsync(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateProxyResponse> asyncHandler);

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @param proxyId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxy")
    @ResponseWrapper(localName = "updateProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxy/Fault/ServerSideException")
    })
    public void updateProxy(
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "proxyId", targetNamespace = "")
        String proxyId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param proxyPoolId
     * @param attributeValue
     * @param attributeName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateProxyPoolResponse>
     */
    @WebMethod(operationName = "updateProxyPool")
    @RequestWrapper(localName = "updateProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPool")
    @ResponseWrapper(localName = "updateProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPoolResponse")
    public Response<UpdateProxyPoolResponse> updateProxyPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "attributeValue", targetNamespace = "")
        String attributeValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param proxyPoolId
     * @param attributeValue
     * @param attributeName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateProxyPool")
    @RequestWrapper(localName = "updateProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPool")
    @ResponseWrapper(localName = "updateProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPoolResponse")
    public Future<?> updateProxyPoolAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "attributeValue", targetNamespace = "")
        String attributeValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateProxyPoolResponse> asyncHandler);

    /**
     * 
     * @param proxyPoolId
     * @param attributeValue
     * @param attributeName
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateProxyPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPool")
    @ResponseWrapper(localName = "updateProxyPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProxyPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxyPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxyPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProxyPool/Fault/ServerSideException")
    })
    public void updateProxyPool(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "attributeValue", targetNamespace = "")
        String attributeValue,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSyncDataSourceConfigurationResponse>
     */
    @WebMethod(operationName = "getSyncDataSourceConfiguration")
    @RequestWrapper(localName = "getSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationResponse")
    public Response<GetSyncDataSourceConfigurationResponse> getSyncDataSourceConfigurationAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSyncDataSourceConfiguration")
    @RequestWrapper(localName = "getSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationResponse")
    public Future<?> getSyncDataSourceConfigurationAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSyncDataSourceConfigurationResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param objectId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteSynchronizationConfiguration
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfigurationRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfigurationResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfiguration/Fault/ServerSideException")
    })
    public RemoteSynchronizationConfiguration getSyncDataSourceConfiguration(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSyncDataSourceConfigurationsResponse>
     */
    @WebMethod(operationName = "getSyncDataSourceConfigurations")
    @RequestWrapper(localName = "getSyncDataSourceConfigurations", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurations")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationsResponse")
    public Response<GetSyncDataSourceConfigurationsResponse> getSyncDataSourceConfigurationsAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSyncDataSourceConfigurations")
    @RequestWrapper(localName = "getSyncDataSourceConfigurations", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurations")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationsResponse")
    public Future<?> getSyncDataSourceConfigurationsAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSyncDataSourceConfigurationsResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSynchronizationConfiguration>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSyncDataSourceConfigurations", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurations")
    @ResponseWrapper(localName = "getSyncDataSourceConfigurationsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSyncDataSourceConfigurationsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfigurationsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfigurationsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSyncDataSourceConfigurations/Fault/ServerSideException")
    })
    public List<RemoteSynchronizationConfiguration> getSyncDataSourceConfigurations(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopySyncDataSourceConfigurationResponse>
     */
    @WebMethod(operationName = "copySyncDataSourceConfiguration")
    @RequestWrapper(localName = "copySyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfiguration")
    @ResponseWrapper(localName = "copySyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfigurationResponse")
    public Response<CopySyncDataSourceConfigurationResponse> copySyncDataSourceConfigurationAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copySyncDataSourceConfiguration")
    @RequestWrapper(localName = "copySyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfiguration")
    @ResponseWrapper(localName = "copySyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfigurationResponse")
    public Future<?> copySyncDataSourceConfigurationAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopySyncDataSourceConfigurationResponse> asyncHandler);

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "copySyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfiguration")
    @ResponseWrapper(localName = "copySyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopySyncDataSourceConfigurationResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySyncDataSourceConfigurationRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySyncDataSourceConfigurationResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copySyncDataSourceConfiguration/Fault/ServerSideException")
    })
    public void copySyncDataSourceConfiguration(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param syncDataSourceConfiguration
     * @param newSyncGroupId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveSyncDataSourceConfigurationResponse>
     */
    @WebMethod(operationName = "moveSyncDataSourceConfiguration")
    @RequestWrapper(localName = "moveSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "moveSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfigurationResponse")
    public Response<MoveSyncDataSourceConfigurationResponse> moveSyncDataSourceConfigurationAsync(
        @WebParam(name = "newSyncGroupId", targetNamespace = "")
        long newSyncGroupId,
        @WebParam(name = "syncDataSourceConfiguration", targetNamespace = "")
        List<Long> syncDataSourceConfiguration,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param syncDataSourceConfiguration
     * @param newSyncGroupId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveSyncDataSourceConfiguration")
    @RequestWrapper(localName = "moveSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "moveSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfigurationResponse")
    public Future<?> moveSyncDataSourceConfigurationAsync(
        @WebParam(name = "newSyncGroupId", targetNamespace = "")
        long newSyncGroupId,
        @WebParam(name = "syncDataSourceConfiguration", targetNamespace = "")
        List<Long> syncDataSourceConfiguration,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveSyncDataSourceConfigurationResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param syncDataSourceConfiguration
     * @param newSyncGroupId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "moveSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveSyncDataSourceConfigurationResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSyncDataSourceConfigurationRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSyncDataSourceConfigurationResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveSyncDataSourceConfiguration/Fault/ServerSideException")
    })
    public void moveSyncDataSourceConfiguration(
        @WebParam(name = "newSyncGroupId", targetNamespace = "")
        long newSyncGroupId,
        @WebParam(name = "syncDataSourceConfiguration", targetNamespace = "")
        List<Long> syncDataSourceConfiguration,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroupResponse>
     */
    @WebMethod(operationName = "releaseSyncDataSourceConfigFromSyncGroup")
    @RequestWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroup")
    @ResponseWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroupResponse")
    public Response<ReleaseSyncDataSourceConfigFromSyncGroupResponse> releaseSyncDataSourceConfigFromSyncGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseSyncDataSourceConfigFromSyncGroup")
    @RequestWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroup")
    @ResponseWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroupResponse")
    public Future<?> releaseSyncDataSourceConfigFromSyncGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseSyncDataSourceConfigFromSyncGroupResponse> asyncHandler);

    /**
     * 
     * @param syncDataSourceConfigurationId
     * @param syncGroupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroup")
    @ResponseWrapper(localName = "releaseSyncDataSourceConfigFromSyncGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSyncDataSourceConfigFromSyncGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSyncDataSourceConfigFromSyncGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSyncDataSourceConfigFromSyncGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSyncDataSourceConfigFromSyncGroup/Fault/ServerSideException")
    })
    public void releaseSyncDataSourceConfigFromSyncGroup(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncDataSourceConfigurationId", targetNamespace = "")
        List<Long> syncDataSourceConfigurationId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param syncDataSourceConfigId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfigResponse>
     */
    @WebMethod(operationName = "deleteSynchronizationDataSourceConfig")
    @RequestWrapper(localName = "deleteSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "deleteSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfigResponse")
    public Response<DeleteSynchronizationDataSourceConfigResponse> deleteSynchronizationDataSourceConfigAsync(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param syncDataSourceConfigId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSynchronizationDataSourceConfig")
    @RequestWrapper(localName = "deleteSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "deleteSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfigResponse")
    public Future<?> deleteSynchronizationDataSourceConfigAsync(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSynchronizationDataSourceConfigResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param syncDataSourceConfigId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "deleteSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSynchronizationDataSourceConfigResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationDataSourceConfigRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationDataSourceConfigResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSynchronizationDataSourceConfig/Fault/ServerSideException")
    })
    public void deleteSynchronizationDataSourceConfig(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param customerClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateCustomerResponse>
     */
    @WebMethod(operationName = "createCustomer")
    @RequestWrapper(localName = "createCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomer")
    @ResponseWrapper(localName = "createCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerResponse")
    public Response<CreateCustomerResponse> createCustomerAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param customerClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createCustomer")
    @RequestWrapper(localName = "createCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomer")
    @ResponseWrapper(localName = "createCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerResponse")
    public Future<?> createCustomerAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateCustomerResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param customerClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomer")
    @ResponseWrapper(localName = "createCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomer/Fault/ServerSideException")
    })
    public String createCustomer(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectToServiceResponse>
     */
    @WebMethod(operationName = "relateObjectToService")
    @RequestWrapper(localName = "relateObjectToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToService")
    @ResponseWrapper(localName = "relateObjectToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToServiceResponse")
    public Response<RelateObjectToServiceResponse> relateObjectToServiceAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectToService")
    @RequestWrapper(localName = "relateObjectToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToService")
    @ResponseWrapper(localName = "relateObjectToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToServiceResponse")
    public Future<?> relateObjectToServiceAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectToServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToService")
    @ResponseWrapper(localName = "relateObjectToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToService/Fault/ServerSideException")
    })
    public void relateObjectToService(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param serviceClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateServiceResponse>
     */
    @WebMethod(operationName = "createService")
    @RequestWrapper(localName = "createService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateService")
    @ResponseWrapper(localName = "createServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServiceResponse")
    public Response<CreateServiceResponse> createServiceAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param serviceClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createService")
    @RequestWrapper(localName = "createService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateService")
    @ResponseWrapper(localName = "createServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServiceResponse")
    public Future<?> createServiceAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateServiceResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param serviceClass
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateService")
    @ResponseWrapper(localName = "createServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createService/Fault/ServerSideException")
    })
    public String createService(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteCostumerResponse>
     */
    @WebMethod(operationName = "deleteCostumer")
    @RequestWrapper(localName = "deleteCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumer")
    @ResponseWrapper(localName = "deleteCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumerResponse")
    public Response<DeleteCostumerResponse> deleteCostumerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteCostumer")
    @RequestWrapper(localName = "deleteCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumer")
    @ResponseWrapper(localName = "deleteCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumerResponse")
    public Future<?> deleteCostumerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteCostumerResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumer")
    @ResponseWrapper(localName = "deleteCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCostumerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCostumerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCostumerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCostumer/Fault/ServerSideException")
    })
    public void deleteCostumer(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteServicePoolResponse>
     */
    @WebMethod(operationName = "deleteServicePool")
    @RequestWrapper(localName = "deleteServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePool")
    @ResponseWrapper(localName = "deleteServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePoolResponse")
    public Response<DeleteServicePoolResponse> deleteServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteServicePool")
    @RequestWrapper(localName = "deleteServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePool")
    @ResponseWrapper(localName = "deleteServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePoolResponse")
    public Future<?> deleteServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteServicePoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePool")
    @ResponseWrapper(localName = "deleteServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServicePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteServicePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteServicePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteServicePool/Fault/ServerSideException")
    })
    public void deleteServicePool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseObjectFromServiceResponse>
     */
    @WebMethod(operationName = "releaseObjectFromService")
    @RequestWrapper(localName = "releaseObjectFromService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromService")
    @ResponseWrapper(localName = "releaseObjectFromServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromServiceResponse")
    public Response<ReleaseObjectFromServiceResponse> releaseObjectFromServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseObjectFromService")
    @RequestWrapper(localName = "releaseObjectFromService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromService")
    @ResponseWrapper(localName = "releaseObjectFromServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromServiceResponse")
    public Future<?> releaseObjectFromServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseObjectFromServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseObjectFromService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromService")
    @ResponseWrapper(localName = "releaseObjectFromServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromService/Fault/ServerSideException")
    })
    public void releaseObjectFromService(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllCustomersResponse>
     */
    @WebMethod(operationName = "getAllCustomers")
    @RequestWrapper(localName = "getAllCustomers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomers")
    @ResponseWrapper(localName = "getAllCustomersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomersResponse")
    public Response<GetAllCustomersResponse> getAllCustomersAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllCustomers")
    @RequestWrapper(localName = "getAllCustomers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomers")
    @ResponseWrapper(localName = "getAllCustomersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomersResponse")
    public Future<?> getAllCustomersAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllCustomersResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCustomers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomers")
    @ResponseWrapper(localName = "getAllCustomersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllCustomersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllCustomersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllCustomersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllCustomers/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getAllCustomers(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllServicesResponse>
     */
    @WebMethod(operationName = "getAllServices")
    @RequestWrapper(localName = "getAllServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServices")
    @ResponseWrapper(localName = "getAllServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServicesResponse")
    public Response<GetAllServicesResponse> getAllServicesAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllServices")
    @RequestWrapper(localName = "getAllServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServices")
    @ResponseWrapper(localName = "getAllServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServicesResponse")
    public Future<?> getAllServicesAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllServicesResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServices")
    @ResponseWrapper(localName = "getAllServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllServicesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllServicesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllServicesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllServices/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getAllServices(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteServiceResponse>
     */
    @WebMethod(operationName = "deleteService")
    @RequestWrapper(localName = "deleteService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteService")
    @ResponseWrapper(localName = "deleteServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServiceResponse")
    public Response<DeleteServiceResponse> deleteServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteService")
    @RequestWrapper(localName = "deleteService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteService")
    @ResponseWrapper(localName = "deleteServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServiceResponse")
    public Future<?> deleteServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteService")
    @ResponseWrapper(localName = "deleteServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteService/Fault/ServerSideException")
    })
    public void deleteService(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCustomerResponse>
     */
    @WebMethod(operationName = "getCustomer")
    @RequestWrapper(localName = "getCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomer")
    @ResponseWrapper(localName = "getCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerResponse")
    public Response<GetCustomerResponse> getCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCustomer")
    @RequestWrapper(localName = "getCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomer")
    @ResponseWrapper(localName = "getCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerResponse")
    public Future<?> getCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCustomerResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomer")
    @ResponseWrapper(localName = "getCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomer/Fault/ServerSideException")
    })
    public RemoteObject getCustomer(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteCustomerPoolResponse>
     */
    @WebMethod(operationName = "deleteCustomerPool")
    @RequestWrapper(localName = "deleteCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPool")
    @ResponseWrapper(localName = "deleteCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPoolResponse")
    public Response<DeleteCustomerPoolResponse> deleteCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteCustomerPool")
    @RequestWrapper(localName = "deleteCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPool")
    @ResponseWrapper(localName = "deleteCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPoolResponse")
    public Future<?> deleteCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteCustomerPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPool")
    @ResponseWrapper(localName = "deleteCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteCustomerPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCustomerPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCustomerPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteCustomerPool/Fault/ServerSideException")
    })
    public void deleteCustomerPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateServicePoolResponse>
     */
    @WebMethod(operationName = "createServicePool")
    @RequestWrapper(localName = "createServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePool")
    @ResponseWrapper(localName = "createServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePoolResponse")
    public Response<CreateServicePoolResponse> createServicePoolAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createServicePool")
    @RequestWrapper(localName = "createServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePool")
    @ResponseWrapper(localName = "createServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePoolResponse")
    public Future<?> createServicePoolAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateServicePoolResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePool")
    @ResponseWrapper(localName = "createServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateServicePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createServicePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createServicePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createServicePool/Fault/ServerSideException")
    })
    public String createServicePool(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateCustomerPoolResponse>
     */
    @WebMethod(operationName = "createCustomerPool")
    @RequestWrapper(localName = "createCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPool")
    @ResponseWrapper(localName = "createCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPoolResponse")
    public Response<CreateCustomerPoolResponse> createCustomerPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createCustomerPool")
    @RequestWrapper(localName = "createCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPool")
    @ResponseWrapper(localName = "createCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPoolResponse")
    public Future<?> createCustomerPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateCustomerPoolResponse> asyncHandler);

    /**
     * 
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPool")
    @ResponseWrapper(localName = "createCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateCustomerPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomerPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomerPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createCustomerPool/Fault/ServerSideException")
    })
    public String createCustomerPool(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCustomerPoolsResponse>
     */
    @WebMethod(operationName = "getCustomerPools")
    @RequestWrapper(localName = "getCustomerPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPools")
    @ResponseWrapper(localName = "getCustomerPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolsResponse")
    public Response<GetCustomerPoolsResponse> getCustomerPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCustomerPools")
    @RequestWrapper(localName = "getCustomerPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPools")
    @ResponseWrapper(localName = "getCustomerPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolsResponse")
    public Future<?> getCustomerPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCustomerPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomerPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPools")
    @ResponseWrapper(localName = "getCustomerPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPools/Fault/ServerSideException")
    })
    public List<RemotePool> getCustomerPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCustomerPoolResponse>
     */
    @WebMethod(operationName = "getCustomerPool")
    @RequestWrapper(localName = "getCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPool")
    @ResponseWrapper(localName = "getCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolResponse")
    public Response<GetCustomerPoolResponse> getCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCustomerPool")
    @RequestWrapper(localName = "getCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPool")
    @ResponseWrapper(localName = "getCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolResponse")
    public Future<?> getCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCustomerPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPool")
    @ResponseWrapper(localName = "getCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomerPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomerPool/Fault/ServerSideException")
    })
    public RemotePool getCustomerPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateCustomerPoolResponse>
     */
    @WebMethod(operationName = "updateCustomerPool")
    @RequestWrapper(localName = "updateCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPool")
    @ResponseWrapper(localName = "updateCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPoolResponse")
    public Response<UpdateCustomerPoolResponse> updateCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateCustomerPool")
    @RequestWrapper(localName = "updateCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPool")
    @ResponseWrapper(localName = "updateCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPoolResponse")
    public Future<?> updateCustomerPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateCustomerPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCustomerPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPool")
    @ResponseWrapper(localName = "updateCustomerPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomerPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomerPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomerPool/Fault/ServerSideException")
    })
    public void updateCustomerPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCustomersInPoolResponse>
     */
    @WebMethod(operationName = "getCustomersInPool")
    @RequestWrapper(localName = "getCustomersInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPool")
    @ResponseWrapper(localName = "getCustomersInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPoolResponse")
    public Response<GetCustomersInPoolResponse> getCustomersInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCustomersInPool")
    @RequestWrapper(localName = "getCustomersInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPool")
    @ResponseWrapper(localName = "getCustomersInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPoolResponse")
    public Future<?> getCustomersInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCustomersInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCustomersInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPool")
    @ResponseWrapper(localName = "getCustomersInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCustomersInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomersInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomersInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCustomersInPool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getCustomersInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param attributes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateCustomerResponse>
     */
    @WebMethod(operationName = "updateCustomer")
    @RequestWrapper(localName = "updateCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomer")
    @ResponseWrapper(localName = "updateCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerResponse")
    public Response<UpdateCustomerResponse> updateCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param attributes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateCustomer")
    @RequestWrapper(localName = "updateCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomer")
    @ResponseWrapper(localName = "updateCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerResponse")
    public Future<?> updateCustomerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateCustomerResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param attributes
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCustomer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomer")
    @ResponseWrapper(localName = "updateCustomerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateCustomerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateCustomer/Fault/ServerSideException")
    })
    public void updateCustomer(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param servicePoolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetServicePoolsInCostumerResponse>
     */
    @WebMethod(operationName = "getServicePoolsInCostumer")
    @RequestWrapper(localName = "getServicePoolsInCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumer")
    @ResponseWrapper(localName = "getServicePoolsInCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumerResponse")
    public Response<GetServicePoolsInCostumerResponse> getServicePoolsInCostumerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "servicePoolClass", targetNamespace = "")
        String servicePoolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param servicePoolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getServicePoolsInCostumer")
    @RequestWrapper(localName = "getServicePoolsInCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumer")
    @ResponseWrapper(localName = "getServicePoolsInCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumerResponse")
    public Future<?> getServicePoolsInCostumerAsync(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "servicePoolClass", targetNamespace = "")
        String servicePoolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServicePoolsInCostumerResponse> asyncHandler);

    /**
     * 
     * @param customerClass
     * @param customerId
     * @param servicePoolClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getServicePoolsInCostumer", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumer")
    @ResponseWrapper(localName = "getServicePoolsInCostumerResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolsInCostumerResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePoolsInCostumerRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePoolsInCostumerResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePoolsInCostumer/Fault/ServerSideException")
    })
    public List<RemotePool> getServicePoolsInCostumer(
        @WebParam(name = "customerClass", targetNamespace = "")
        String customerClass,
        @WebParam(name = "customerId", targetNamespace = "")
        String customerId,
        @WebParam(name = "servicePoolClass", targetNamespace = "")
        String servicePoolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetServicePoolResponse>
     */
    @WebMethod(operationName = "getServicePool")
    @RequestWrapper(localName = "getServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePool")
    @ResponseWrapper(localName = "getServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolResponse")
    public Response<GetServicePoolResponse> getServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getServicePool")
    @RequestWrapper(localName = "getServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePool")
    @ResponseWrapper(localName = "getServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolResponse")
    public Future<?> getServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServicePoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePool")
    @ResponseWrapper(localName = "getServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicePool/Fault/ServerSideException")
    })
    public RemotePool getServicePool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateServicePoolResponse>
     */
    @WebMethod(operationName = "updateServicePool")
    @RequestWrapper(localName = "updateServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePool")
    @ResponseWrapper(localName = "updateServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePoolResponse")
    public Response<UpdateServicePoolResponse> updateServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateServicePool")
    @RequestWrapper(localName = "updateServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePool")
    @ResponseWrapper(localName = "updateServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePoolResponse")
    public Future<?> updateServicePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateServicePoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateServicePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePool")
    @ResponseWrapper(localName = "updateServicePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServicePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateServicePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateServicePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateServicePool/Fault/ServerSideException")
    })
    public void updateServicePool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetServicesInPoolResponse>
     */
    @WebMethod(operationName = "getServicesInPool")
    @RequestWrapper(localName = "getServicesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPool")
    @ResponseWrapper(localName = "getServicesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPoolResponse")
    public Response<GetServicesInPoolResponse> getServicesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getServicesInPool")
    @RequestWrapper(localName = "getServicesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPool")
    @ResponseWrapper(localName = "getServicesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPoolResponse")
    public Future<?> getServicesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetServicesInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param className
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getServicesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPool")
    @ResponseWrapper(localName = "getServicesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetServicesInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicesInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicesInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getServicesInPool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getServicesInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param attributes
     * @param sessionId
     * @param serviceId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateServiceResponse>
     */
    @WebMethod(operationName = "updateService")
    @RequestWrapper(localName = "updateService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateService")
    @ResponseWrapper(localName = "updateServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServiceResponse")
    public Response<UpdateServiceResponse> updateServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param attributes
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateService")
    @RequestWrapper(localName = "updateService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateService")
    @ResponseWrapper(localName = "updateServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServiceResponse")
    public Future<?> updateServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param attributes
     * @param sessionId
     * @param serviceId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateService")
    @ResponseWrapper(localName = "updateServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateService/Fault/ServerSideException")
    })
    public void updateService(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectsToServiceResponse>
     */
    @WebMethod(operationName = "relateObjectsToService")
    @RequestWrapper(localName = "relateObjectsToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToService")
    @ResponseWrapper(localName = "relateObjectsToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToServiceResponse")
    public Response<RelateObjectsToServiceResponse> relateObjectsToServiceAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectsToService")
    @RequestWrapper(localName = "relateObjectsToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToService")
    @ResponseWrapper(localName = "relateObjectsToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToServiceResponse")
    public Future<?> relateObjectsToServiceAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectsToServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param objectClass
     * @param sessionId
     * @param serviceId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectsToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToService")
    @ResponseWrapper(localName = "relateObjectsToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToService/Fault/ServerSideException")
    })
    public void relateObjectsToService(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsRelatedToServiceResponse>
     */
    @WebMethod(operationName = "getObjectsRelatedToService")
    @RequestWrapper(localName = "getObjectsRelatedToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToService")
    @ResponseWrapper(localName = "getObjectsRelatedToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToServiceResponse")
    public Response<GetObjectsRelatedToServiceResponse> getObjectsRelatedToServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsRelatedToService")
    @RequestWrapper(localName = "getObjectsRelatedToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToService")
    @ResponseWrapper(localName = "getObjectsRelatedToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToServiceResponse")
    public Future<?> getObjectsRelatedToServiceAsync(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsRelatedToServiceResponse> asyncHandler);

    /**
     * 
     * @param serviceClass
     * @param sessionId
     * @param serviceId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsRelatedToService", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToService")
    @ResponseWrapper(localName = "getObjectsRelatedToServiceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsRelatedToServiceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsRelatedToServiceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsRelatedToServiceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsRelatedToService/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectsRelatedToService(
        @WebParam(name = "serviceClass", targetNamespace = "")
        String serviceClass,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPhysicalPathResponse>
     */
    @WebMethod(operationName = "getPhysicalPath")
    @RequestWrapper(localName = "getPhysicalPath", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPath")
    @ResponseWrapper(localName = "getPhysicalPathResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPathResponse")
    public Response<GetPhysicalPathResponse> getPhysicalPathAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPhysicalPath")
    @RequestWrapper(localName = "getPhysicalPath", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPath")
    @ResponseWrapper(localName = "getPhysicalPathResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPathResponse")
    public Future<?> getPhysicalPathAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPhysicalPathResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPhysicalPath", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPath")
    @ResponseWrapper(localName = "getPhysicalPathResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalPathResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalPathRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalPathResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalPath/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getPhysicalPath(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param name
     * @param connectionClass
     * @param bObjectClass
     * @param sessionId
     * @param templateId
     * @param bObjectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePhysicalConnectionResponse>
     */
    @WebMethod(operationName = "createPhysicalConnection")
    @RequestWrapper(localName = "createPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnection")
    @ResponseWrapper(localName = "createPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionResponse")
    public Response<CreatePhysicalConnectionResponse> createPhysicalConnectionAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        String bObjectId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param name
     * @param connectionClass
     * @param bObjectClass
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @param bObjectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPhysicalConnection")
    @RequestWrapper(localName = "createPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnection")
    @ResponseWrapper(localName = "createPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionResponse")
    public Future<?> createPhysicalConnectionAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        String bObjectId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePhysicalConnectionResponse> asyncHandler);

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param name
     * @param connectionClass
     * @param bObjectClass
     * @param sessionId
     * @param templateId
     * @param bObjectId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnection")
    @ResponseWrapper(localName = "createPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnectionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnectionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnection/Fault/ServerSideException")
    })
    public String createPhysicalConnection(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        String bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        String bObjectId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPhysicalTreeResponse>
     */
    @WebMethod(operationName = "getPhysicalTree")
    @RequestWrapper(localName = "getPhysicalTree", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTree")
    @ResponseWrapper(localName = "getPhysicalTreeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTreeResponse")
    public Response<GetPhysicalTreeResponse> getPhysicalTreeAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPhysicalTree")
    @RequestWrapper(localName = "getPhysicalTree", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTree")
    @ResponseWrapper(localName = "getPhysicalTreeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTreeResponse")
    public Future<?> getPhysicalTreeAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPhysicalTreeResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectRelatedObjects
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPhysicalTree", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTree")
    @ResponseWrapper(localName = "getPhysicalTreeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalTreeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalTreeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalTreeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalTree/Fault/ServerSideException")
    })
    public RemoteObjectRelatedObjects getPhysicalTree(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeletePhysicalConnectionResponse>
     */
    @WebMethod(operationName = "deletePhysicalConnection")
    @RequestWrapper(localName = "deletePhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnection")
    @ResponseWrapper(localName = "deletePhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnectionResponse")
    public Response<DeletePhysicalConnectionResponse> deletePhysicalConnectionAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deletePhysicalConnection")
    @RequestWrapper(localName = "deletePhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnection")
    @ResponseWrapper(localName = "deletePhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnectionResponse")
    public Future<?> deletePhysicalConnectionAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeletePhysicalConnectionResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deletePhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnection")
    @ResponseWrapper(localName = "deletePhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeletePhysicalConnectionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePhysicalConnectionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePhysicalConnectionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deletePhysicalConnection/Fault/ServerSideException")
    })
    public void deletePhysicalConnection(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContractPoolResponse>
     */
    @WebMethod(operationName = "getContractPool")
    @RequestWrapper(localName = "getContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPool")
    @ResponseWrapper(localName = "getContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolResponse")
    public Response<GetContractPoolResponse> getContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContractPool")
    @RequestWrapper(localName = "getContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPool")
    @ResponseWrapper(localName = "getContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolResponse")
    public Future<?> getContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContractPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPool")
    @ResponseWrapper(localName = "getContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPool/Fault/ServerSideException")
    })
    public RemotePool getContractPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param attributes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateContractResponse>
     */
    @WebMethod(operationName = "updateContract")
    @RequestWrapper(localName = "updateContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContract")
    @ResponseWrapper(localName = "updateContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractResponse")
    public Response<UpdateContractResponse> updateContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param attributes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateContract")
    @RequestWrapper(localName = "updateContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContract")
    @ResponseWrapper(localName = "updateContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractResponse")
    public Future<?> updateContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param attributes
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContract")
    @ResponseWrapper(localName = "updateContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContract/Fault/ServerSideException")
    })
    public void updateContract(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteContractResponse>
     */
    @WebMethod(operationName = "deleteContract")
    @RequestWrapper(localName = "deleteContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContract")
    @ResponseWrapper(localName = "deleteContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractResponse")
    public Response<DeleteContractResponse> deleteContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteContract")
    @RequestWrapper(localName = "deleteContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContract")
    @ResponseWrapper(localName = "deleteContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractResponse")
    public Future<?> deleteContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContract")
    @ResponseWrapper(localName = "deleteContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContract/Fault/ServerSideException")
    })
    public void deleteContract(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateContractPoolResponse>
     */
    @WebMethod(operationName = "createContractPool")
    @RequestWrapper(localName = "createContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPool")
    @ResponseWrapper(localName = "createContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPoolResponse")
    public Response<CreateContractPoolResponse> createContractPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createContractPool")
    @RequestWrapper(localName = "createContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPool")
    @ResponseWrapper(localName = "createContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPoolResponse")
    public Future<?> createContractPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateContractPoolResponse> asyncHandler);

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPool")
    @ResponseWrapper(localName = "createContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContractPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContractPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContractPool/Fault/ServerSideException")
    })
    public String createContractPool(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateContractPoolResponse>
     */
    @WebMethod(operationName = "updateContractPool")
    @RequestWrapper(localName = "updateContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPool")
    @ResponseWrapper(localName = "updateContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPoolResponse")
    public Response<UpdateContractPoolResponse> updateContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateContractPool")
    @RequestWrapper(localName = "updateContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPool")
    @ResponseWrapper(localName = "updateContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPoolResponse")
    public Future<?> updateContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateContractPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPool")
    @ResponseWrapper(localName = "updateContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateContractPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContractPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContractPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateContractPool/Fault/ServerSideException")
    })
    public void updateContractPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteContractPoolResponse>
     */
    @WebMethod(operationName = "deleteContractPool")
    @RequestWrapper(localName = "deleteContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPool")
    @ResponseWrapper(localName = "deleteContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPoolResponse")
    public Response<DeleteContractPoolResponse> deleteContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteContractPool")
    @RequestWrapper(localName = "deleteContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPool")
    @ResponseWrapper(localName = "deleteContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPoolResponse")
    public Future<?> deleteContractPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteContractPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteContractPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPool")
    @ResponseWrapper(localName = "deleteContractPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteContractPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContractPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContractPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteContractPool/Fault/ServerSideException")
    })
    public void deleteContractPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContractPoolsResponse>
     */
    @WebMethod(operationName = "getContractPools")
    @RequestWrapper(localName = "getContractPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPools")
    @ResponseWrapper(localName = "getContractPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolsResponse")
    public Response<GetContractPoolsResponse> getContractPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContractPools")
    @RequestWrapper(localName = "getContractPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPools")
    @ResponseWrapper(localName = "getContractPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolsResponse")
    public Future<?> getContractPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContractPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContractPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPools")
    @ResponseWrapper(localName = "getContractPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractPools/Fault/ServerSideException")
    })
    public List<RemotePool> getContractPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateContractResponse>
     */
    @WebMethod(operationName = "createContract")
    @RequestWrapper(localName = "createContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContract")
    @ResponseWrapper(localName = "createContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractResponse")
    public Response<CreateContractResponse> createContractAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createContract")
    @RequestWrapper(localName = "createContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContract")
    @ResponseWrapper(localName = "createContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractResponse")
    public Future<?> createContractAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param attributeNames
     * @param poolId
     * @param attributeValues
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContract")
    @ResponseWrapper(localName = "createContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createContract/Fault/ServerSideException")
    })
    public String createContract(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContractResponse>
     */
    @WebMethod(operationName = "getContract")
    @RequestWrapper(localName = "getContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContract")
    @ResponseWrapper(localName = "getContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResponse")
    public Response<GetContractResponse> getContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContract")
    @RequestWrapper(localName = "getContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContract")
    @ResponseWrapper(localName = "getContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResponse")
    public Future<?> getContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContract")
    @ResponseWrapper(localName = "getContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContract/Fault/ServerSideException")
    })
    public RemoteObject getContract(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllContractsResponse>
     */
    @WebMethod(operationName = "getAllContracts")
    @RequestWrapper(localName = "getAllContracts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContracts")
    @ResponseWrapper(localName = "getAllContractsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContractsResponse")
    public Response<GetAllContractsResponse> getAllContractsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllContracts")
    @RequestWrapper(localName = "getAllContracts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContracts")
    @ResponseWrapper(localName = "getAllContractsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContractsResponse")
    public Future<?> getAllContractsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllContractsResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllContracts", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContracts")
    @ResponseWrapper(localName = "getAllContractsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllContractsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllContractsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllContractsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllContracts/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getAllContracts(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContractsInPoolResponse>
     */
    @WebMethod(operationName = "getContractsInPool")
    @RequestWrapper(localName = "getContractsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPool")
    @ResponseWrapper(localName = "getContractsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPoolResponse")
    public Response<GetContractsInPoolResponse> getContractsInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContractsInPool")
    @RequestWrapper(localName = "getContractsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPool")
    @ResponseWrapper(localName = "getContractsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPoolResponse")
    public Future<?> getContractsInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContractsInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContractsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPool")
    @ResponseWrapper(localName = "getContractsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractsInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractsInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractsInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractsInPool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getContractsInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectsToContractResponse>
     */
    @WebMethod(operationName = "relateObjectsToContract")
    @RequestWrapper(localName = "relateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContract")
    @ResponseWrapper(localName = "relateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContractResponse")
    public Response<RelateObjectsToContractResponse> relateObjectsToContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectsToContract")
    @RequestWrapper(localName = "relateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContract")
    @ResponseWrapper(localName = "relateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContractResponse")
    public Future<?> relateObjectsToContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectsToContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContract")
    @ResponseWrapper(localName = "relateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToContract/Fault/ServerSideException")
    })
    public void relateObjectsToContract(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectToContractResponse>
     */
    @WebMethod(operationName = "relateObjectToContract")
    @RequestWrapper(localName = "relateObjectToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContract")
    @ResponseWrapper(localName = "relateObjectToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContractResponse")
    public Response<RelateObjectToContractResponse> relateObjectToContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectToContract")
    @RequestWrapper(localName = "relateObjectToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContract")
    @ResponseWrapper(localName = "relateObjectToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContractResponse")
    public Future<?> relateObjectToContractAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectToContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContract")
    @ResponseWrapper(localName = "relateObjectToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToContract/Fault/ServerSideException")
    })
    public void relateObjectToContract(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseObjectFromContractResponse>
     */
    @WebMethod(operationName = "releaseObjectFromContract")
    @RequestWrapper(localName = "releaseObjectFromContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContract")
    @ResponseWrapper(localName = "releaseObjectFromContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContractResponse")
    public Response<ReleaseObjectFromContractResponse> releaseObjectFromContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseObjectFromContract")
    @RequestWrapper(localName = "releaseObjectFromContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContract")
    @ResponseWrapper(localName = "releaseObjectFromContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContractResponse")
    public Future<?> releaseObjectFromContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseObjectFromContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseObjectFromContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContract")
    @ResponseWrapper(localName = "releaseObjectFromContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromContract/Fault/ServerSideException")
    })
    public void releaseObjectFromContract(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContractResourcesResponse>
     */
    @WebMethod(operationName = "getContractResources")
    @RequestWrapper(localName = "getContractResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResources")
    @ResponseWrapper(localName = "getContractResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResourcesResponse")
    public Response<GetContractResourcesResponse> getContractResourcesAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContractResources")
    @RequestWrapper(localName = "getContractResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResources")
    @ResponseWrapper(localName = "getContractResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResourcesResponse")
    public Future<?> getContractResourcesAsync(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContractResourcesResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param contractId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContractResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResources")
    @ResponseWrapper(localName = "getContractResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContractResourcesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractResourcesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractResourcesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContractResources/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getContractResources(
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param className
     * @param attributes
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSubnetResponse>
     */
    @WebMethod(operationName = "createSubnet")
    @RequestWrapper(localName = "createSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnet")
    @ResponseWrapper(localName = "createSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetResponse")
    public Response<CreateSubnetResponse> createSubnetAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param className
     * @param attributes
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSubnet")
    @RequestWrapper(localName = "createSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnet")
    @ResponseWrapper(localName = "createSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetResponse")
    public Future<?> createSubnetAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSubnetResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param className
     * @param attributes
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnet")
    @ResponseWrapper(localName = "createSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnetRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnetResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnet/Fault/ServerSideException")
    })
    public String createSubnet(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSDHTransportLinkResponse>
     */
    @WebMethod(operationName = "createSDHTransportLink")
    @RequestWrapper(localName = "createSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLink")
    @ResponseWrapper(localName = "createSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLinkResponse")
    public Response<CreateSDHTransportLinkResponse> createSDHTransportLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param sessionId
     * @param asyncHandler
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSDHTransportLink")
    @RequestWrapper(localName = "createSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLink")
    @ResponseWrapper(localName = "createSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLinkResponse")
    public Future<?> createSDHTransportLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSDHTransportLinkResponse> asyncHandler);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLink")
    @ResponseWrapper(localName = "createSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTransportLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTransportLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTransportLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTransportLink/Fault/ServerSideException")
    })
    public String createSDHTransportLink(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSDHContainerLinkResponse>
     */
    @WebMethod(operationName = "createSDHContainerLink")
    @RequestWrapper(localName = "createSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLink")
    @ResponseWrapper(localName = "createSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLinkResponse")
    public Response<CreateSDHContainerLinkResponse> createSDHContainerLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param asyncHandler
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSDHContainerLink")
    @RequestWrapper(localName = "createSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLink")
    @ResponseWrapper(localName = "createSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLinkResponse")
    public Future<?> createSDHContainerLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSDHContainerLinkResponse> asyncHandler);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLink")
    @ResponseWrapper(localName = "createSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHContainerLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHContainerLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHContainerLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHContainerLink/Fault/ServerSideException")
    })
    public String createSDHContainerLink(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSDHTributaryLinkResponse>
     */
    @WebMethod(operationName = "createSDHTributaryLink")
    @RequestWrapper(localName = "createSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLink")
    @ResponseWrapper(localName = "createSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLinkResponse")
    public Response<CreateSDHTributaryLinkResponse> createSDHTributaryLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param asyncHandler
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSDHTributaryLink")
    @RequestWrapper(localName = "createSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLink")
    @ResponseWrapper(localName = "createSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLinkResponse")
    public Future<?> createSDHTributaryLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSDHTributaryLinkResponse> asyncHandler);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param linkType
     * @param positions
     * @param sessionId
     * @param idEndpointA
     * @param defaultName
     * @param idEndpointB
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLink")
    @ResponseWrapper(localName = "createSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSDHTributaryLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTributaryLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTributaryLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSDHTributaryLink/Fault/ServerSideException")
    })
    public String createSDHTributaryLink(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "linkType", targetNamespace = "")
        String linkType,
        @WebParam(name = "positions", targetNamespace = "")
        List<RemoteSDHPosition> positions,
        @WebParam(name = "defaultName", targetNamespace = "")
        String defaultName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param forceDelete
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSDHTransportLinkResponse>
     */
    @WebMethod(operationName = "deleteSDHTransportLink")
    @RequestWrapper(localName = "deleteSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLink")
    @ResponseWrapper(localName = "deleteSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLinkResponse")
    public Response<DeleteSDHTransportLinkResponse> deleteSDHTransportLinkAsync(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param forceDelete
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSDHTransportLink")
    @RequestWrapper(localName = "deleteSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLink")
    @ResponseWrapper(localName = "deleteSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLinkResponse")
    public Future<?> deleteSDHTransportLinkAsync(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSDHTransportLinkResponse> asyncHandler);

    /**
     * 
     * @param forceDelete
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSDHTransportLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLink")
    @ResponseWrapper(localName = "deleteSDHTransportLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTransportLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTransportLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTransportLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTransportLink/Fault/ServerSideException")
    })
    public void deleteSDHTransportLink(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param containerLinkId
     * @param forceDelete
     * @param containerLinkClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSDHContainerLinkResponse>
     */
    @WebMethod(operationName = "deleteSDHContainerLink")
    @RequestWrapper(localName = "deleteSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLink")
    @ResponseWrapper(localName = "deleteSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLinkResponse")
    public Response<DeleteSDHContainerLinkResponse> deleteSDHContainerLinkAsync(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param containerLinkId
     * @param forceDelete
     * @param containerLinkClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSDHContainerLink")
    @RequestWrapper(localName = "deleteSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLink")
    @ResponseWrapper(localName = "deleteSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLinkResponse")
    public Future<?> deleteSDHContainerLinkAsync(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSDHContainerLinkResponse> asyncHandler);

    /**
     * 
     * @param containerLinkId
     * @param forceDelete
     * @param containerLinkClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSDHContainerLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLink")
    @ResponseWrapper(localName = "deleteSDHContainerLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHContainerLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHContainerLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHContainerLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHContainerLink/Fault/ServerSideException")
    })
    public void deleteSDHContainerLink(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param tributaryLinkClass
     * @param tributaryLinkId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSDHTributaryLinkResponse>
     */
    @WebMethod(operationName = "deleteSDHTributaryLink")
    @RequestWrapper(localName = "deleteSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLink")
    @ResponseWrapper(localName = "deleteSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLinkResponse")
    public Response<DeleteSDHTributaryLinkResponse> deleteSDHTributaryLinkAsync(
        @WebParam(name = "tributaryLinkClass", targetNamespace = "")
        String tributaryLinkClass,
        @WebParam(name = "tributaryLinkId", targetNamespace = "")
        String tributaryLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param tributaryLinkClass
     * @param tributaryLinkId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSDHTributaryLink")
    @RequestWrapper(localName = "deleteSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLink")
    @ResponseWrapper(localName = "deleteSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLinkResponse")
    public Future<?> deleteSDHTributaryLinkAsync(
        @WebParam(name = "tributaryLinkClass", targetNamespace = "")
        String tributaryLinkClass,
        @WebParam(name = "tributaryLinkId", targetNamespace = "")
        String tributaryLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSDHTributaryLinkResponse> asyncHandler);

    /**
     * 
     * @param tributaryLinkClass
     * @param tributaryLinkId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSDHTributaryLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLink")
    @ResponseWrapper(localName = "deleteSDHTributaryLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSDHTributaryLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTributaryLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTributaryLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSDHTributaryLink/Fault/ServerSideException")
    })
    public void deleteSDHTributaryLink(
        @WebParam(name = "tributaryLinkClass", targetNamespace = "")
        String tributaryLinkClass,
        @WebParam(name = "tributaryLinkId", targetNamespace = "")
        String tributaryLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param communicationsEquipmentClassA
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinksResponse>
     */
    @WebMethod(operationName = "findSDHRoutesUsingTransportLinks")
    @RequestWrapper(localName = "findSDHRoutesUsingTransportLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingTransportLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinksResponse")
    public Response<FindSDHRoutesUsingTransportLinksResponse> findSDHRoutesUsingTransportLinksAsync(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param asyncHandler
     * @param communicationsEquipmentClassA
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "findSDHRoutesUsingTransportLinks")
    @RequestWrapper(localName = "findSDHRoutesUsingTransportLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingTransportLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinksResponse")
    public Future<?> findSDHRoutesUsingTransportLinksAsync(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<FindSDHRoutesUsingTransportLinksResponse> asyncHandler);

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param communicationsEquipmentClassA
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLightList>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSDHRoutesUsingTransportLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingTransportLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingTransportLinksResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingTransportLinksRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingTransportLinksResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingTransportLinks/Fault/ServerSideException")
    })
    public List<RemoteObjectLightList> findSDHRoutesUsingTransportLinks(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param communicationsEquipmentClassA
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinksResponse>
     */
    @WebMethod(operationName = "findSDHRoutesUsingContainerLinks")
    @RequestWrapper(localName = "findSDHRoutesUsingContainerLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingContainerLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinksResponse")
    public Response<FindSDHRoutesUsingContainerLinksResponse> findSDHRoutesUsingContainerLinksAsync(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param asyncHandler
     * @param communicationsEquipmentClassA
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "findSDHRoutesUsingContainerLinks")
    @RequestWrapper(localName = "findSDHRoutesUsingContainerLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingContainerLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinksResponse")
    public Future<?> findSDHRoutesUsingContainerLinksAsync(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<FindSDHRoutesUsingContainerLinksResponse> asyncHandler);

    /**
     * 
     * @param communicationsEquipmentIB
     * @param communicationsEquipmentIdA
     * @param sessionId
     * @param communicationsEquipmentClassB
     * @param communicationsEquipmentClassA
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLightList>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findSDHRoutesUsingContainerLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinks")
    @ResponseWrapper(localName = "findSDHRoutesUsingContainerLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.FindSDHRoutesUsingContainerLinksResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingContainerLinksRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingContainerLinksResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/findSDHRoutesUsingContainerLinks/Fault/ServerSideException")
    })
    public List<RemoteObjectLightList> findSDHRoutesUsingContainerLinks(
        @WebParam(name = "communicationsEquipmentClassA", targetNamespace = "")
        String communicationsEquipmentClassA,
        @WebParam(name = "communicationsEquipmentIdA", targetNamespace = "")
        String communicationsEquipmentIdA,
        @WebParam(name = "communicationsEquipmentClassB", targetNamespace = "")
        String communicationsEquipmentClassB,
        @WebParam(name = "communicationsEquipmentIB", targetNamespace = "")
        String communicationsEquipmentIB,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSDHTransportLinkStructureResponse>
     */
    @WebMethod(operationName = "getSDHTransportLinkStructure")
    @RequestWrapper(localName = "getSDHTransportLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructure")
    @ResponseWrapper(localName = "getSDHTransportLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructureResponse")
    public Response<GetSDHTransportLinkStructureResponse> getSDHTransportLinkStructureAsync(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSDHTransportLinkStructure")
    @RequestWrapper(localName = "getSDHTransportLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructure")
    @ResponseWrapper(localName = "getSDHTransportLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructureResponse")
    public Future<?> getSDHTransportLinkStructureAsync(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSDHTransportLinkStructureResponse> asyncHandler);

    /**
     * 
     * @param transportLinkId
     * @param sessionId
     * @param transportLinkClass
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSDHContainerLinkDefinition>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSDHTransportLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructure")
    @ResponseWrapper(localName = "getSDHTransportLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHTransportLinkStructureResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHTransportLinkStructureRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHTransportLinkStructureResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHTransportLinkStructure/Fault/ServerSideException")
    })
    public List<RemoteSDHContainerLinkDefinition> getSDHTransportLinkStructure(
        @WebParam(name = "transportLinkClass", targetNamespace = "")
        String transportLinkClass,
        @WebParam(name = "transportLinkId", targetNamespace = "")
        String transportLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param containerLinkId
     * @param containerLinkClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSDHContainerLinkStructureResponse>
     */
    @WebMethod(operationName = "getSDHContainerLinkStructure")
    @RequestWrapper(localName = "getSDHContainerLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructure")
    @ResponseWrapper(localName = "getSDHContainerLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructureResponse")
    public Response<GetSDHContainerLinkStructureResponse> getSDHContainerLinkStructureAsync(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param containerLinkId
     * @param containerLinkClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSDHContainerLinkStructure")
    @RequestWrapper(localName = "getSDHContainerLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructure")
    @ResponseWrapper(localName = "getSDHContainerLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructureResponse")
    public Future<?> getSDHContainerLinkStructureAsync(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSDHContainerLinkStructureResponse> asyncHandler);

    /**
     * 
     * @param containerLinkId
     * @param containerLinkClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSDHContainerLinkDefinition>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSDHContainerLinkStructure", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructure")
    @ResponseWrapper(localName = "getSDHContainerLinkStructureResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSDHContainerLinkStructureResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHContainerLinkStructureRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHContainerLinkStructureResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSDHContainerLinkStructure/Fault/ServerSideException")
    })
    public List<RemoteSDHContainerLinkDefinition> getSDHContainerLinkStructure(
        @WebParam(name = "containerLinkClass", targetNamespace = "")
        String containerLinkClass,
        @WebParam(name = "containerLinkId", targetNamespace = "")
        String containerLinkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param oids
     * @param releaseRelationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSubnetsResponse>
     */
    @WebMethod(operationName = "deleteSubnets")
    @RequestWrapper(localName = "deleteSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnets")
    @ResponseWrapper(localName = "deleteSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetsResponse")
    public Response<DeleteSubnetsResponse> deleteSubnetsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oids", targetNamespace = "")
        List<String> oids,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param oids
     * @param releaseRelationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSubnets")
    @RequestWrapper(localName = "deleteSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnets")
    @ResponseWrapper(localName = "deleteSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetsResponse")
    public Future<?> deleteSubnetsAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oids", targetNamespace = "")
        List<String> oids,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSubnetsResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param oids
     * @param releaseRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnets")
    @ResponseWrapper(localName = "deleteSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnetsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnetsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnets/Fault/ServerSideException")
    })
    public void deleteSubnets(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "oids", targetNamespace = "")
        List<String> oids,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param ids
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSubnetPoolsResponse>
     */
    @WebMethod(operationName = "deleteSubnetPools")
    @RequestWrapper(localName = "deleteSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPools")
    @ResponseWrapper(localName = "deleteSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPoolsResponse")
    public Response<DeleteSubnetPoolsResponse> deleteSubnetPoolsAsync(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param ids
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSubnetPools")
    @RequestWrapper(localName = "deleteSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPools")
    @ResponseWrapper(localName = "deleteSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPoolsResponse")
    public Future<?> deleteSubnetPoolsAsync(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSubnetPoolsResponse> asyncHandler);

    /**
     * 
     * @param ids
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPools")
    @ResponseWrapper(localName = "deleteSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSubnetPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnetPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnetPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSubnetPools/Fault/ServerSideException")
    })
    public void deleteSubnetPools(
        @WebParam(name = "ids", targetNamespace = "")
        List<String> ids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetResponse>
     */
    @WebMethod(operationName = "getSubnet")
    @RequestWrapper(localName = "getSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnet")
    @ResponseWrapper(localName = "getSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetResponse")
    public Response<GetSubnetResponse> getSubnetAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnet")
    @RequestWrapper(localName = "getSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnet")
    @ResponseWrapper(localName = "getSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetResponse")
    public Future<?> getSubnetAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnet")
    @ResponseWrapper(localName = "getSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnet/Fault/ServerSideException")
    })
    public RemoteObject getSubnet(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param linkIds
     * @param linkClasses
     * @param sessionId
     * @param savedView
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ValidateSavedE2EViewResponse>
     */
    @WebMethod(operationName = "validateSavedE2EView")
    @RequestWrapper(localName = "validateSavedE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EView")
    @ResponseWrapper(localName = "validateSavedE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EViewResponse")
    public Response<ValidateSavedE2EViewResponse> validateSavedE2EViewAsync(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "savedView", targetNamespace = "")
        RemoteViewObject savedView,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param linkIds
     * @param linkClasses
     * @param sessionId
     * @param asyncHandler
     * @param savedView
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "validateSavedE2EView")
    @RequestWrapper(localName = "validateSavedE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EView")
    @ResponseWrapper(localName = "validateSavedE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EViewResponse")
    public Future<?> validateSavedE2EViewAsync(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "savedView", targetNamespace = "")
        RemoteViewObject savedView,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ValidateSavedE2EViewResponse> asyncHandler);

    /**
     * 
     * @param linkIds
     * @param linkClasses
     * @param sessionId
     * @param savedView
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "validateSavedE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EView")
    @ResponseWrapper(localName = "validateSavedE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ValidateSavedE2EViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/validateSavedE2EViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/validateSavedE2EViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/validateSavedE2EView/Fault/ServerSideException")
    })
    public RemoteViewObject validateSavedE2EView(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "savedView", targetNamespace = "")
        RemoteViewObject savedView,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetsInSubnetResponse>
     */
    @WebMethod(operationName = "getSubnetsInSubnet")
    @RequestWrapper(localName = "getSubnetsInSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnet")
    @ResponseWrapper(localName = "getSubnetsInSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnetResponse")
    public Response<GetSubnetsInSubnetResponse> getSubnetsInSubnetAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnetsInSubnet")
    @RequestWrapper(localName = "getSubnetsInSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnet")
    @ResponseWrapper(localName = "getSubnetsInSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnetResponse")
    public Future<?> getSubnetsInSubnetAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetsInSubnetResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnetsInSubnet", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnet")
    @ResponseWrapper(localName = "getSubnetsInSubnetResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsInSubnetResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetsInSubnetRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetsInSubnetResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetsInSubnet/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSubnetsInSubnet(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param deviceClassName
     * @param id
     * @param sessionId
     * @param deviceId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleasePortFromIPResponse>
     */
    @WebMethod(operationName = "releasePortFromIP")
    @RequestWrapper(localName = "releasePortFromIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIP")
    @ResponseWrapper(localName = "releasePortFromIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIPResponse")
    public Response<ReleasePortFromIPResponse> releasePortFromIPAsync(
        @WebParam(name = "deviceClassName", targetNamespace = "")
        String deviceClassName,
        @WebParam(name = "deviceId", targetNamespace = "")
        String deviceId,
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param deviceClassName
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @param deviceId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releasePortFromIP")
    @RequestWrapper(localName = "releasePortFromIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIP")
    @ResponseWrapper(localName = "releasePortFromIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIPResponse")
    public Future<?> releasePortFromIPAsync(
        @WebParam(name = "deviceClassName", targetNamespace = "")
        String deviceClassName,
        @WebParam(name = "deviceId", targetNamespace = "")
        String deviceId,
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleasePortFromIPResponse> asyncHandler);

    /**
     * 
     * @param deviceClassName
     * @param id
     * @param sessionId
     * @param deviceId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releasePortFromIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIP")
    @ResponseWrapper(localName = "releasePortFromIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromIPResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromIPRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromIPResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromIP/Fault/ServerSideException")
    })
    public void releasePortFromIP(
        @WebParam(name = "deviceClassName", targetNamespace = "")
        String deviceClassName,
        @WebParam(name = "deviceId", targetNamespace = "")
        String deviceId,
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param subnetId
     * @param vrfId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseSubnetFromVRFResponse>
     */
    @WebMethod(operationName = "releaseSubnetFromVRF")
    @RequestWrapper(localName = "releaseSubnetFromVRF", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRF")
    @ResponseWrapper(localName = "releaseSubnetFromVRFResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRFResponse")
    public Response<ReleaseSubnetFromVRFResponse> releaseSubnetFromVRFAsync(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param subnetId
     * @param vrfId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseSubnetFromVRF")
    @RequestWrapper(localName = "releaseSubnetFromVRF", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRF")
    @ResponseWrapper(localName = "releaseSubnetFromVRFResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRFResponse")
    public Future<?> releaseSubnetFromVRFAsync(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseSubnetFromVRFResponse> asyncHandler);

    /**
     * 
     * @param subnetId
     * @param vrfId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseSubnetFromVRF", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRF")
    @ResponseWrapper(localName = "releaseSubnetFromVRFResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVRFResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVRFRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVRFResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVRF/Fault/ServerSideException")
    })
    public void releaseSubnetFromVRF(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param interfaceClassName
     * @param portClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelatePortToInterfaceResponse>
     */
    @WebMethod(operationName = "relatePortToInterface")
    @RequestWrapper(localName = "relatePortToInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterface")
    @ResponseWrapper(localName = "relatePortToInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterfaceResponse")
    public Response<RelatePortToInterfaceResponse> relatePortToInterfaceAsync(
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param interfaceClassName
     * @param portClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relatePortToInterface")
    @RequestWrapper(localName = "relatePortToInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterface")
    @ResponseWrapper(localName = "relatePortToInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterfaceResponse")
    public Future<?> relatePortToInterfaceAsync(
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelatePortToInterfaceResponse> asyncHandler);

    /**
     * 
     * @param interfaceClassName
     * @param portClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relatePortToInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterface")
    @ResponseWrapper(localName = "relatePortToInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelatePortToInterfaceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relatePortToInterfaceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relatePortToInterfaceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relatePortToInterface/Fault/ServerSideException")
    })
    public void relatePortToInterface(
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param interfaceClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleasePortFromInterfaceResponse>
     */
    @WebMethod(operationName = "releasePortFromInterface")
    @RequestWrapper(localName = "releasePortFromInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterface")
    @ResponseWrapper(localName = "releasePortFromInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterfaceResponse")
    public Response<ReleasePortFromInterfaceResponse> releasePortFromInterfaceAsync(
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param interfaceClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releasePortFromInterface")
    @RequestWrapper(localName = "releasePortFromInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterface")
    @ResponseWrapper(localName = "releasePortFromInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterfaceResponse")
    public Future<?> releasePortFromInterfaceAsync(
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleasePortFromInterfaceResponse> asyncHandler);

    /**
     * 
     * @param interfaceClassName
     * @param interfaceId
     * @param sessionId
     * @param portId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releasePortFromInterface", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterface")
    @ResponseWrapper(localName = "releasePortFromInterfaceResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePortFromInterfaceResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromInterfaceRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromInterfaceResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePortFromInterface/Fault/ServerSideException")
    })
    public void releasePortFromInterface(
        @WebParam(name = "interfaceClassName", targetNamespace = "")
        String interfaceClassName,
        @WebParam(name = "interfaceId", targetNamespace = "")
        String interfaceId,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param sessionId
     * @param idEndpointA
     * @param parameters
     * @param idEndpointB
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateMPLSLinkResponse>
     */
    @WebMethod(operationName = "createMPLSLink")
    @RequestWrapper(localName = "createMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLink")
    @ResponseWrapper(localName = "createMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLinkResponse")
    public Response<CreateMPLSLinkResponse> createMPLSLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param sessionId
     * @param asyncHandler
     * @param idEndpointA
     * @param parameters
     * @param idEndpointB
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createMPLSLink")
    @RequestWrapper(localName = "createMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLink")
    @ResponseWrapper(localName = "createMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLinkResponse")
    public Future<?> createMPLSLinkAsync(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateMPLSLinkResponse> asyncHandler);

    /**
     * 
     * @param classNameEndpointB
     * @param classNameEndpointA
     * @param sessionId
     * @param idEndpointA
     * @param parameters
     * @param idEndpointB
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLink")
    @ResponseWrapper(localName = "createMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateMPLSLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createMPLSLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createMPLSLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createMPLSLink/Fault/ServerSideException")
    })
    public String createMPLSLink(
        @WebParam(name = "classNameEndpointA", targetNamespace = "")
        String classNameEndpointA,
        @WebParam(name = "idEndpointA", targetNamespace = "")
        String idEndpointA,
        @WebParam(name = "classNameEndpointB", targetNamespace = "")
        String classNameEndpointB,
        @WebParam(name = "idEndpointB", targetNamespace = "")
        String idEndpointB,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param linkId
     * @param forceDelete
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteMPLSLinkResponse>
     */
    @WebMethod(operationName = "deleteMPLSLink")
    @RequestWrapper(localName = "deleteMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLink")
    @ResponseWrapper(localName = "deleteMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLinkResponse")
    public Response<DeleteMPLSLinkResponse> deleteMPLSLinkAsync(
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param linkId
     * @param forceDelete
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteMPLSLink")
    @RequestWrapper(localName = "deleteMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLink")
    @ResponseWrapper(localName = "deleteMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLinkResponse")
    public Future<?> deleteMPLSLinkAsync(
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteMPLSLinkResponse> asyncHandler);

    /**
     * 
     * @param linkId
     * @param forceDelete
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLink")
    @ResponseWrapper(localName = "deleteMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteMPLSLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteMPLSLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteMPLSLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteMPLSLink/Fault/ServerSideException")
    })
    public void deleteMPLSLink(
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "forceDelete", targetNamespace = "")
        boolean forceDelete,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ConnectMplsLinkResponse>
     */
    @WebMethod(operationName = "connectMplsLink")
    @RequestWrapper(localName = "connectMplsLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLink")
    @ResponseWrapper(localName = "connectMplsLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLinkResponse")
    public Response<ConnectMplsLinkResponse> connectMplsLinkAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "connectMplsLink")
    @RequestWrapper(localName = "connectMplsLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLink")
    @ResponseWrapper(localName = "connectMplsLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLinkResponse")
    public Future<?> connectMplsLinkAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnectMplsLinkResponse> asyncHandler);

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "connectMplsLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLink")
    @ResponseWrapper(localName = "connectMplsLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMplsLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMplsLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMplsLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMplsLink/Fault/ServerSideException")
    })
    public void connectMplsLink(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DisconnectMPLSLinkResponse>
     */
    @WebMethod(operationName = "disconnectMPLSLink")
    @RequestWrapper(localName = "disconnectMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLink")
    @ResponseWrapper(localName = "disconnectMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLinkResponse")
    public Response<DisconnectMPLSLinkResponse> disconnectMPLSLinkAsync(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "disconnectMPLSLink")
    @RequestWrapper(localName = "disconnectMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLink")
    @ResponseWrapper(localName = "disconnectMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLinkResponse")
    public Future<?> disconnectMPLSLinkAsync(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DisconnectMPLSLinkResponse> asyncHandler);

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "disconnectMPLSLink", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLink")
    @ResponseWrapper(localName = "disconnectMPLSLinkResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectMPLSLinkResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectMPLSLinkRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectMPLSLinkResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectMPLSLink/Fault/ServerSideException")
    })
    public void disconnectMPLSLink(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectsInPoolResponse>
     */
    @WebMethod(operationName = "getProjectsInPool")
    @RequestWrapper(localName = "getProjectsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPool")
    @ResponseWrapper(localName = "getProjectsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPoolResponse")
    public Response<GetProjectsInPoolResponse> getProjectsInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectsInPool")
    @RequestWrapper(localName = "getProjectsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPool")
    @ResponseWrapper(localName = "getProjectsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPoolResponse")
    public Future<?> getProjectsInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectsInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectsInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPool")
    @ResponseWrapper(localName = "getProjectsInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsInPool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getProjectsInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectResponse>
     */
    @WebMethod(operationName = "getProject")
    @RequestWrapper(localName = "getProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProject")
    @ResponseWrapper(localName = "getProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResponse")
    public Response<GetProjectResponse> getProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProject")
    @RequestWrapper(localName = "getProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProject")
    @ResponseWrapper(localName = "getProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResponse")
    public Future<?> getProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProject")
    @ResponseWrapper(localName = "getProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProject/Fault/ServerSideException")
    })
    public RemoteObject getProject(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @param releaseReltationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteActivityResponse>
     */
    @WebMethod(operationName = "deleteActivity")
    @RequestWrapper(localName = "deleteActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivity")
    @ResponseWrapper(localName = "deleteActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivityResponse")
    public Response<DeleteActivityResponse> deleteActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "releaseReltationships", targetNamespace = "")
        boolean releaseReltationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @param asyncHandler
     * @param releaseReltationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteActivity")
    @RequestWrapper(localName = "deleteActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivity")
    @ResponseWrapper(localName = "deleteActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivityResponse")
    public Future<?> deleteActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "releaseReltationships", targetNamespace = "")
        boolean releaseReltationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteActivityResponse> asyncHandler);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @param releaseReltationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivity")
    @ResponseWrapper(localName = "deleteActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteActivity/Fault/ServerSideException")
    })
    public void deleteActivity(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "releaseReltationships", targetNamespace = "")
        boolean releaseReltationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAllProjectsResponse>
     */
    @WebMethod(operationName = "getAllProjects")
    @RequestWrapper(localName = "getAllProjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjects")
    @ResponseWrapper(localName = "getAllProjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjectsResponse")
    public Response<GetAllProjectsResponse> getAllProjectsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllProjects")
    @RequestWrapper(localName = "getAllProjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjects")
    @ResponseWrapper(localName = "getAllProjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjectsResponse")
    public Future<?> getAllProjectsAsync(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllProjectsResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllProjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjects")
    @ResponseWrapper(localName = "getAllProjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAllProjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAllProjects/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getAllProjects(
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProjectPoolResponse>
     */
    @WebMethod(operationName = "createProjectPool")
    @RequestWrapper(localName = "createProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPool")
    @ResponseWrapper(localName = "createProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPoolResponse")
    public Response<CreateProjectPoolResponse> createProjectPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProjectPool")
    @RequestWrapper(localName = "createProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPool")
    @ResponseWrapper(localName = "createProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPoolResponse")
    public Future<?> createProjectPoolAsync(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProjectPoolResponse> asyncHandler);

    /**
     * 
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPool")
    @ResponseWrapper(localName = "createProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProjectPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProjectPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProjectPool/Fault/ServerSideException")
    })
    public String createProjectPool(
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param projectPoolId
     * @param sessionId
     * @param projectClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProjectResponse>
     */
    @WebMethod(operationName = "createProject")
    @RequestWrapper(localName = "createProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProject")
    @ResponseWrapper(localName = "createProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectResponse")
    public Response<CreateProjectResponse> createProjectAsync(
        @WebParam(name = "projectPoolId", targetNamespace = "")
        String projectPoolId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param projectPoolId
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProject")
    @RequestWrapper(localName = "createProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProject")
    @ResponseWrapper(localName = "createProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectResponse")
    public Future<?> createProjectAsync(
        @WebParam(name = "projectPoolId", targetNamespace = "")
        String projectPoolId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProjectResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param attributeValues
     * @param projectPoolId
     * @param sessionId
     * @param projectClass
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProject")
    @ResponseWrapper(localName = "createProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProject/Fault/ServerSideException")
    })
    public String createProject(
        @WebParam(name = "projectPoolId", targetNamespace = "")
        String projectPoolId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectPoolsResponse>
     */
    @WebMethod(operationName = "getProjectPools")
    @RequestWrapper(localName = "getProjectPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPools")
    @ResponseWrapper(localName = "getProjectPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolsResponse")
    public Response<GetProjectPoolsResponse> getProjectPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectPools")
    @RequestWrapper(localName = "getProjectPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPools")
    @ResponseWrapper(localName = "getProjectPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolsResponse")
    public Future<?> getProjectPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPools")
    @ResponseWrapper(localName = "getProjectPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPools/Fault/ServerSideException")
    })
    public List<RemotePool> getProjectPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteProjectPoolResponse>
     */
    @WebMethod(operationName = "deleteProjectPool")
    @RequestWrapper(localName = "deleteProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPool")
    @ResponseWrapper(localName = "deleteProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPoolResponse")
    public Response<DeleteProjectPoolResponse> deleteProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteProjectPool")
    @RequestWrapper(localName = "deleteProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPool")
    @ResponseWrapper(localName = "deleteProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPoolResponse")
    public Future<?> deleteProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteProjectPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPool")
    @ResponseWrapper(localName = "deleteProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProjectPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProjectPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProjectPool/Fault/ServerSideException")
    })
    public void deleteProjectPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteProjectResponse>
     */
    @WebMethod(operationName = "deleteProject")
    @RequestWrapper(localName = "deleteProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProject")
    @ResponseWrapper(localName = "deleteProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectResponse")
    public Response<DeleteProjectResponse> deleteProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteProject")
    @RequestWrapper(localName = "deleteProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProject")
    @ResponseWrapper(localName = "deleteProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectResponse")
    public Future<?> deleteProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteProjectResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProject")
    @ResponseWrapper(localName = "deleteProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteProject/Fault/ServerSideException")
    })
    public void deleteProject(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateProjectResponse>
     */
    @WebMethod(operationName = "updateProject")
    @RequestWrapper(localName = "updateProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProject")
    @ResponseWrapper(localName = "updateProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectResponse")
    public Response<UpdateProjectResponse> updateProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateProject")
    @RequestWrapper(localName = "updateProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProject")
    @ResponseWrapper(localName = "updateProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectResponse")
    public Future<?> updateProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateProjectResponse> asyncHandler);

    /**
     * 
     * @param attributes
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProject")
    @ResponseWrapper(localName = "updateProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProject/Fault/ServerSideException")
    })
    public void updateProject(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateProjectPoolResponse>
     */
    @WebMethod(operationName = "updateProjectPool")
    @RequestWrapper(localName = "updateProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPool")
    @ResponseWrapper(localName = "updateProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPoolResponse")
    public Response<UpdateProjectPoolResponse> updateProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateProjectPool")
    @RequestWrapper(localName = "updateProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPool")
    @ResponseWrapper(localName = "updateProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPoolResponse")
    public Future<?> updateProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateProjectPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param poolDescription
     * @param sessionId
     * @param poolName
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPool")
    @ResponseWrapper(localName = "updateProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateProjectPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProjectPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProjectPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateProjectPool/Fault/ServerSideException")
    })
    public void updateProjectPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectsWithFilterResponse>
     */
    @WebMethod(operationName = "getProjectsWithFilter")
    @RequestWrapper(localName = "getProjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilter")
    @ResponseWrapper(localName = "getProjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilterResponse")
    public Response<GetProjectsWithFilterResponse> getProjectsWithFilterAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectsWithFilter")
    @RequestWrapper(localName = "getProjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilter")
    @ResponseWrapper(localName = "getProjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilterResponse")
    public Future<?> getProjectsWithFilterAsync(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectsWithFilterResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param filters
     * @param page
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectsWithFilter", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilter")
    @ResponseWrapper(localName = "getProjectsWithFilterResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsWithFilterResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsWithFilterRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsWithFilterResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsWithFilter/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getProjectsWithFilter(
        @WebParam(name = "filters", targetNamespace = "")
        List<StringPair> filters,
        @WebParam(name = "page", targetNamespace = "")
        int page,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectsToProjectResponse>
     */
    @WebMethod(operationName = "relateObjectsToProject")
    @RequestWrapper(localName = "relateObjectsToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProject")
    @ResponseWrapper(localName = "relateObjectsToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProjectResponse")
    public Response<RelateObjectsToProjectResponse> relateObjectsToProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectsToProject")
    @RequestWrapper(localName = "relateObjectsToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProject")
    @ResponseWrapper(localName = "relateObjectsToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProjectResponse")
    public Future<?> relateObjectsToProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectsToProjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectsToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProject")
    @ResponseWrapper(localName = "relateObjectsToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectsToProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectsToProject/Fault/ServerSideException")
    })
    public void relateObjectsToProject(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectsRelatedToObjectResponse>
     */
    @WebMethod(operationName = "getProjectsRelatedToObject")
    @RequestWrapper(localName = "getProjectsRelatedToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObject")
    @ResponseWrapper(localName = "getProjectsRelatedToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObjectResponse")
    public Response<GetProjectsRelatedToObjectResponse> getProjectsRelatedToObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "ObjectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectsRelatedToObject")
    @RequestWrapper(localName = "getProjectsRelatedToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObject")
    @ResponseWrapper(localName = "getProjectsRelatedToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObjectResponse")
    public Future<?> getProjectsRelatedToObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "ObjectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectsRelatedToObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectsRelatedToObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObject")
    @ResponseWrapper(localName = "getProjectsRelatedToObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectsRelatedToObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsRelatedToObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsRelatedToObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectsRelatedToObject/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getProjectsRelatedToObject(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "ObjectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectResourcesResponse>
     */
    @WebMethod(operationName = "getProjectResources")
    @RequestWrapper(localName = "getProjectResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResources")
    @ResponseWrapper(localName = "getProjectResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResourcesResponse")
    public Response<GetProjectResourcesResponse> getProjectResourcesAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectResources")
    @RequestWrapper(localName = "getProjectResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResources")
    @ResponseWrapper(localName = "getProjectResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResourcesResponse")
    public Future<?> getProjectResourcesAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectResourcesResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectResources", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResources")
    @ResponseWrapper(localName = "getProjectResourcesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectResourcesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectResourcesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectResourcesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectResources/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getProjectResources(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectActivitiesResponse>
     */
    @WebMethod(operationName = "getProjectActivities")
    @RequestWrapper(localName = "getProjectActivities", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivities")
    @ResponseWrapper(localName = "getProjectActivitiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivitiesResponse")
    public Response<GetProjectActivitiesResponse> getProjectActivitiesAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectActivities")
    @RequestWrapper(localName = "getProjectActivities", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivities")
    @ResponseWrapper(localName = "getProjectActivitiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivitiesResponse")
    public Future<?> getProjectActivitiesAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectActivitiesResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectActivities", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivities")
    @ResponseWrapper(localName = "getProjectActivitiesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectActivitiesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectActivitiesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectActivitiesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectActivities/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getProjectActivities(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetActivityResponse>
     */
    @WebMethod(operationName = "getActivity")
    @RequestWrapper(localName = "getActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivity")
    @ResponseWrapper(localName = "getActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivityResponse")
    public Response<GetActivityResponse> getActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getActivity")
    @RequestWrapper(localName = "getActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivity")
    @ResponseWrapper(localName = "getActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivityResponse")
    public Future<?> getActivityAsync(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetActivityResponse> asyncHandler);

    /**
     * 
     * @param activityId
     * @param activityClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivity")
    @ResponseWrapper(localName = "getActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getActivity/Fault/ServerSideException")
    })
    public RemoteObject getActivity(
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "activityId", targetNamespace = "")
        String activityId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param activityClass
     * @param attributeValues
     * @param sessionId
     * @param projectId
     * @param projectClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateActivityResponse>
     */
    @WebMethod(operationName = "createActivity")
    @RequestWrapper(localName = "createActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivity")
    @ResponseWrapper(localName = "createActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivityResponse")
    public Response<CreateActivityResponse> createActivityAsync(
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param activityClass
     * @param attributeValues
     * @param sessionId
     * @param asyncHandler
     * @param projectId
     * @param projectClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createActivity")
    @RequestWrapper(localName = "createActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivity")
    @ResponseWrapper(localName = "createActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivityResponse")
    public Future<?> createActivityAsync(
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateActivityResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param activityClass
     * @param attributeValues
     * @param sessionId
     * @param projectId
     * @param projectClass
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createActivity", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivity")
    @ResponseWrapper(localName = "createActivityResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateActivityResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createActivityRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createActivityResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createActivity/Fault/ServerSideException")
    })
    public String createActivity(
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "activityClass", targetNamespace = "")
        String activityClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateObjectToProjectResponse>
     */
    @WebMethod(operationName = "relateObjectToProject")
    @RequestWrapper(localName = "relateObjectToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProject")
    @ResponseWrapper(localName = "relateObjectToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProjectResponse")
    public Response<RelateObjectToProjectResponse> relateObjectToProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateObjectToProject")
    @RequestWrapper(localName = "relateObjectToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProject")
    @ResponseWrapper(localName = "relateObjectToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProjectResponse")
    public Future<?> relateObjectToProjectAsync(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateObjectToProjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateObjectToProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProject")
    @ResponseWrapper(localName = "relateObjectToProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateObjectToProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateObjectToProject/Fault/ServerSideException")
    })
    public void relateObjectToProject(
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param warehouseId
     * @param sessionId
     * @param warehouseClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteWarehouseResponse>
     */
    @WebMethod(operationName = "deleteWarehouse")
    @RequestWrapper(localName = "deleteWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouse")
    @ResponseWrapper(localName = "deleteWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouseResponse")
    public Response<DeleteWarehouseResponse> deleteWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param warehouseId
     * @param sessionId
     * @param asyncHandler
     * @param warehouseClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteWarehouse")
    @RequestWrapper(localName = "deleteWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouse")
    @ResponseWrapper(localName = "deleteWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouseResponse")
    public Future<?> deleteWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteWarehouseResponse> asyncHandler);

    /**
     * 
     * @param warehouseId
     * @param sessionId
     * @param warehouseClass
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouse")
    @ResponseWrapper(localName = "deleteWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteWarehouse/Fault/ServerSideException")
    })
    public void deleteWarehouse(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetWarehouseRootPoolsResponse>
     */
    @WebMethod(operationName = "getWarehouseRootPools")
    @RequestWrapper(localName = "getWarehouseRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPools")
    @ResponseWrapper(localName = "getWarehouseRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPoolsResponse")
    public Response<GetWarehouseRootPoolsResponse> getWarehouseRootPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getWarehouseRootPools")
    @RequestWrapper(localName = "getWarehouseRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPools")
    @ResponseWrapper(localName = "getWarehouseRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPoolsResponse")
    public Future<?> getWarehouseRootPoolsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetWarehouseRootPoolsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWarehouseRootPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPools")
    @ResponseWrapper(localName = "getWarehouseRootPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehouseRootPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehouseRootPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehouseRootPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehouseRootPools/Fault/ServerSideException")
    })
    public List<RemotePool> getWarehouseRootPools(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateWarehouseResponse>
     */
    @WebMethod(operationName = "createWarehouse")
    @RequestWrapper(localName = "createWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouse")
    @ResponseWrapper(localName = "createWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouseResponse")
    public Response<CreateWarehouseResponse> createWarehouseAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createWarehouse")
    @RequestWrapper(localName = "createWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouse")
    @ResponseWrapper(localName = "createWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouseResponse")
    public Future<?> createWarehouseAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateWarehouseResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouse")
    @ResponseWrapper(localName = "createWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createWarehouse/Fault/ServerSideException")
    })
    public String createWarehouse(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetProjectPoolResponse>
     */
    @WebMethod(operationName = "getProjectPool")
    @RequestWrapper(localName = "getProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPool")
    @ResponseWrapper(localName = "getProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolResponse")
    public Response<GetProjectPoolResponse> getProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getProjectPool")
    @RequestWrapper(localName = "getProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPool")
    @ResponseWrapper(localName = "getProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolResponse")
    public Future<?> getProjectPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetProjectPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProjectPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPool")
    @ResponseWrapper(localName = "getProjectPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetProjectPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getProjectPool/Fault/ServerSideException")
    })
    public RemotePool getProjectPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseObjectFromProjectResponse>
     */
    @WebMethod(operationName = "releaseObjectFromProject")
    @RequestWrapper(localName = "releaseObjectFromProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProject")
    @ResponseWrapper(localName = "releaseObjectFromProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProjectResponse")
    public Response<ReleaseObjectFromProjectResponse> releaseObjectFromProjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param projectClass
     * @param projectId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseObjectFromProject")
    @RequestWrapper(localName = "releaseObjectFromProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProject")
    @ResponseWrapper(localName = "releaseObjectFromProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProjectResponse")
    public Future<?> releaseObjectFromProjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseObjectFromProjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param projectClass
     * @param projectId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseObjectFromProject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProject")
    @ResponseWrapper(localName = "releaseObjectFromProjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseObjectFromProjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseObjectFromProject/Fault/ServerSideException")
    })
    public void releaseObjectFromProject(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "projectClass", targetNamespace = "")
        String projectClass,
        @WebParam(name = "projectId", targetNamespace = "")
        String projectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSparePartResponse>
     */
    @WebMethod(operationName = "createSparePart")
    @RequestWrapper(localName = "createSparePart", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePart")
    @ResponseWrapper(localName = "createSparePartResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePartResponse")
    public Response<CreateSparePartResponse> createSparePartAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSparePart")
    @RequestWrapper(localName = "createSparePart", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePart")
    @ResponseWrapper(localName = "createSparePartResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePartResponse")
    public Future<?> createSparePartAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSparePartResponse> asyncHandler);

    /**
     * 
     * @param attributeNames
     * @param poolId
     * @param poolClass
     * @param attributeValues
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSparePart", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePart")
    @ResponseWrapper(localName = "createSparePartResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSparePartResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSparePartRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSparePartResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSparePart/Fault/ServerSideException")
    })
    public String createSparePart(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param warehouseId
     * @param instancesOfClass
     * @param poolDescription
     * @param sessionId
     * @param warehouseClass
     * @param poolName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePoolInWarehouseResponse>
     */
    @WebMethod(operationName = "createPoolInWarehouse")
    @RequestWrapper(localName = "createPoolInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouse")
    @ResponseWrapper(localName = "createPoolInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouseResponse")
    public Response<CreatePoolInWarehouseResponse> createPoolInWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param warehouseId
     * @param instancesOfClass
     * @param poolDescription
     * @param sessionId
     * @param asyncHandler
     * @param warehouseClass
     * @param poolName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPoolInWarehouse")
    @RequestWrapper(localName = "createPoolInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouse")
    @ResponseWrapper(localName = "createPoolInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouseResponse")
    public Future<?> createPoolInWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePoolInWarehouseResponse> asyncHandler);

    /**
     * 
     * @param warehouseId
     * @param instancesOfClass
     * @param poolDescription
     * @param sessionId
     * @param warehouseClass
     * @param poolName
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPoolInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouse")
    @ResponseWrapper(localName = "createPoolInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePoolInWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPoolInWarehouse/Fault/ServerSideException")
    })
    public String createPoolInWarehouse(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "poolName", targetNamespace = "")
        String poolName,
        @WebParam(name = "poolDescription", targetNamespace = "")
        String poolDescription,
        @WebParam(name = "instancesOfClass", targetNamespace = "")
        String instancesOfClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectsInSparePoolResponse>
     */
    @WebMethod(operationName = "getObjectsInSparePool")
    @RequestWrapper(localName = "getObjectsInSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePool")
    @ResponseWrapper(localName = "getObjectsInSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePoolResponse")
    public Response<GetObjectsInSparePoolResponse> getObjectsInSparePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectsInSparePool")
    @RequestWrapper(localName = "getObjectsInSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePool")
    @ResponseWrapper(localName = "getObjectsInSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePoolResponse")
    public Future<?> getObjectsInSparePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectsInSparePoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectsInSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePool")
    @ResponseWrapper(localName = "getObjectsInSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectsInSparePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInSparePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInSparePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectsInSparePool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectsInSparePool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param viewClassName
     * @param background
     * @param name
     * @param listTypeItemClassName
     * @param description
     * @param sessionId
     * @param listTypeItemId
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateListTypeItemRelatedViewResponse>
     */
    @WebMethod(operationName = "createListTypeItemRelatedView")
    @RequestWrapper(localName = "createListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedView")
    @ResponseWrapper(localName = "createListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedViewResponse")
    public Response<CreateListTypeItemRelatedViewResponse> createListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClassName", targetNamespace = "")
        String listTypeItemClassName,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param viewClassName
     * @param background
     * @param name
     * @param listTypeItemClassName
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param listTypeItemId
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createListTypeItemRelatedView")
    @RequestWrapper(localName = "createListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedView")
    @ResponseWrapper(localName = "createListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedViewResponse")
    public Future<?> createListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClassName", targetNamespace = "")
        String listTypeItemClassName,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateListTypeItemRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param viewClassName
     * @param background
     * @param name
     * @param listTypeItemClassName
     * @param description
     * @param sessionId
     * @param listTypeItemId
     * @param structure
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedView")
    @ResponseWrapper(localName = "createListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateListTypeItemRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItemRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItemRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createListTypeItemRelatedView/Fault/ServerSideException")
    })
    public long createListTypeItemRelatedView(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClassName", targetNamespace = "")
        String listTypeItemClassName,
        @WebParam(name = "viewClassName", targetNamespace = "")
        String viewClassName,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetWarehousesInPoolResponse>
     */
    @WebMethod(operationName = "getWarehousesInPool")
    @RequestWrapper(localName = "getWarehousesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPool")
    @ResponseWrapper(localName = "getWarehousesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPoolResponse")
    public Response<GetWarehousesInPoolResponse> getWarehousesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getWarehousesInPool")
    @RequestWrapper(localName = "getWarehousesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPool")
    @ResponseWrapper(localName = "getWarehousesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPoolResponse")
    public Future<?> getWarehousesInPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetWarehousesInPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWarehousesInPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPool")
    @ResponseWrapper(localName = "getWarehousesInPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetWarehousesInPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehousesInPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehousesInPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getWarehousesInPool/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getWarehousesInPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassName
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPoolsInWarehouseResponse>
     */
    @WebMethod(operationName = "getPoolsInWarehouse")
    @RequestWrapper(localName = "getPoolsInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouse")
    @ResponseWrapper(localName = "getPoolsInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouseResponse")
    public Response<GetPoolsInWarehouseResponse> getPoolsInWarehouseAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassName
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPoolsInWarehouse")
    @RequestWrapper(localName = "getPoolsInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouse")
    @ResponseWrapper(localName = "getPoolsInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouseResponse")
    public Future<?> getPoolsInWarehouseAsync(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPoolsInWarehouseResponse> asyncHandler);

    /**
     * 
     * @param objectClassName
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPoolsInWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouse")
    @ResponseWrapper(localName = "getPoolsInWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolsInWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolsInWarehouse/Fault/ServerSideException")
    })
    public List<RemotePool> getPoolsInWarehouse(
        @WebParam(name = "objectClassName", targetNamespace = "")
        String objectClassName,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteSparePoolResponse>
     */
    @WebMethod(operationName = "deleteSparePool")
    @RequestWrapper(localName = "deleteSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePool")
    @ResponseWrapper(localName = "deleteSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePoolResponse")
    public Response<DeleteSparePoolResponse> deleteSparePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteSparePool")
    @RequestWrapper(localName = "deleteSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePool")
    @ResponseWrapper(localName = "deleteSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePoolResponse")
    public Future<?> deleteSparePoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteSparePoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param poolClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteSparePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePool")
    @ResponseWrapper(localName = "deleteSparePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteSparePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSparePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSparePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteSparePool/Fault/ServerSideException")
    })
    public void deleteSparePool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolClass", targetNamespace = "")
        String poolClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param listTypeItemId
     * @param structure
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateListTypeItemRelatedViewResponse>
     */
    @WebMethod(operationName = "updateListTypeItemRelatedView")
    @RequestWrapper(localName = "updateListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedView")
    @ResponseWrapper(localName = "updateListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedViewResponse")
    public Response<UpdateListTypeItemRelatedViewResponse> updateListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param listTypeItemId
     * @param structure
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateListTypeItemRelatedView")
    @RequestWrapper(localName = "updateListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedView")
    @ResponseWrapper(localName = "updateListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedViewResponse")
    public Future<?> updateListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateListTypeItemRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param background
     * @param name
     * @param description
     * @param sessionId
     * @param listTypeItemId
     * @param structure
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedView")
    @ResponseWrapper(localName = "updateListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateListTypeItemRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItemRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItemRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateListTypeItemRelatedView/Fault/ServerSideException")
    })
    public void updateListTypeItemRelatedView(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "structure", targetNamespace = "")
        byte[] structure,
        @WebParam(name = "background", targetNamespace = "")
        byte[] background,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param listTypeItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetListTypeItemRelatedViewResponse>
     */
    @WebMethod(operationName = "getListTypeItemRelatedView")
    @RequestWrapper(localName = "getListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedView")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewResponse")
    public Response<GetListTypeItemRelatedViewResponse> getListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param asyncHandler
     * @param listTypeItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListTypeItemRelatedView")
    @RequestWrapper(localName = "getListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedView")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewResponse")
    public Future<?> getListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListTypeItemRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param listTypeItemId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedView")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedView/Fault/ServerSideException")
    })
    public RemoteViewObject getListTypeItemRelatedView(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param listTypeItemClass
     * @param limit
     * @param sessionId
     * @param listTypeItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetListTypeItemRelatedViewsResponse>
     */
    @WebMethod(operationName = "getListTypeItemRelatedViews")
    @RequestWrapper(localName = "getListTypeItemRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViews")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewsResponse")
    public Response<GetListTypeItemRelatedViewsResponse> getListTypeItemRelatedViewsAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param listTypeItemClass
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @param listTypeItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListTypeItemRelatedViews")
    @RequestWrapper(localName = "getListTypeItemRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViews")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewsResponse")
    public Future<?> getListTypeItemRelatedViewsAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListTypeItemRelatedViewsResponse> asyncHandler);

    /**
     * 
     * @param listTypeItemClass
     * @param limit
     * @param sessionId
     * @param listTypeItemId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteViewObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListTypeItemRelatedViews", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViews")
    @ResponseWrapper(localName = "getListTypeItemRelatedViewsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetListTypeItemRelatedViewsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedViewsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedViewsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getListTypeItemRelatedViews/Fault/ServerSideException")
    })
    public List<RemoteViewObjectLight> getListTypeItemRelatedViews(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param listTypeItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteListTypeItemRelatedViewResponse>
     */
    @WebMethod(operationName = "deleteListTypeItemRelatedView")
    @RequestWrapper(localName = "deleteListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedView")
    @ResponseWrapper(localName = "deleteListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedViewResponse")
    public Response<DeleteListTypeItemRelatedViewResponse> deleteListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param asyncHandler
     * @param listTypeItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteListTypeItemRelatedView")
    @RequestWrapper(localName = "deleteListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedView")
    @ResponseWrapper(localName = "deleteListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedViewResponse")
    public Future<?> deleteListTypeItemRelatedViewAsync(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteListTypeItemRelatedViewResponse> asyncHandler);

    /**
     * 
     * @param listTypeItemClass
     * @param viewId
     * @param sessionId
     * @param listTypeItemId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteListTypeItemRelatedView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedView")
    @ResponseWrapper(localName = "deleteListTypeItemRelatedViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteListTypeItemRelatedViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItemRelatedViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItemRelatedViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteListTypeItemRelatedView/Fault/ServerSideException")
    })
    public void deleteListTypeItemRelatedView(
        @WebParam(name = "listTypeItemId", targetNamespace = "")
        String listTypeItemId,
        @WebParam(name = "listTypeItemClass", targetNamespace = "")
        String listTypeItemClass,
        @WebParam(name = "viewId", targetNamespace = "")
        long viewId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param oids
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteGeneralViewResponse>
     */
    @WebMethod(operationName = "deleteGeneralView")
    @RequestWrapper(localName = "deleteGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralView")
    @ResponseWrapper(localName = "deleteGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralViewResponse")
    public Response<DeleteGeneralViewResponse> deleteGeneralViewAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param oids
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteGeneralView")
    @RequestWrapper(localName = "deleteGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralView")
    @ResponseWrapper(localName = "deleteGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralViewResponse")
    public Future<?> deleteGeneralViewAsync(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteGeneralViewResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param oids
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteGeneralView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralView")
    @ResponseWrapper(localName = "deleteGeneralViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteGeneralViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGeneralViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGeneralViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteGeneralView/Fault/ServerSideException")
    })
    public void deleteGeneralView(
        @WebParam(name = "oids", targetNamespace = "")
        List<Long> oids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClassId
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectChildrenForClassWithIdResponse>
     */
    @WebMethod(operationName = "getObjectChildrenForClassWithId")
    @RequestWrapper(localName = "getObjectChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithId")
    @ResponseWrapper(localName = "getObjectChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithIdResponse")
    public Response<GetObjectChildrenForClassWithIdResponse> getObjectChildrenForClassWithIdAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClassId", targetNamespace = "")
        long objectClassId,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClassId
     * @param maxResults
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObjectChildrenForClassWithId")
    @RequestWrapper(localName = "getObjectChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithId")
    @ResponseWrapper(localName = "getObjectChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithIdResponse")
    public Future<?> getObjectChildrenForClassWithIdAsync(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClassId", targetNamespace = "")
        long objectClassId,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectChildrenForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param objectClassId
     * @param maxResults
     * @param oid
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObjectChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithId")
    @ResponseWrapper(localName = "getObjectChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectChildrenForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildrenForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildrenForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectChildrenForClassWithId/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getObjectChildrenForClassWithId(
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "objectClassId", targetNamespace = "")
        long objectClassId,
        @WebParam(name = "maxResults", targetNamespace = "")
        int maxResults,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param parentClass
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetParentOfClassResponse>
     */
    @WebMethod(operationName = "getParentOfClass")
    @RequestWrapper(localName = "getParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClass")
    @ResponseWrapper(localName = "getParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClassResponse")
    public Response<GetParentOfClassResponse> getParentOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param parentClass
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getParentOfClass")
    @RequestWrapper(localName = "getParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClass")
    @ResponseWrapper(localName = "getParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClassResponse")
    public Future<?> getParentOfClassAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetParentOfClassResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param parentClass
     * @param oid
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getParentOfClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClass")
    @ResponseWrapper(localName = "getParentOfClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentOfClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentOfClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentOfClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentOfClass/Fault/ServerSideException")
    })
    public RemoteObject getParentOfClass(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "parentClass", targetNamespace = "")
        String parentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param poolItemClassName
     * @param poolItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MovePoolItemToPoolResponse>
     */
    @WebMethod(operationName = "movePoolItemToPool")
    @RequestWrapper(localName = "movePoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPool")
    @ResponseWrapper(localName = "movePoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPoolResponse")
    public Response<MovePoolItemToPoolResponse> movePoolItemToPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @param poolItemClassName
     * @param poolItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "movePoolItemToPool")
    @RequestWrapper(localName = "movePoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPool")
    @ResponseWrapper(localName = "movePoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPoolResponse")
    public Future<?> movePoolItemToPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MovePoolItemToPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param poolItemClassName
     * @param poolItemId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "movePoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPool")
    @ResponseWrapper(localName = "movePoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MovePoolItemToPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/movePoolItemToPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/movePoolItemToPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/movePoolItemToPool/Fault/ServerSideException")
    })
    public void movePoolItemToPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param recursive
     * @param poolItemClassName
     * @param poolItemId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopyPoolItemToPoolResponse>
     */
    @WebMethod(operationName = "copyPoolItemToPool")
    @RequestWrapper(localName = "copyPoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPool")
    @ResponseWrapper(localName = "copyPoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPoolResponse")
    public Response<CopyPoolItemToPoolResponse> copyPoolItemToPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @param recursive
     * @param poolItemClassName
     * @param poolItemId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copyPoolItemToPool")
    @RequestWrapper(localName = "copyPoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPool")
    @ResponseWrapper(localName = "copyPoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPoolResponse")
    public Future<?> copyPoolItemToPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopyPoolItemToPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param recursive
     * @param poolItemClassName
     * @param poolItemId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "copyPoolItemToPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPool")
    @ResponseWrapper(localName = "copyPoolItemToPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyPoolItemToPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyPoolItemToPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyPoolItemToPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyPoolItemToPool/Fault/ServerSideException")
    })
    public void copyPoolItemToPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "poolItemClassName", targetNamespace = "")
        String poolItemClassName,
        @WebParam(name = "poolItemId", targetNamespace = "")
        String poolItemId,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param bObjectClass
     * @param sessionId
     * @param bObjectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ConnectMirrorPortResponse>
     */
    @WebMethod(operationName = "connectMirrorPort")
    @RequestWrapper(localName = "connectMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPort")
    @ResponseWrapper(localName = "connectMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPortResponse")
    public Response<ConnectMirrorPortResponse> connectMirrorPortAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        List<String> aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        List<String> aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        List<String> bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        List<String> bObjectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param bObjectClass
     * @param sessionId
     * @param asyncHandler
     * @param bObjectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "connectMirrorPort")
    @RequestWrapper(localName = "connectMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPort")
    @ResponseWrapper(localName = "connectMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPortResponse")
    public Future<?> connectMirrorPortAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        List<String> aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        List<String> aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        List<String> bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        List<String> bObjectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnectMirrorPortResponse> asyncHandler);

    /**
     * 
     * @param aObjectClass
     * @param aObjectId
     * @param bObjectClass
     * @param sessionId
     * @param bObjectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "connectMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPort")
    @ResponseWrapper(localName = "connectMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorPortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorPortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorPortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorPort/Fault/ServerSideException")
    })
    public void connectMirrorPort(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        List<String> aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        List<String> aObjectId,
        @WebParam(name = "bObjectClass", targetNamespace = "")
        List<String> bObjectClass,
        @WebParam(name = "bObjectId", targetNamespace = "")
        List<String> bObjectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param aObjectClass
     * @param bObjectIds
     * @param aObjectId
     * @param bObjectClasses
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ConnectMirrorMultiplePortResponse>
     */
    @WebMethod(operationName = "connectMirrorMultiplePort")
    @RequestWrapper(localName = "connectMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePort")
    @ResponseWrapper(localName = "connectMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePortResponse")
    public Response<ConnectMirrorMultiplePortResponse> connectMirrorMultiplePortAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param aObjectClass
     * @param bObjectIds
     * @param aObjectId
     * @param bObjectClasses
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "connectMirrorMultiplePort")
    @RequestWrapper(localName = "connectMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePort")
    @ResponseWrapper(localName = "connectMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePortResponse")
    public Future<?> connectMirrorMultiplePortAsync(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnectMirrorMultiplePortResponse> asyncHandler);

    /**
     * 
     * @param aObjectClass
     * @param bObjectIds
     * @param aObjectId
     * @param bObjectClasses
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "connectMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePort")
    @ResponseWrapper(localName = "connectMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectMirrorMultiplePortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorMultiplePortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorMultiplePortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectMirrorMultiplePort/Fault/ServerSideException")
    })
    public void connectMirrorMultiplePort(
        @WebParam(name = "aObjectClass", targetNamespace = "")
        String aObjectClass,
        @WebParam(name = "aObjectId", targetNamespace = "")
        String aObjectId,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseMirrorPortResponse>
     */
    @WebMethod(operationName = "releaseMirrorPort")
    @RequestWrapper(localName = "releaseMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPort")
    @ResponseWrapper(localName = "releaseMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPortResponse")
    public Response<ReleaseMirrorPortResponse> releaseMirrorPortAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseMirrorPort")
    @RequestWrapper(localName = "releaseMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPort")
    @ResponseWrapper(localName = "releaseMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPortResponse")
    public Future<?> releaseMirrorPortAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseMirrorPortResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseMirrorPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPort")
    @ResponseWrapper(localName = "releaseMirrorPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorPortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorPortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorPortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorPort/Fault/ServerSideException")
    })
    public void releaseMirrorPort(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseMirrorMultiplePortResponse>
     */
    @WebMethod(operationName = "releaseMirrorMultiplePort")
    @RequestWrapper(localName = "releaseMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePort")
    @ResponseWrapper(localName = "releaseMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePortResponse")
    public Response<ReleaseMirrorMultiplePortResponse> releaseMirrorMultiplePortAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseMirrorMultiplePort")
    @RequestWrapper(localName = "releaseMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePort")
    @ResponseWrapper(localName = "releaseMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePortResponse")
    public Future<?> releaseMirrorMultiplePortAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseMirrorMultiplePortResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseMirrorMultiplePort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePort")
    @ResponseWrapper(localName = "releaseMirrorMultiplePortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseMirrorMultiplePortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorMultiplePortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorMultiplePortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseMirrorMultiplePort/Fault/ServerSideException")
    })
    public void releaseMirrorMultiplePort(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param bObjectIds
     * @param aObjectIds
     * @param aObjectClasses
     * @param name
     * @param bObjectClasses
     * @param connectionClass
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreatePhysicalConnectionsResponse>
     */
    @WebMethod(operationName = "createPhysicalConnections")
    @RequestWrapper(localName = "createPhysicalConnections", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnections")
    @ResponseWrapper(localName = "createPhysicalConnectionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionsResponse")
    public Response<CreatePhysicalConnectionsResponse> createPhysicalConnectionsAsync(
        @WebParam(name = "aObjectClasses", targetNamespace = "")
        List<String> aObjectClasses,
        @WebParam(name = "aObjectIds", targetNamespace = "")
        List<String> aObjectIds,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param bObjectIds
     * @param aObjectIds
     * @param aObjectClasses
     * @param name
     * @param bObjectClasses
     * @param connectionClass
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createPhysicalConnections")
    @RequestWrapper(localName = "createPhysicalConnections", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnections")
    @ResponseWrapper(localName = "createPhysicalConnectionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionsResponse")
    public Future<?> createPhysicalConnectionsAsync(
        @WebParam(name = "aObjectClasses", targetNamespace = "")
        List<String> aObjectClasses,
        @WebParam(name = "aObjectIds", targetNamespace = "")
        List<String> aObjectIds,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreatePhysicalConnectionsResponse> asyncHandler);

    /**
     * 
     * @param bObjectIds
     * @param aObjectIds
     * @param aObjectClasses
     * @param name
     * @param bObjectClasses
     * @param connectionClass
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createPhysicalConnections", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnections")
    @ResponseWrapper(localName = "createPhysicalConnectionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreatePhysicalConnectionsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnectionsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnectionsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createPhysicalConnections/Fault/ServerSideException")
    })
    public List<String> createPhysicalConnections(
        @WebParam(name = "aObjectClasses", targetNamespace = "")
        List<String> aObjectClasses,
        @WebParam(name = "aObjectIds", targetNamespace = "")
        List<String> aObjectIds,
        @WebParam(name = "bObjectClasses", targetNamespace = "")
        List<String> bObjectClasses,
        @WebParam(name = "bObjectIds", targetNamespace = "")
        List<String> bObjectIds,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPhysicalConnectionEndpointsResponse>
     */
    @WebMethod(operationName = "getPhysicalConnectionEndpoints")
    @RequestWrapper(localName = "getPhysicalConnectionEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpoints")
    @ResponseWrapper(localName = "getPhysicalConnectionEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpointsResponse")
    public Response<GetPhysicalConnectionEndpointsResponse> getPhysicalConnectionEndpointsAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPhysicalConnectionEndpoints")
    @RequestWrapper(localName = "getPhysicalConnectionEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpoints")
    @ResponseWrapper(localName = "getPhysicalConnectionEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpointsResponse")
    public Future<?> getPhysicalConnectionEndpointsAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPhysicalConnectionEndpointsResponse> asyncHandler);

    /**
     * 
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPhysicalConnectionEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpoints")
    @ResponseWrapper(localName = "getPhysicalConnectionEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionEndpointsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionEndpointsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionEndpointsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionEndpoints/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getPhysicalConnectionEndpoints(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param linkId
     * @param sessionId
     * @param linkClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetLogicalLinkDetailsResponse>
     */
    @WebMethod(operationName = "getLogicalLinkDetails")
    @RequestWrapper(localName = "getLogicalLinkDetails", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetails")
    @ResponseWrapper(localName = "getLogicalLinkDetailsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetailsResponse")
    public Response<GetLogicalLinkDetailsResponse> getLogicalLinkDetailsAsync(
        @WebParam(name = "linkClass", targetNamespace = "")
        String linkClass,
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param linkId
     * @param sessionId
     * @param asyncHandler
     * @param linkClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getLogicalLinkDetails")
    @RequestWrapper(localName = "getLogicalLinkDetails", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetails")
    @ResponseWrapper(localName = "getLogicalLinkDetailsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetailsResponse")
    public Future<?> getLogicalLinkDetailsAsync(
        @WebParam(name = "linkClass", targetNamespace = "")
        String linkClass,
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetLogicalLinkDetailsResponse> asyncHandler);

    /**
     * 
     * @param linkId
     * @param sessionId
     * @param linkClass
     * @return
     *     returns org.inventory.communications.wsclient.RemoteLogicalConnectionDetails
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLogicalLinkDetails", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetails")
    @ResponseWrapper(localName = "getLogicalLinkDetailsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLogicalLinkDetailsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLogicalLinkDetailsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLogicalLinkDetailsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLogicalLinkDetails/Fault/ServerSideException")
    })
    public RemoteLogicalConnectionDetails getLogicalLinkDetails(
        @WebParam(name = "linkClass", targetNamespace = "")
        String linkClass,
        @WebParam(name = "linkId", targetNamespace = "")
        String linkId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param includeVLANs
     * @param linkIds
     * @param linkClasses
     * @param includeBDIs
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetE2EViewResponse>
     */
    @WebMethod(operationName = "getE2EView")
    @RequestWrapper(localName = "getE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EView")
    @ResponseWrapper(localName = "getE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EViewResponse")
    public Response<GetE2EViewResponse> getE2EViewAsync(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "includeVLANs", targetNamespace = "")
        boolean includeVLANs,
        @WebParam(name = "includeBDIs", targetNamespace = "")
        boolean includeBDIs,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param includeVLANs
     * @param linkIds
     * @param linkClasses
     * @param includeBDIs
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getE2EView")
    @RequestWrapper(localName = "getE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EView")
    @ResponseWrapper(localName = "getE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EViewResponse")
    public Future<?> getE2EViewAsync(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "includeVLANs", targetNamespace = "")
        boolean includeVLANs,
        @WebParam(name = "includeBDIs", targetNamespace = "")
        boolean includeBDIs,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetE2EViewResponse> asyncHandler);

    /**
     * 
     * @param includeVLANs
     * @param linkIds
     * @param linkClasses
     * @param includeBDIs
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteViewObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getE2EView", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EView")
    @ResponseWrapper(localName = "getE2EViewResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetE2EViewResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getE2EViewRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getE2EViewResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getE2EView/Fault/ServerSideException")
    })
    public RemoteViewObject getE2EView(
        @WebParam(name = "linkClasses", targetNamespace = "")
        List<String> linkClasses,
        @WebParam(name = "linkIds", targetNamespace = "")
        List<String> linkIds,
        @WebParam(name = "includeVLANs", targetNamespace = "")
        boolean includeVLANs,
        @WebParam(name = "includeBDIs", targetNamespace = "")
        boolean includeBDIs,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectBClass
     * @param containerClass
     * @param objectAClass
     * @param objectBId
     * @param objectAId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetContainersBetweenObjectsResponse>
     */
    @WebMethod(operationName = "getContainersBetweenObjects")
    @RequestWrapper(localName = "getContainersBetweenObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjects")
    @ResponseWrapper(localName = "getContainersBetweenObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjectsResponse")
    public Response<GetContainersBetweenObjectsResponse> getContainersBetweenObjectsAsync(
        @WebParam(name = "objectAClass", targetNamespace = "")
        String objectAClass,
        @WebParam(name = "objectAId", targetNamespace = "")
        String objectAId,
        @WebParam(name = "objectBClass", targetNamespace = "")
        String objectBClass,
        @WebParam(name = "objectBId", targetNamespace = "")
        String objectBId,
        @WebParam(name = "containerClass", targetNamespace = "")
        String containerClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectBClass
     * @param containerClass
     * @param objectAClass
     * @param objectBId
     * @param objectAId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getContainersBetweenObjects")
    @RequestWrapper(localName = "getContainersBetweenObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjects")
    @ResponseWrapper(localName = "getContainersBetweenObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjectsResponse")
    public Future<?> getContainersBetweenObjectsAsync(
        @WebParam(name = "objectAClass", targetNamespace = "")
        String objectAClass,
        @WebParam(name = "objectAId", targetNamespace = "")
        String objectAId,
        @WebParam(name = "objectBClass", targetNamespace = "")
        String objectBClass,
        @WebParam(name = "objectBId", targetNamespace = "")
        String objectBId,
        @WebParam(name = "containerClass", targetNamespace = "")
        String containerClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetContainersBetweenObjectsResponse> asyncHandler);

    /**
     * 
     * @param objectBClass
     * @param containerClass
     * @param objectAClass
     * @param objectBId
     * @param objectAId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getContainersBetweenObjects", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjects")
    @ResponseWrapper(localName = "getContainersBetweenObjectsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetContainersBetweenObjectsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContainersBetweenObjectsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContainersBetweenObjectsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getContainersBetweenObjects/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getContainersBetweenObjects(
        @WebParam(name = "objectAClass", targetNamespace = "")
        String objectAClass,
        @WebParam(name = "objectAId", targetNamespace = "")
        String objectAId,
        @WebParam(name = "objectBClass", targetNamespace = "")
        String objectBClass,
        @WebParam(name = "objectBId", targetNamespace = "")
        String objectBId,
        @WebParam(name = "containerClass", targetNamespace = "")
        String containerClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPhysicalConnectionsInObjectResponse>
     */
    @WebMethod(operationName = "getPhysicalConnectionsInObject")
    @RequestWrapper(localName = "getPhysicalConnectionsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObject")
    @ResponseWrapper(localName = "getPhysicalConnectionsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObjectResponse")
    public Response<GetPhysicalConnectionsInObjectResponse> getPhysicalConnectionsInObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPhysicalConnectionsInObject")
    @RequestWrapper(localName = "getPhysicalConnectionsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObject")
    @ResponseWrapper(localName = "getPhysicalConnectionsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObjectResponse")
    public Future<?> getPhysicalConnectionsInObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPhysicalConnectionsInObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param sessionId
     * @param objectId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLightList>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPhysicalConnectionsInObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObject")
    @ResponseWrapper(localName = "getPhysicalConnectionsInObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPhysicalConnectionsInObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionsInObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionsInObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPhysicalConnectionsInObject/Fault/ServerSideException")
    })
    public List<RemoteObjectLightList> getPhysicalConnectionsInObject(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param portClassName
     * @param sessionId
     * @param portId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetLinkConnectedToPortResponse>
     */
    @WebMethod(operationName = "getLinkConnectedToPort")
    @RequestWrapper(localName = "getLinkConnectedToPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPort")
    @ResponseWrapper(localName = "getLinkConnectedToPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPortResponse")
    public Response<GetLinkConnectedToPortResponse> getLinkConnectedToPortAsync(
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param portClassName
     * @param sessionId
     * @param portId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getLinkConnectedToPort")
    @RequestWrapper(localName = "getLinkConnectedToPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPort")
    @ResponseWrapper(localName = "getLinkConnectedToPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPortResponse")
    public Future<?> getLinkConnectedToPortAsync(
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetLinkConnectedToPortResponse> asyncHandler);

    /**
     * 
     * @param portClassName
     * @param sessionId
     * @param portId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLinkConnectedToPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPort")
    @ResponseWrapper(localName = "getLinkConnectedToPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetLinkConnectedToPortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLinkConnectedToPortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLinkConnectedToPortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getLinkConnectedToPort/Fault/ServerSideException")
    })
    public RemoteObject getLinkConnectedToPort(
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param linksClassNames
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ConnectPhysicalLinksResponse>
     */
    @WebMethod(operationName = "connectPhysicalLinks")
    @RequestWrapper(localName = "connectPhysicalLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinks")
    @ResponseWrapper(localName = "connectPhysicalLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinksResponse")
    public Response<ConnectPhysicalLinksResponse> connectPhysicalLinksAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksClassNames", targetNamespace = "")
        List<String> linksClassNames,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param linksClassNames
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "connectPhysicalLinks")
    @RequestWrapper(localName = "connectPhysicalLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinks")
    @ResponseWrapper(localName = "connectPhysicalLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinksResponse")
    public Future<?> connectPhysicalLinksAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksClassNames", targetNamespace = "")
        List<String> linksClassNames,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnectPhysicalLinksResponse> asyncHandler);

    /**
     * 
     * @param sideAClassNames
     * @param linksIds
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param linksClassNames
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "connectPhysicalLinks", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinks")
    @ResponseWrapper(localName = "connectPhysicalLinksResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalLinksResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalLinksRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalLinksResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalLinks/Fault/ServerSideException")
    })
    public void connectPhysicalLinks(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "linksClassNames", targetNamespace = "")
        List<String> linksClassNames,
        @WebParam(name = "linksIds", targetNamespace = "")
        List<String> linksIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sideAClassNames
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param containersClassNames
     * @param sessionId
     * @param containersIds
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ConnectPhysicalContainersResponse>
     */
    @WebMethod(operationName = "connectPhysicalContainers")
    @RequestWrapper(localName = "connectPhysicalContainers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainers")
    @ResponseWrapper(localName = "connectPhysicalContainersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainersResponse")
    public Response<ConnectPhysicalContainersResponse> connectPhysicalContainersAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "containersClassNames", targetNamespace = "")
        List<String> containersClassNames,
        @WebParam(name = "containersIds", targetNamespace = "")
        List<String> containersIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sideAClassNames
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param containersClassNames
     * @param sessionId
     * @param containersIds
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "connectPhysicalContainers")
    @RequestWrapper(localName = "connectPhysicalContainers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainers")
    @ResponseWrapper(localName = "connectPhysicalContainersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainersResponse")
    public Future<?> connectPhysicalContainersAsync(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "containersClassNames", targetNamespace = "")
        List<String> containersClassNames,
        @WebParam(name = "containersIds", targetNamespace = "")
        List<String> containersIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ConnectPhysicalContainersResponse> asyncHandler);

    /**
     * 
     * @param sideAClassNames
     * @param sideBClassNames
     * @param sideBIds
     * @param sideAIds
     * @param containersClassNames
     * @param sessionId
     * @param containersIds
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "connectPhysicalContainers", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainers")
    @ResponseWrapper(localName = "connectPhysicalContainersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ConnectPhysicalContainersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalContainersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalContainersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/connectPhysicalContainers/Fault/ServerSideException")
    })
    public void connectPhysicalContainers(
        @WebParam(name = "sideAClassNames", targetNamespace = "")
        List<String> sideAClassNames,
        @WebParam(name = "sideAIds", targetNamespace = "")
        List<String> sideAIds,
        @WebParam(name = "containersClassNames", targetNamespace = "")
        List<String> containersClassNames,
        @WebParam(name = "containersIds", targetNamespace = "")
        List<String> containersIds,
        @WebParam(name = "sideBClassNames", targetNamespace = "")
        List<String> sideBClassNames,
        @WebParam(name = "sideBIds", targetNamespace = "")
        List<String> sideBIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DisconnectPhysicalConnectionResponse>
     */
    @WebMethod(operationName = "disconnectPhysicalConnection")
    @RequestWrapper(localName = "disconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnection")
    @ResponseWrapper(localName = "disconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnectionResponse")
    public Response<DisconnectPhysicalConnectionResponse> disconnectPhysicalConnectionAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "disconnectPhysicalConnection")
    @RequestWrapper(localName = "disconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnection")
    @ResponseWrapper(localName = "disconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnectionResponse")
    public Future<?> disconnectPhysicalConnectionAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DisconnectPhysicalConnectionResponse> asyncHandler);

    /**
     * 
     * @param sideToDisconnect
     * @param connectionId
     * @param connectionClass
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "disconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnection")
    @ResponseWrapper(localName = "disconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DisconnectPhysicalConnectionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectPhysicalConnectionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectPhysicalConnectionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/disconnectPhysicalConnection/Fault/ServerSideException")
    })
    public void disconnectPhysicalConnection(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sideToDisconnect", targetNamespace = "")
        int sideToDisconnect,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param newBSideClass
     * @param connectionId
     * @param connectionClass
     * @param newBSideId
     * @param newASideId
     * @param sessionId
     * @param newASideClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReconnectPhysicalConnectionResponse>
     */
    @WebMethod(operationName = "reconnectPhysicalConnection")
    @RequestWrapper(localName = "reconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnection")
    @ResponseWrapper(localName = "reconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnectionResponse")
    public Response<ReconnectPhysicalConnectionResponse> reconnectPhysicalConnectionAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "newASideClass", targetNamespace = "")
        String newASideClass,
        @WebParam(name = "newASideId", targetNamespace = "")
        String newASideId,
        @WebParam(name = "newBSideClass", targetNamespace = "")
        String newBSideClass,
        @WebParam(name = "newBSideId", targetNamespace = "")
        String newBSideId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param newBSideClass
     * @param connectionId
     * @param connectionClass
     * @param newBSideId
     * @param newASideId
     * @param sessionId
     * @param asyncHandler
     * @param newASideClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "reconnectPhysicalConnection")
    @RequestWrapper(localName = "reconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnection")
    @ResponseWrapper(localName = "reconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnectionResponse")
    public Future<?> reconnectPhysicalConnectionAsync(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "newASideClass", targetNamespace = "")
        String newASideClass,
        @WebParam(name = "newASideId", targetNamespace = "")
        String newASideId,
        @WebParam(name = "newBSideClass", targetNamespace = "")
        String newBSideClass,
        @WebParam(name = "newBSideId", targetNamespace = "")
        String newBSideId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReconnectPhysicalConnectionResponse> asyncHandler);

    /**
     * 
     * @param newBSideClass
     * @param connectionId
     * @param connectionClass
     * @param newBSideId
     * @param newASideId
     * @param sessionId
     * @param newASideClass
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "reconnectPhysicalConnection", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnection")
    @ResponseWrapper(localName = "reconnectPhysicalConnectionResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReconnectPhysicalConnectionResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/reconnectPhysicalConnectionRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/reconnectPhysicalConnectionResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/reconnectPhysicalConnection/Fault/ServerSideException")
    })
    public void reconnectPhysicalConnection(
        @WebParam(name = "connectionClass", targetNamespace = "")
        String connectionClass,
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "newASideClass", targetNamespace = "")
        String newASideClass,
        @WebParam(name = "newASideId", targetNamespace = "")
        String newASideId,
        @WebParam(name = "newBSideClass", targetNamespace = "")
        String newBSideClass,
        @WebParam(name = "newBSideId", targetNamespace = "")
        String newBSideId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAttributeForClassWithIdResponse>
     */
    @WebMethod(operationName = "getAttributeForClassWithId")
    @RequestWrapper(localName = "getAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithId")
    @ResponseWrapper(localName = "getAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithIdResponse")
    public Response<GetAttributeForClassWithIdResponse> getAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        String classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAttributeForClassWithId")
    @RequestWrapper(localName = "getAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithId")
    @ResponseWrapper(localName = "getAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithIdResponse")
    public Future<?> getAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        String classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAttributeForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteAttributeMetadata
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithId")
    @ResponseWrapper(localName = "getAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttributeForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttributeForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttributeForClassWithId/Fault/ServerSideException")
    })
    public RemoteAttributeMetadata getAttributeForClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        String classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateAttributeForClassWithIdResponse>
     */
    @WebMethod(operationName = "createAttributeForClassWithId")
    @RequestWrapper(localName = "createAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithId")
    @ResponseWrapper(localName = "createAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithIdResponse")
    public Response<CreateAttributeForClassWithIdResponse> createAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "readOnly", targetNamespace = "")
        boolean readOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param mandatory
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createAttributeForClassWithId")
    @RequestWrapper(localName = "createAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithId")
    @ResponseWrapper(localName = "createAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithIdResponse")
    public Future<?> createAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "readOnly", targetNamespace = "")
        boolean readOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateAttributeForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithId")
    @ResponseWrapper(localName = "createAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateAttributeForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttributeForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttributeForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createAttributeForClassWithId/Fault/ServerSideException")
    })
    public void createAttributeForClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "administrative", targetNamespace = "")
        boolean administrative,
        @WebParam(name = "visible", targetNamespace = "")
        boolean visible,
        @WebParam(name = "readOnly", targetNamespace = "")
        boolean readOnly,
        @WebParam(name = "noCopy", targetNamespace = "")
        boolean noCopy,
        @WebParam(name = "unique", targetNamespace = "")
        boolean unique,
        @WebParam(name = "mandatory", targetNamespace = "")
        boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        boolean multiple,
        @WebParam(name = "order", targetNamespace = "")
        int order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param attributeId
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.SetAttributePropertiesForClassWithIdResponse>
     */
    @WebMethod(operationName = "setAttributePropertiesForClassWithId")
    @RequestWrapper(localName = "setAttributePropertiesForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithId")
    @ResponseWrapper(localName = "setAttributePropertiesForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithIdResponse")
    public Response<SetAttributePropertiesForClassWithIdResponse> setAttributePropertiesForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param asyncHandler
     * @param mandatory
     * @param attributeId
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "setAttributePropertiesForClassWithId")
    @RequestWrapper(localName = "setAttributePropertiesForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithId")
    @ResponseWrapper(localName = "setAttributePropertiesForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithIdResponse")
    public Future<?> setAttributePropertiesForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SetAttributePropertiesForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param visible
     * @param displayName
     * @param noCopy
     * @param multiple
     * @param description
     * @param readOnly
     * @param sessionId
     * @param type
     * @param mandatory
     * @param attributeId
     * @param classId
     * @param administrative
     * @param unique
     * @param name
     * @param order
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "setAttributePropertiesForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithId")
    @ResponseWrapper(localName = "setAttributePropertiesForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.SetAttributePropertiesForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributePropertiesForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributePropertiesForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/setAttributePropertiesForClassWithId/Fault/ServerSideException")
    })
    public void setAttributePropertiesForClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeId", targetNamespace = "")
        long attributeId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "displayName", targetNamespace = "")
        String displayName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "type", targetNamespace = "")
        String type,
        @WebParam(name = "administrative", targetNamespace = "")
        Boolean administrative,
        @WebParam(name = "mandatory", targetNamespace = "")
        Boolean mandatory,
        @WebParam(name = "multiple", targetNamespace = "")
        Boolean multiple,
        @WebParam(name = "noCopy", targetNamespace = "")
        Boolean noCopy,
        @WebParam(name = "readOnly", targetNamespace = "")
        Boolean readOnly,
        @WebParam(name = "unique", targetNamespace = "")
        Boolean unique,
        @WebParam(name = "visible", targetNamespace = "")
        Boolean visible,
        @WebParam(name = "order", targetNamespace = "")
        Integer order,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteAttributeForClassWithIdResponse>
     */
    @WebMethod(operationName = "deleteAttributeForClassWithId")
    @RequestWrapper(localName = "deleteAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithId")
    @ResponseWrapper(localName = "deleteAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithIdResponse")
    public Response<DeleteAttributeForClassWithIdResponse> deleteAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteAttributeForClassWithId")
    @RequestWrapper(localName = "deleteAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithId")
    @ResponseWrapper(localName = "deleteAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithIdResponse")
    public Future<?> deleteAttributeForClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteAttributeForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param classId
     * @param attributeName
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteAttributeForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithId")
    @ResponseWrapper(localName = "deleteAttributeForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteAttributeForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttributeForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttributeForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteAttributeForClassWithId/Fault/ServerSideException")
    })
    public void deleteAttributeForClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetClassWithIdResponse>
     */
    @WebMethod(operationName = "getClassWithId")
    @RequestWrapper(localName = "getClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithId")
    @ResponseWrapper(localName = "getClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithIdResponse")
    public Response<GetClassWithIdResponse> getClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getClassWithId")
    @RequestWrapper(localName = "getClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithId")
    @ResponseWrapper(localName = "getClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithIdResponse")
    public Future<?> getClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param classId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteClassMetadata
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithId")
    @ResponseWrapper(localName = "getClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassWithId/Fault/ServerSideException")
    })
    public RemoteClassMetadata getClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param classId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DeleteClassWithIdResponse>
     */
    @WebMethod(operationName = "deleteClassWithId")
    @RequestWrapper(localName = "deleteClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithId")
    @ResponseWrapper(localName = "deleteClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithIdResponse")
    public Response<DeleteClassWithIdResponse> deleteClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param classId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteClassWithId")
    @RequestWrapper(localName = "deleteClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithId")
    @ResponseWrapper(localName = "deleteClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithIdResponse")
    public Future<?> deleteClassWithIdAsync(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DeleteClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param classId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithId")
    @ResponseWrapper(localName = "deleteClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DeleteClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/deleteClassWithId/Fault/ServerSideException")
    })
    public void deleteClassWithId(
        @WebParam(name = "classId", targetNamespace = "")
        long classId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassId
     * @param childrenToBeAdded
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddPossibleChildrenForClassWithIdResponse>
     */
    @WebMethod(operationName = "addPossibleChildrenForClassWithId")
    @RequestWrapper(localName = "addPossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "addPossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithIdResponse")
    public Response<AddPossibleChildrenForClassWithIdResponse> addPossibleChildrenForClassWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<Long> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassId
     * @param childrenToBeAdded
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addPossibleChildrenForClassWithId")
    @RequestWrapper(localName = "addPossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "addPossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithIdResponse")
    public Future<?> addPossibleChildrenForClassWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<Long> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddPossibleChildrenForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param parentClassId
     * @param childrenToBeAdded
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addPossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "addPossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleChildrenForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildrenForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildrenForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleChildrenForClassWithId/Fault/ServerSideException")
    })
    public void addPossibleChildrenForClassWithId(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeAdded", targetNamespace = "")
        List<Long> childrenToBeAdded,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassId
     * @param possibleSpecialChildren
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithIdResponse>
     */
    @WebMethod(operationName = "addPossibleSpecialChildrenWithId")
    @RequestWrapper(localName = "addPossibleSpecialChildrenWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithId")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithIdResponse")
    public Response<AddPossibleSpecialChildrenWithIdResponse> addPossibleSpecialChildrenWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<Long> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassId
     * @param possibleSpecialChildren
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addPossibleSpecialChildrenWithId")
    @RequestWrapper(localName = "addPossibleSpecialChildrenWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithId")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithIdResponse")
    public Future<?> addPossibleSpecialChildrenWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<Long> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddPossibleSpecialChildrenWithIdResponse> asyncHandler);

    /**
     * 
     * @param parentClassId
     * @param possibleSpecialChildren
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addPossibleSpecialChildrenWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithId")
    @ResponseWrapper(localName = "addPossibleSpecialChildrenWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddPossibleSpecialChildrenWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildrenWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildrenWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addPossibleSpecialChildrenWithId/Fault/ServerSideException")
    })
    public void addPossibleSpecialChildrenWithId(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "possibleSpecialChildren", targetNamespace = "")
        List<Long> possibleSpecialChildren,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassId
     * @param childrenToBeRemoved
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithIdResponse>
     */
    @WebMethod(operationName = "removePossibleChildrenForClassWithId")
    @RequestWrapper(localName = "removePossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "removePossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithIdResponse")
    public Response<RemovePossibleChildrenForClassWithIdResponse> removePossibleChildrenForClassWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeRemoved", targetNamespace = "")
        List<Long> childrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassId
     * @param childrenToBeRemoved
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removePossibleChildrenForClassWithId")
    @RequestWrapper(localName = "removePossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "removePossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithIdResponse")
    public Future<?> removePossibleChildrenForClassWithIdAsync(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeRemoved", targetNamespace = "")
        List<Long> childrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemovePossibleChildrenForClassWithIdResponse> asyncHandler);

    /**
     * 
     * @param parentClassId
     * @param childrenToBeRemoved
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removePossibleChildrenForClassWithId", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithId")
    @ResponseWrapper(localName = "removePossibleChildrenForClassWithIdResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemovePossibleChildrenForClassWithIdResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleChildrenForClassWithIdRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleChildrenForClassWithIdResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removePossibleChildrenForClassWithId/Fault/ServerSideException")
    })
    public void removePossibleChildrenForClassWithId(
        @WebParam(name = "parentClassId", targetNamespace = "")
        long parentClassId,
        @WebParam(name = "childrenToBeRemoved", targetNamespace = "")
        List<Long> childrenToBeRemoved,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param allegedParentClass
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.IsSubclassOfResponse>
     */
    @WebMethod(operationName = "isSubclassOf")
    @RequestWrapper(localName = "isSubclassOf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOf")
    @ResponseWrapper(localName = "isSubclassOfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOfResponse")
    public Response<IsSubclassOfResponse> isSubclassOfAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "allegedParentClass", targetNamespace = "")
        String allegedParentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param allegedParentClass
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "isSubclassOf")
    @RequestWrapper(localName = "isSubclassOf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOf")
    @ResponseWrapper(localName = "isSubclassOfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOfResponse")
    public Future<?> isSubclassOfAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "allegedParentClass", targetNamespace = "")
        String allegedParentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<IsSubclassOfResponse> asyncHandler);

    /**
     * 
     * @param allegedParentClass
     * @param className
     * @param sessionId
     * @return
     *     returns boolean
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isSubclassOf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOf")
    @ResponseWrapper(localName = "isSubclassOfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.IsSubclassOfResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/isSubclassOfRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/isSubclassOfResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/isSubclassOf/Fault/ServerSideException")
    })
    public boolean isSubclassOf(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "allegedParentClass", targetNamespace = "")
        String allegedParentClass,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param file
     * @param dataType
     * @param commitSize
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.BulkUploadResponse>
     */
    @WebMethod(operationName = "bulkUpload")
    @RequestWrapper(localName = "bulkUpload", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUpload")
    @ResponseWrapper(localName = "bulkUploadResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUploadResponse")
    public Response<BulkUploadResponse> bulkUploadAsync(
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "commitSize", targetNamespace = "")
        int commitSize,
        @WebParam(name = "dataType", targetNamespace = "")
        int dataType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param file
     * @param dataType
     * @param commitSize
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "bulkUpload")
    @RequestWrapper(localName = "bulkUpload", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUpload")
    @ResponseWrapper(localName = "bulkUploadResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUploadResponse")
    public Future<?> bulkUploadAsync(
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "commitSize", targetNamespace = "")
        int commitSize,
        @WebParam(name = "dataType", targetNamespace = "")
        int dataType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<BulkUploadResponse> asyncHandler);

    /**
     * 
     * @param file
     * @param dataType
     * @param commitSize
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "bulkUpload", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUpload")
    @ResponseWrapper(localName = "bulkUploadResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.BulkUploadResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/bulkUploadRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/bulkUploadResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/bulkUpload/Fault/ServerSideException")
    })
    public String bulkUpload(
        @WebParam(name = "file", targetNamespace = "")
        byte[] file,
        @WebParam(name = "commitSize", targetNamespace = "")
        int commitSize,
        @WebParam(name = "dataType", targetNamespace = "")
        int dataType,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param fileName
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.DownloadBulkLoadLogResponse>
     */
    @WebMethod(operationName = "downloadBulkLoadLog")
    @RequestWrapper(localName = "downloadBulkLoadLog", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLog")
    @ResponseWrapper(localName = "downloadBulkLoadLogResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLogResponse")
    public Response<DownloadBulkLoadLogResponse> downloadBulkLoadLogAsync(
        @WebParam(name = "fileName", targetNamespace = "")
        String fileName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param fileName
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "downloadBulkLoadLog")
    @RequestWrapper(localName = "downloadBulkLoadLog", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLog")
    @ResponseWrapper(localName = "downloadBulkLoadLogResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLogResponse")
    public Future<?> downloadBulkLoadLogAsync(
        @WebParam(name = "fileName", targetNamespace = "")
        String fileName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DownloadBulkLoadLogResponse> asyncHandler);

    /**
     * 
     * @param fileName
     * @param sessionId
     * @return
     *     returns byte[]
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadBulkLoadLog", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLog")
    @ResponseWrapper(localName = "downloadBulkLoadLogResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.DownloadBulkLoadLogResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/downloadBulkLoadLogRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/downloadBulkLoadLogResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/downloadBulkLoadLog/Fault/ServerSideException")
    })
    public byte[] downloadBulkLoadLog(
        @WebParam(name = "fileName", targetNamespace = "")
        String fileName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CopyTemplateSpecialElementsResponse>
     */
    @WebMethod(operationName = "copyTemplateSpecialElements")
    @RequestWrapper(localName = "copyTemplateSpecialElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElements")
    @ResponseWrapper(localName = "copyTemplateSpecialElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElementsResponse")
    public Response<CopyTemplateSpecialElementsResponse> copyTemplateSpecialElementsAsync(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "copyTemplateSpecialElements")
    @RequestWrapper(localName = "copyTemplateSpecialElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElements")
    @ResponseWrapper(localName = "copyTemplateSpecialElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElementsResponse")
    public Future<?> copyTemplateSpecialElementsAsync(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CopyTemplateSpecialElementsResponse> asyncHandler);

    /**
     * 
     * @param sourceObjectsClassNames
     * @param newParentId
     * @param newParentClassName
     * @param sessionId
     * @param sourceObjectsIds
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "copyTemplateSpecialElements", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElements")
    @ResponseWrapper(localName = "copyTemplateSpecialElementsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CopyTemplateSpecialElementsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateSpecialElementsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateSpecialElementsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/copyTemplateSpecialElements/Fault/ServerSideException")
    })
    public List<String> copyTemplateSpecialElements(
        @WebParam(name = "sourceObjectsClassNames", targetNamespace = "")
        List<String> sourceObjectsClassNames,
        @WebParam(name = "sourceObjectsIds", targetNamespace = "")
        List<String> sourceObjectsIds,
        @WebParam(name = "newParentClassName", targetNamespace = "")
        String newParentClassName,
        @WebParam(name = "newParentId", targetNamespace = "")
        String newParentId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddObjectsToFavoritesFolderResponse>
     */
    @WebMethod(operationName = "addObjectsToFavoritesFolder")
    @RequestWrapper(localName = "addObjectsToFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolder")
    @ResponseWrapper(localName = "addObjectsToFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolderResponse")
    public Response<AddObjectsToFavoritesFolderResponse> addObjectsToFavoritesFolderAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addObjectsToFavoritesFolder")
    @RequestWrapper(localName = "addObjectsToFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolder")
    @ResponseWrapper(localName = "addObjectsToFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolderResponse")
    public Future<?> addObjectsToFavoritesFolderAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddObjectsToFavoritesFolderResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "addObjectsToFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolder")
    @ResponseWrapper(localName = "addObjectsToFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddObjectsToFavoritesFolderResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addObjectsToFavoritesFolderRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addObjectsToFavoritesFolderResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addObjectsToFavoritesFolder/Fault/ServerSideException")
    })
    public void addObjectsToFavoritesFolder(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolderResponse>
     */
    @WebMethod(operationName = "removeObjectsFromFavoritesFolder")
    @RequestWrapper(localName = "removeObjectsFromFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolder")
    @ResponseWrapper(localName = "removeObjectsFromFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolderResponse")
    public Response<RemoveObjectsFromFavoritesFolderResponse> removeObjectsFromFavoritesFolderAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param userId
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removeObjectsFromFavoritesFolder")
    @RequestWrapper(localName = "removeObjectsFromFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolder")
    @ResponseWrapper(localName = "removeObjectsFromFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolderResponse")
    public Future<?> removeObjectsFromFavoritesFolderAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemoveObjectsFromFavoritesFolderResponse> asyncHandler);

    /**
     * 
     * @param favoritesFolderId
     * @param objectClass
     * @param sessionId
     * @param userId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removeObjectsFromFavoritesFolder", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolder")
    @ResponseWrapper(localName = "removeObjectsFromFavoritesFolderResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveObjectsFromFavoritesFolderResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeObjectsFromFavoritesFolderRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeObjectsFromFavoritesFolderResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeObjectsFromFavoritesFolder/Fault/ServerSideException")
    })
    public void removeObjectsFromFavoritesFolder(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "favoritesFolderId", targetNamespace = "")
        long favoritesFolderId,
        @WebParam(name = "userId", targetNamespace = "")
        long userId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTaskResponse>
     */
    @WebMethod(operationName = "launchSupervisedSynchronizationTask")
    @RequestWrapper(localName = "launchSupervisedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTask")
    @ResponseWrapper(localName = "launchSupervisedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTaskResponse")
    public Response<LaunchSupervisedSynchronizationTaskResponse> launchSupervisedSynchronizationTaskAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "launchSupervisedSynchronizationTask")
    @RequestWrapper(localName = "launchSupervisedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTask")
    @ResponseWrapper(localName = "launchSupervisedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTaskResponse")
    public Future<?> launchSupervisedSynchronizationTaskAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LaunchSupervisedSynchronizationTaskResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSyncFinding>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "launchSupervisedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTask")
    @ResponseWrapper(localName = "launchSupervisedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchSupervisedSynchronizationTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchSupervisedSynchronizationTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchSupervisedSynchronizationTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchSupervisedSynchronizationTask/Fault/ServerSideException")
    })
    public List<RemoteSyncFinding> launchSupervisedSynchronizationTask(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param providersName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTaskResponse>
     */
    @WebMethod(operationName = "launchAutomatedSynchronizationTask")
    @RequestWrapper(localName = "launchAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTaskResponse")
    public Response<LaunchAutomatedSynchronizationTaskResponse> launchAutomatedSynchronizationTaskAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @param providersName
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "launchAutomatedSynchronizationTask")
    @RequestWrapper(localName = "launchAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTaskResponse")
    public Future<?> launchAutomatedSynchronizationTaskAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LaunchAutomatedSynchronizationTaskResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param providersName
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSyncResult>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "launchAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAutomatedSynchronizationTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAutomatedSynchronizationTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAutomatedSynchronizationTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAutomatedSynchronizationTask/Fault/ServerSideException")
    })
    public List<RemoteSyncResult> launchAutomatedSynchronizationTask(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param providersName
     * @param synDsConfigIds
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTaskResponse>
     */
    @WebMethod(operationName = "launchAdHocAutomatedSynchronizationTask")
    @RequestWrapper(localName = "launchAdHocAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAdHocAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTaskResponse")
    public Response<LaunchAdHocAutomatedSynchronizationTaskResponse> launchAdHocAutomatedSynchronizationTaskAsync(
        @WebParam(name = "synDsConfigIds", targetNamespace = "")
        List<Long> synDsConfigIds,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param providersName
     * @param synDsConfigIds
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "launchAdHocAutomatedSynchronizationTask")
    @RequestWrapper(localName = "launchAdHocAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAdHocAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTaskResponse")
    public Future<?> launchAdHocAutomatedSynchronizationTaskAsync(
        @WebParam(name = "synDsConfigIds", targetNamespace = "")
        List<Long> synDsConfigIds,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LaunchAdHocAutomatedSynchronizationTaskResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param providersName
     * @param synDsConfigIds
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSyncResult>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "launchAdHocAutomatedSynchronizationTask", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTask")
    @ResponseWrapper(localName = "launchAdHocAutomatedSynchronizationTaskResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.LaunchAdHocAutomatedSynchronizationTaskResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAdHocAutomatedSynchronizationTaskRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAdHocAutomatedSynchronizationTaskResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/launchAdHocAutomatedSynchronizationTask/Fault/ServerSideException")
    })
    public List<RemoteSyncResult> launchAdHocAutomatedSynchronizationTask(
        @WebParam(name = "synDsConfigIds", targetNamespace = "")
        List<Long> synDsConfigIds,
        @WebParam(name = "providersName", targetNamespace = "")
        String providersName,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param actions
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ExecuteSyncActionsResponse>
     */
    @WebMethod(operationName = "executeSyncActions")
    @RequestWrapper(localName = "executeSyncActions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActions")
    @ResponseWrapper(localName = "executeSyncActionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActionsResponse")
    public Response<ExecuteSyncActionsResponse> executeSyncActionsAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "actions", targetNamespace = "")
        List<RemoteSyncAction> actions,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @param actions
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "executeSyncActions")
    @RequestWrapper(localName = "executeSyncActions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActions")
    @ResponseWrapper(localName = "executeSyncActionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActionsResponse")
    public Future<?> executeSyncActionsAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "actions", targetNamespace = "")
        List<RemoteSyncAction> actions,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ExecuteSyncActionsResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param actions
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSyncResult>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "executeSyncActions", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActions")
    @ResponseWrapper(localName = "executeSyncActionsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ExecuteSyncActionsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeSyncActionsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeSyncActionsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/executeSyncActions/Fault/ServerSideException")
    })
    public List<RemoteSyncResult> executeSyncActions(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "actions", targetNamespace = "")
        List<RemoteSyncAction> actions,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetCurrentJobsResponse>
     */
    @WebMethod(operationName = "getCurrentJobs")
    @RequestWrapper(localName = "getCurrentJobs", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobs")
    @ResponseWrapper(localName = "getCurrentJobsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobsResponse")
    public Response<GetCurrentJobsResponse> getCurrentJobsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getCurrentJobs")
    @RequestWrapper(localName = "getCurrentJobs", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobs")
    @ResponseWrapper(localName = "getCurrentJobsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobsResponse")
    public Future<?> getCurrentJobsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetCurrentJobsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteBackgroundJob>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCurrentJobs", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobs")
    @ResponseWrapper(localName = "getCurrentJobsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetCurrentJobsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCurrentJobsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCurrentJobsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getCurrentJobs/Fault/ServerSideException")
    })
    public List<RemoteBackgroundJob> getCurrentJobs(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param jobId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.KillJobResponse>
     */
    @WebMethod(operationName = "killJob")
    @RequestWrapper(localName = "killJob", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJob")
    @ResponseWrapper(localName = "killJobResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJobResponse")
    public Response<KillJobResponse> killJobAsync(
        @WebParam(name = "jobId", targetNamespace = "")
        long jobId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param jobId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "killJob")
    @RequestWrapper(localName = "killJob", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJob")
    @ResponseWrapper(localName = "killJobResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJobResponse")
    public Future<?> killJobAsync(
        @WebParam(name = "jobId", targetNamespace = "")
        long jobId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<KillJobResponse> asyncHandler);

    /**
     * 
     * @param jobId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "killJob", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJob")
    @ResponseWrapper(localName = "killJobResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.KillJobResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/killJobRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/killJobResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/killJob/Fault/ServerSideException")
    })
    public void killJob(
        @WebParam(name = "jobId", targetNamespace = "")
        long jobId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param parentId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetPoolsResponse>
     */
    @WebMethod(operationName = "getSubnetPools")
    @RequestWrapper(localName = "getSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPools")
    @ResponseWrapper(localName = "getSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolsResponse")
    public Response<GetSubnetPoolsResponse> getSubnetPoolsAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param parentId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnetPools")
    @RequestWrapper(localName = "getSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPools")
    @ResponseWrapper(localName = "getSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolsResponse")
    public Future<?> getSubnetPoolsAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetPoolsResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param parentId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemotePool>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnetPools", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPools")
    @ResponseWrapper(localName = "getSubnetPoolsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPoolsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPoolsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPools/Fault/ServerSideException")
    })
    public List<RemotePool> getSubnetPools(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetsResponse>
     */
    @WebMethod(operationName = "getSubnets")
    @RequestWrapper(localName = "getSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnets")
    @ResponseWrapper(localName = "getSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsResponse")
    public Response<GetSubnetsResponse> getSubnetsAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnets")
    @RequestWrapper(localName = "getSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnets")
    @ResponseWrapper(localName = "getSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsResponse")
    public Future<?> getSubnetsAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetsResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param limit
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnets", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnets")
    @ResponseWrapper(localName = "getSubnetsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnets/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSubnets(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @param subnetPoolName
     * @param subnetPoolDescription
     * @param parentId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSubnetPoolResponse>
     */
    @WebMethod(operationName = "createSubnetPool")
    @RequestWrapper(localName = "createSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPool")
    @ResponseWrapper(localName = "createSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPoolResponse")
    public Response<CreateSubnetPoolResponse> createSubnetPoolAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "subnetPoolName", targetNamespace = "")
        String subnetPoolName,
        @WebParam(name = "subnetPoolDescription", targetNamespace = "")
        String subnetPoolDescription,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param subnetPoolName
     * @param subnetPoolDescription
     * @param asyncHandler
     * @param parentId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSubnetPool")
    @RequestWrapper(localName = "createSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPool")
    @ResponseWrapper(localName = "createSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPoolResponse")
    public Future<?> createSubnetPoolAsync(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "subnetPoolName", targetNamespace = "")
        String subnetPoolName,
        @WebParam(name = "subnetPoolDescription", targetNamespace = "")
        String subnetPoolDescription,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSubnetPoolResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @param subnetPoolName
     * @param subnetPoolDescription
     * @param parentId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPool")
    @ResponseWrapper(localName = "createSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSubnetPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnetPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnetPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSubnetPool/Fault/ServerSideException")
    })
    public String createSubnetPool(
        @WebParam(name = "parentId", targetNamespace = "")
        String parentId,
        @WebParam(name = "subnetPoolName", targetNamespace = "")
        String subnetPoolName,
        @WebParam(name = "subnetPoolDescription", targetNamespace = "")
        String subnetPoolDescription,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param subnetPoolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetPoolResponse>
     */
    @WebMethod(operationName = "getSubnetPool")
    @RequestWrapper(localName = "getSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPool")
    @ResponseWrapper(localName = "getSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolResponse")
    public Response<GetSubnetPoolResponse> getSubnetPoolAsync(
        @WebParam(name = "subnetPoolId", targetNamespace = "")
        String subnetPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param subnetPoolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnetPool")
    @RequestWrapper(localName = "getSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPool")
    @ResponseWrapper(localName = "getSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolResponse")
    public Future<?> getSubnetPoolAsync(
        @WebParam(name = "subnetPoolId", targetNamespace = "")
        String subnetPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetPoolResponse> asyncHandler);

    /**
     * 
     * @param subnetPoolId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnetPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPool")
    @ResponseWrapper(localName = "getSubnetPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetPool/Fault/ServerSideException")
    })
    public RemotePool getSubnetPool(
        @WebParam(name = "subnetPoolId", targetNamespace = "")
        String subnetPoolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentClassName
     * @param attributes
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AddIPAddressResponse>
     */
    @WebMethod(operationName = "addIPAddress")
    @RequestWrapper(localName = "addIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddress")
    @ResponseWrapper(localName = "addIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddressResponse")
    public Response<AddIPAddressResponse> addIPAddressAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentClassName
     * @param attributes
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addIPAddress")
    @RequestWrapper(localName = "addIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddress")
    @ResponseWrapper(localName = "addIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddressResponse")
    public Future<?> addIPAddressAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddIPAddressResponse> asyncHandler);

    /**
     * 
     * @param parentClassName
     * @param attributes
     * @param id
     * @param sessionId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddress")
    @ResponseWrapper(localName = "addIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AddIPAddressResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addIPAddressRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addIPAddressResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/addIPAddress/Fault/ServerSideException")
    })
    public String addIPAddress(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "parentClassName", targetNamespace = "")
        String parentClassName,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RemoveIPResponse>
     */
    @WebMethod(operationName = "removeIP")
    @RequestWrapper(localName = "removeIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIP")
    @ResponseWrapper(localName = "removeIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIPResponse")
    public Response<RemoveIPResponse> removeIPAsync(
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param releaseRelationships
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "removeIP")
    @RequestWrapper(localName = "removeIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIP")
    @ResponseWrapper(localName = "removeIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIPResponse")
    public Future<?> removeIPAsync(
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RemoveIPResponse> asyncHandler);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param releaseRelationships
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "removeIP", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIP")
    @ResponseWrapper(localName = "removeIPResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RemoveIPResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeIPRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeIPResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/removeIP/Fault/ServerSideException")
    })
    public void removeIP(
        @WebParam(name = "oid", targetNamespace = "")
        List<String> oid,
        @WebParam(name = "releaseRelationships", targetNamespace = "")
        boolean releaseRelationships,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSubnetUsedIpsResponse>
     */
    @WebMethod(operationName = "getSubnetUsedIps")
    @RequestWrapper(localName = "getSubnetUsedIps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIps")
    @ResponseWrapper(localName = "getSubnetUsedIpsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIpsResponse")
    public Response<GetSubnetUsedIpsResponse> getSubnetUsedIpsAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSubnetUsedIps")
    @RequestWrapper(localName = "getSubnetUsedIps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIps")
    @ResponseWrapper(localName = "getSubnetUsedIpsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIpsResponse")
    public Future<?> getSubnetUsedIpsAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSubnetUsedIpsResponse> asyncHandler);

    /**
     * 
     * @param limit
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteObjectLight>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubnetUsedIps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIps")
    @ResponseWrapper(localName = "getSubnetUsedIpsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSubnetUsedIpsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetUsedIpsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetUsedIpsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSubnetUsedIps/Fault/ServerSideException")
    })
    public List<RemoteObjectLight> getSubnetUsedIps(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "limit", targetNamespace = "")
        int limit,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param vlanId
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateSubnetToVlanResponse>
     */
    @WebMethod(operationName = "relateSubnetToVlan")
    @RequestWrapper(localName = "relateSubnetToVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlan")
    @ResponseWrapper(localName = "relateSubnetToVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlanResponse")
    public Response<RelateSubnetToVlanResponse> relateSubnetToVlanAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param vlanId
     * @param className
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateSubnetToVlan")
    @RequestWrapper(localName = "relateSubnetToVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlan")
    @ResponseWrapper(localName = "relateSubnetToVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlanResponse")
    public Future<?> relateSubnetToVlanAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateSubnetToVlanResponse> asyncHandler);

    /**
     * 
     * @param vlanId
     * @param className
     * @param id
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateSubnetToVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlan")
    @ResponseWrapper(localName = "relateSubnetToVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVlanResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVlanRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVlanResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVlan/Fault/ServerSideException")
    })
    public void relateSubnetToVlan(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param subnetId
     * @param vlanId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleaseSubnetFromVlanResponse>
     */
    @WebMethod(operationName = "releaseSubnetFromVlan")
    @RequestWrapper(localName = "releaseSubnetFromVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlan")
    @ResponseWrapper(localName = "releaseSubnetFromVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlanResponse")
    public Response<ReleaseSubnetFromVlanResponse> releaseSubnetFromVlanAsync(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param subnetId
     * @param vlanId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releaseSubnetFromVlan")
    @RequestWrapper(localName = "releaseSubnetFromVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlan")
    @ResponseWrapper(localName = "releaseSubnetFromVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlanResponse")
    public Future<?> releaseSubnetFromVlanAsync(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleaseSubnetFromVlanResponse> asyncHandler);

    /**
     * 
     * @param subnetId
     * @param vlanId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releaseSubnetFromVlan", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlan")
    @ResponseWrapper(localName = "releaseSubnetFromVlanResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleaseSubnetFromVlanResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVlanRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVlanResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releaseSubnetFromVlan/Fault/ServerSideException")
    })
    public void releaseSubnetFromVlan(
        @WebParam(name = "subnetId", targetNamespace = "")
        String subnetId,
        @WebParam(name = "vlanId", targetNamespace = "")
        String vlanId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param vrfId
     * @param className
     * @param id
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateSubnetToVrfResponse>
     */
    @WebMethod(operationName = "relateSubnetToVrf")
    @RequestWrapper(localName = "relateSubnetToVrf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrf")
    @ResponseWrapper(localName = "relateSubnetToVrfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrfResponse")
    public Response<RelateSubnetToVrfResponse> relateSubnetToVrfAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param vrfId
     * @param className
     * @param id
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateSubnetToVrf")
    @RequestWrapper(localName = "relateSubnetToVrf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrf")
    @ResponseWrapper(localName = "relateSubnetToVrfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrfResponse")
    public Future<?> relateSubnetToVrfAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateSubnetToVrfResponse> asyncHandler);

    /**
     * 
     * @param vrfId
     * @param className
     * @param id
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateSubnetToVrf", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrf")
    @ResponseWrapper(localName = "relateSubnetToVrfResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateSubnetToVrfResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVrfRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVrfResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateSubnetToVrf/Fault/ServerSideException")
    })
    public void relateSubnetToVrf(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "vrfId", targetNamespace = "")
        String vrfId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param portClassName
     * @param id
     * @param sessionId
     * @param portId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.RelateIPtoPortResponse>
     */
    @WebMethod(operationName = "relateIPtoPort")
    @RequestWrapper(localName = "relateIPtoPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPort")
    @ResponseWrapper(localName = "relateIPtoPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPortResponse")
    public Response<RelateIPtoPortResponse> relateIPtoPortAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param portClassName
     * @param id
     * @param sessionId
     * @param portId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "relateIPtoPort")
    @RequestWrapper(localName = "relateIPtoPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPort")
    @ResponseWrapper(localName = "relateIPtoPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPortResponse")
    public Future<?> relateIPtoPortAsync(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<RelateIPtoPortResponse> asyncHandler);

    /**
     * 
     * @param portClassName
     * @param id
     * @param sessionId
     * @param portId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "relateIPtoPort", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPort")
    @ResponseWrapper(localName = "relateIPtoPortResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.RelateIPtoPortResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateIPtoPortRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateIPtoPortResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/relateIPtoPort/Fault/ServerSideException")
    })
    public void relateIPtoPort(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "portClassName", targetNamespace = "")
        String portClassName,
        @WebParam(name = "portId", targetNamespace = "")
        String portId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param broadcastIp
     * @param networkIp
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ItOverlapsResponse>
     */
    @WebMethod(operationName = "itOverlaps")
    @RequestWrapper(localName = "itOverlaps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlaps")
    @ResponseWrapper(localName = "itOverlapsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlapsResponse")
    public Response<ItOverlapsResponse> itOverlapsAsync(
        @WebParam(name = "networkIp", targetNamespace = "")
        String networkIp,
        @WebParam(name = "broadcastIp", targetNamespace = "")
        String broadcastIp,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param broadcastIp
     * @param networkIp
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "itOverlaps")
    @RequestWrapper(localName = "itOverlaps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlaps")
    @ResponseWrapper(localName = "itOverlapsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlapsResponse")
    public Future<?> itOverlapsAsync(
        @WebParam(name = "networkIp", targetNamespace = "")
        String networkIp,
        @WebParam(name = "broadcastIp", targetNamespace = "")
        String broadcastIp,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ItOverlapsResponse> asyncHandler);

    /**
     * 
     * @param broadcastIp
     * @param networkIp
     * @param sessionId
     * @return
     *     returns boolean
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "itOverlaps", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlaps")
    @ResponseWrapper(localName = "itOverlapsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ItOverlapsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/itOverlapsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/itOverlapsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/itOverlaps/Fault/ServerSideException")
    })
    public boolean itOverlaps(
        @WebParam(name = "networkIp", targetNamespace = "")
        String networkIp,
        @WebParam(name = "broadcastIp", targetNamespace = "")
        String broadcastIp,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AssociateObjectsToContractResponse>
     */
    @WebMethod(operationName = "associateObjectsToContract")
    @RequestWrapper(localName = "associateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContract")
    @ResponseWrapper(localName = "associateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContractResponse")
    public Response<AssociateObjectsToContractResponse> associateObjectsToContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "associateObjectsToContract")
    @RequestWrapper(localName = "associateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContract")
    @ResponseWrapper(localName = "associateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContractResponse")
    public Future<?> associateObjectsToContractAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AssociateObjectsToContractResponse> asyncHandler);

    /**
     * 
     * @param contractClass
     * @param objectClass
     * @param contractId
     * @param sessionId
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "associateObjectsToContract", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContract")
    @ResponseWrapper(localName = "associateObjectsToContractResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociateObjectsToContractResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectsToContractRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectsToContractResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associateObjectsToContract/Fault/ServerSideException")
    })
    public void associateObjectsToContract(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "contractClass", targetNamespace = "")
        String contractClass,
        @WebParam(name = "contractId", targetNamespace = "")
        String contractId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param connectionId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetMPLSLinkEndpointsResponse>
     */
    @WebMethod(operationName = "getMPLSLinkEndpoints")
    @RequestWrapper(localName = "getMPLSLinkEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpoints")
    @ResponseWrapper(localName = "getMPLSLinkEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpointsResponse")
    public Response<GetMPLSLinkEndpointsResponse> getMPLSLinkEndpointsAsync(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param connectionId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getMPLSLinkEndpoints")
    @RequestWrapper(localName = "getMPLSLinkEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpoints")
    @ResponseWrapper(localName = "getMPLSLinkEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpointsResponse")
    public Future<?> getMPLSLinkEndpointsAsync(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetMPLSLinkEndpointsResponse> asyncHandler);

    /**
     * 
     * @param connectionId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteMPLSConnectionDetails
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMPLSLinkEndpoints", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpoints")
    @ResponseWrapper(localName = "getMPLSLinkEndpointsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetMPLSLinkEndpointsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMPLSLinkEndpointsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMPLSLinkEndpointsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getMPLSLinkEndpoints/Fault/ServerSideException")
    })
    public RemoteMPLSConnectionDetails getMPLSLinkEndpoints(
        @WebParam(name = "connectionId", targetNamespace = "")
        String connectionId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param resourceDefinition
     * @param sessionId
     * @param resourceType
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAffectedServicesResponse>
     */
    @WebMethod(operationName = "getAffectedServices")
    @RequestWrapper(localName = "getAffectedServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServices")
    @ResponseWrapper(localName = "getAffectedServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServicesResponse")
    public Response<GetAffectedServicesResponse> getAffectedServicesAsync(
        @WebParam(name = "resourceType", targetNamespace = "")
        int resourceType,
        @WebParam(name = "resourceDefinition", targetNamespace = "")
        String resourceDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param resourceDefinition
     * @param sessionId
     * @param asyncHandler
     * @param resourceType
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAffectedServices")
    @RequestWrapper(localName = "getAffectedServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServices")
    @ResponseWrapper(localName = "getAffectedServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServicesResponse")
    public Future<?> getAffectedServicesAsync(
        @WebParam(name = "resourceType", targetNamespace = "")
        int resourceType,
        @WebParam(name = "resourceDefinition", targetNamespace = "")
        String resourceDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAffectedServicesResponse> asyncHandler);

    /**
     * 
     * @param resourceDefinition
     * @param sessionId
     * @param resourceType
     * @return
     *     returns org.inventory.communications.wsclient.RemoteAssetLevelCorrelatedInformation
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAffectedServices", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServices")
    @ResponseWrapper(localName = "getAffectedServicesResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAffectedServicesResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAffectedServicesRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAffectedServicesResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAffectedServices/Fault/ServerSideException")
    })
    public RemoteAssetLevelCorrelatedInformation getAffectedServices(
        @WebParam(name = "resourceType", targetNamespace = "")
        int resourceType,
        @WebParam(name = "resourceDefinition", targetNamespace = "")
        String resourceDefinition,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSynchronizationProvidersResponse>
     */
    @WebMethod(operationName = "getSynchronizationProviders")
    @RequestWrapper(localName = "getSynchronizationProviders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProviders")
    @ResponseWrapper(localName = "getSynchronizationProvidersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProvidersResponse")
    public Response<GetSynchronizationProvidersResponse> getSynchronizationProvidersAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSynchronizationProviders")
    @RequestWrapper(localName = "getSynchronizationProviders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProviders")
    @ResponseWrapper(localName = "getSynchronizationProvidersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProvidersResponse")
    public Future<?> getSynchronizationProvidersAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSynchronizationProvidersResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSynchronizationProvider>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSynchronizationProviders", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProviders")
    @ResponseWrapper(localName = "getSynchronizationProvidersResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationProvidersResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationProvidersRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationProvidersResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationProviders/Fault/ServerSideException")
    })
    public List<RemoteSynchronizationProvider> getSynchronizationProviders(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param syncGroupId
     * @param sessionId
     * @param parameters
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfigResponse>
     */
    @WebMethod(operationName = "createSynchronizationDataSourceConfig")
    @RequestWrapper(localName = "createSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "createSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfigResponse")
    public Response<CreateSynchronizationDataSourceConfigResponse> createSynchronizationDataSourceConfigAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSynchronizationDataSourceConfig")
    @RequestWrapper(localName = "createSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "createSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfigResponse")
    public Future<?> createSynchronizationDataSourceConfigAsync(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSynchronizationDataSourceConfigResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param syncGroupId
     * @param sessionId
     * @param parameters
     * @param objectId
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSynchronizationDataSourceConfig", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfig")
    @ResponseWrapper(localName = "createSynchronizationDataSourceConfigResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationDataSourceConfigResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationDataSourceConfigRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationDataSourceConfigResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationDataSourceConfig/Fault/ServerSideException")
    })
    public long createSynchronizationDataSourceConfig(
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateSynchronizationGroupResponse>
     */
    @WebMethod(operationName = "createSynchronizationGroup")
    @RequestWrapper(localName = "createSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroup")
    @ResponseWrapper(localName = "createSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroupResponse")
    public Response<CreateSynchronizationGroupResponse> createSynchronizationGroupAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param name
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createSynchronizationGroup")
    @RequestWrapper(localName = "createSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroup")
    @ResponseWrapper(localName = "createSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroupResponse")
    public Future<?> createSynchronizationGroupAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateSynchronizationGroupResponse> asyncHandler);

    /**
     * 
     * @param name
     * @param sessionId
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroup")
    @ResponseWrapper(localName = "createSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateSynchronizationGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createSynchronizationGroup/Fault/ServerSideException")
    })
    public long createSynchronizationGroup(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupProperties
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateSynchronizationGroupResponse>
     */
    @WebMethod(operationName = "updateSynchronizationGroup")
    @RequestWrapper(localName = "updateSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroup")
    @ResponseWrapper(localName = "updateSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroupResponse")
    public Response<UpdateSynchronizationGroupResponse> updateSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncGroupProperties", targetNamespace = "")
        List<StringPair> syncGroupProperties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupProperties
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateSynchronizationGroup")
    @RequestWrapper(localName = "updateSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroup")
    @ResponseWrapper(localName = "updateSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroupResponse")
    public Future<?> updateSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncGroupProperties", targetNamespace = "")
        List<StringPair> syncGroupProperties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateSynchronizationGroupResponse> asyncHandler);

    /**
     * 
     * @param syncGroupProperties
     * @param syncGroupId
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroup")
    @ResponseWrapper(localName = "updateSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSynchronizationGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSynchronizationGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSynchronizationGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSynchronizationGroup/Fault/ServerSideException")
    })
    public void updateSynchronizationGroup(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "syncGroupProperties", targetNamespace = "")
        List<StringPair> syncGroupProperties,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSynchronizationGroupResponse>
     */
    @WebMethod(operationName = "getSynchronizationGroup")
    @RequestWrapper(localName = "getSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroup")
    @ResponseWrapper(localName = "getSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupResponse")
    public Response<GetSynchronizationGroupResponse> getSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSynchronizationGroup")
    @RequestWrapper(localName = "getSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroup")
    @ResponseWrapper(localName = "getSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupResponse")
    public Future<?> getSynchronizationGroupAsync(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSynchronizationGroupResponse> asyncHandler);

    /**
     * 
     * @param syncGroupId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteSynchronizationGroup
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSynchronizationGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroup")
    @ResponseWrapper(localName = "getSynchronizationGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroup/Fault/ServerSideException")
    })
    public RemoteSynchronizationGroup getSynchronizationGroup(
        @WebParam(name = "syncGroupId", targetNamespace = "")
        long syncGroupId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetSynchronizationGroupsResponse>
     */
    @WebMethod(operationName = "getSynchronizationGroups")
    @RequestWrapper(localName = "getSynchronizationGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroups")
    @ResponseWrapper(localName = "getSynchronizationGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupsResponse")
    public Response<GetSynchronizationGroupsResponse> getSynchronizationGroupsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getSynchronizationGroups")
    @RequestWrapper(localName = "getSynchronizationGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroups")
    @ResponseWrapper(localName = "getSynchronizationGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupsResponse")
    public Future<?> getSynchronizationGroupsAsync(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetSynchronizationGroupsResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteSynchronizationGroup>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSynchronizationGroups", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroups")
    @ResponseWrapper(localName = "getSynchronizationGroupsResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetSynchronizationGroupsResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroupsRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroupsResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getSynchronizationGroups/Fault/ServerSideException")
    })
    public List<RemoteSynchronizationGroup> getSynchronizationGroups(
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sessionId
     * @param parameters
     * @param syncDataSourceConfigId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.UpdateSyncDataSourceConfigurationResponse>
     */
    @WebMethod(operationName = "updateSyncDataSourceConfiguration")
    @RequestWrapper(localName = "updateSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "updateSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfigurationResponse")
    public Response<UpdateSyncDataSourceConfigurationResponse> updateSyncDataSourceConfigurationAsync(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param sessionId
     * @param asyncHandler
     * @param parameters
     * @param syncDataSourceConfigId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateSyncDataSourceConfiguration")
    @RequestWrapper(localName = "updateSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "updateSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfigurationResponse")
    public Future<?> updateSyncDataSourceConfigurationAsync(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateSyncDataSourceConfigurationResponse> asyncHandler);

    /**
     * 
     * @param sessionId
     * @param parameters
     * @param syncDataSourceConfigId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateSyncDataSourceConfiguration", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfiguration")
    @ResponseWrapper(localName = "updateSyncDataSourceConfigurationResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.UpdateSyncDataSourceConfigurationResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSyncDataSourceConfigurationRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSyncDataSourceConfigurationResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/updateSyncDataSourceConfiguration/Fault/ServerSideException")
    })
    public void updateSyncDataSourceConfiguration(
        @WebParam(name = "syncDataSourceConfigId", targetNamespace = "")
        long syncDataSourceConfigId,
        @WebParam(name = "parameters", targetNamespace = "")
        List<StringPair> parameters,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param warehouseClass
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouseResponse>
     */
    @WebMethod(operationName = "associatePhysicalNodeToWarehouse")
    @RequestWrapper(localName = "associatePhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatePhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouseResponse")
    public Response<AssociatePhysicalNodeToWarehouseResponse> associatePhysicalNodeToWarehouseAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param warehouseClass
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "associatePhysicalNodeToWarehouse")
    @RequestWrapper(localName = "associatePhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatePhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouseResponse")
    public Future<?> associatePhysicalNodeToWarehouseAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AssociatePhysicalNodeToWarehouseResponse> asyncHandler);

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param warehouseClass
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "associatePhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatePhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatePhysicalNodeToWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatePhysicalNodeToWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatePhysicalNodeToWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatePhysicalNodeToWarehouse/Fault/ServerSideException")
    })
    public void associatePhysicalNodeToWarehouse(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param warehouseClass
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouseResponse>
     */
    @WebMethod(operationName = "associatesPhysicalNodeToWarehouse")
    @RequestWrapper(localName = "associatesPhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatesPhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouseResponse")
    public Response<AssociatesPhysicalNodeToWarehouseResponse> associatesPhysicalNodeToWarehouseAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param asyncHandler
     * @param warehouseClass
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "associatesPhysicalNodeToWarehouse")
    @RequestWrapper(localName = "associatesPhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatesPhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouseResponse")
    public Future<?> associatesPhysicalNodeToWarehouseAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AssociatesPhysicalNodeToWarehouseResponse> asyncHandler);

    /**
     * 
     * @param warehouseId
     * @param objectClass
     * @param sessionId
     * @param warehouseClass
     * @param objectId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "associatesPhysicalNodeToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouse")
    @ResponseWrapper(localName = "associatesPhysicalNodeToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.AssociatesPhysicalNodeToWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatesPhysicalNodeToWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatesPhysicalNodeToWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/associatesPhysicalNodeToWarehouse/Fault/ServerSideException")
    })
    public void associatesPhysicalNodeToWarehouse(
        @WebParam(name = "objectClass", targetNamespace = "")
        List<String> objectClass,
        @WebParam(name = "objectId", targetNamespace = "")
        List<String> objectId,
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param targetId
     * @param warehouseId
     * @param sessionId
     * @param warehouseClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouseResponse>
     */
    @WebMethod(operationName = "releasePhysicalNodeFromWarehouse")
    @RequestWrapper(localName = "releasePhysicalNodeFromWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouse")
    @ResponseWrapper(localName = "releasePhysicalNodeFromWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouseResponse")
    public Response<ReleasePhysicalNodeFromWarehouseResponse> releasePhysicalNodeFromWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param targetId
     * @param warehouseId
     * @param sessionId
     * @param asyncHandler
     * @param warehouseClass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "releasePhysicalNodeFromWarehouse")
    @RequestWrapper(localName = "releasePhysicalNodeFromWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouse")
    @ResponseWrapper(localName = "releasePhysicalNodeFromWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouseResponse")
    public Future<?> releasePhysicalNodeFromWarehouseAsync(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReleasePhysicalNodeFromWarehouseResponse> asyncHandler);

    /**
     * 
     * @param targetId
     * @param warehouseId
     * @param sessionId
     * @param warehouseClass
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "releasePhysicalNodeFromWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouse")
    @ResponseWrapper(localName = "releasePhysicalNodeFromWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.ReleasePhysicalNodeFromWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePhysicalNodeFromWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePhysicalNodeFromWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/releasePhysicalNodeFromWarehouse/Fault/ServerSideException")
    })
    public void releasePhysicalNodeFromWarehouse(
        @WebParam(name = "warehouseClass", targetNamespace = "")
        String warehouseClass,
        @WebParam(name = "warehouseId", targetNamespace = "")
        String warehouseId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveObjectsToWarehousePoolResponse>
     */
    @WebMethod(operationName = "moveObjectsToWarehousePool")
    @RequestWrapper(localName = "moveObjectsToWarehousePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePool")
    @ResponseWrapper(localName = "moveObjectsToWarehousePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePoolResponse")
    public Response<MoveObjectsToWarehousePoolResponse> moveObjectsToWarehousePoolAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveObjectsToWarehousePool")
    @RequestWrapper(localName = "moveObjectsToWarehousePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePool")
    @ResponseWrapper(localName = "moveObjectsToWarehousePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePoolResponse")
    public Future<?> moveObjectsToWarehousePoolAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveObjectsToWarehousePoolResponse> asyncHandler);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveObjectsToWarehousePool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePool")
    @ResponseWrapper(localName = "moveObjectsToWarehousePoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehousePoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehousePoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehousePoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehousePool/Fault/ServerSideException")
    })
    public void moveObjectsToWarehousePool(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.MoveObjectsToWarehouseResponse>
     */
    @WebMethod(operationName = "moveObjectsToWarehouse")
    @RequestWrapper(localName = "moveObjectsToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouse")
    @ResponseWrapper(localName = "moveObjectsToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouseResponse")
    public Response<MoveObjectsToWarehouseResponse> moveObjectsToWarehouseAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "moveObjectsToWarehouse")
    @RequestWrapper(localName = "moveObjectsToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouse")
    @ResponseWrapper(localName = "moveObjectsToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouseResponse")
    public Future<?> moveObjectsToWarehouseAsync(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MoveObjectsToWarehouseResponse> asyncHandler);

    /**
     * 
     * @param objectsOids
     * @param targetClass
     * @param objectsClasses
     * @param targetOid
     * @param sessionId
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "moveObjectsToWarehouse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouse")
    @ResponseWrapper(localName = "moveObjectsToWarehouseResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.MoveObjectsToWarehouseResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehouseRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehouseResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/moveObjectsToWarehouse/Fault/ServerSideException")
    })
    public void moveObjectsToWarehouse(
        @WebParam(name = "targetClass", targetNamespace = "")
        String targetClass,
        @WebParam(name = "targetOid", targetNamespace = "")
        String targetOid,
        @WebParam(name = "objectsClasses", targetNamespace = "")
        List<String> objectsClasses,
        @WebParam(name = "objectsOids", targetNamespace = "")
        List<String> objectsOids,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param mappedBgpLinksIds
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetBGPMapResponse>
     */
    @WebMethod(operationName = "getBGPMap")
    @RequestWrapper(localName = "getBGPMap", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMap")
    @ResponseWrapper(localName = "getBGPMapResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMapResponse")
    public Response<GetBGPMapResponse> getBGPMapAsync(
        @WebParam(name = "mappedBgpLinksIds", targetNamespace = "")
        List<String> mappedBgpLinksIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param mappedBgpLinksIds
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getBGPMap")
    @RequestWrapper(localName = "getBGPMap", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMap")
    @ResponseWrapper(localName = "getBGPMapResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMapResponse")
    public Future<?> getBGPMapAsync(
        @WebParam(name = "mappedBgpLinksIds", targetNamespace = "")
        List<String> mappedBgpLinksIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetBGPMapResponse> asyncHandler);

    /**
     * 
     * @param mappedBgpLinksIds
     * @param sessionId
     * @return
     *     returns java.util.List<org.inventory.communications.wsclient.RemoteLogicalConnectionDetails>
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBGPMap", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMap")
    @ResponseWrapper(localName = "getBGPMapResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetBGPMapResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBGPMapRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBGPMapResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getBGPMap/Fault/ServerSideException")
    })
    public List<RemoteLogicalConnectionDetails> getBGPMap(
        @WebParam(name = "mappedBgpLinksIds", targetNamespace = "")
        List<String> mappedBgpLinksIds,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetIPAddressResponse>
     */
    @WebMethod(operationName = "getIPAddress")
    @RequestWrapper(localName = "getIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddress")
    @ResponseWrapper(localName = "getIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddressResponse")
    public Response<GetIPAddressResponse> getIPAddressAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getIPAddress")
    @RequestWrapper(localName = "getIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddress")
    @ResponseWrapper(localName = "getIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddressResponse")
    public Future<?> getIPAddressAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetIPAddressResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getIPAddress", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddress")
    @ResponseWrapper(localName = "getIPAddressResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetIPAddressResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getIPAddressRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getIPAddressResponse")
    public String getIPAddress();

    /**
     * 
     * @param groupName
     * @param description
     * @param sessionId
     * @param users
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateGroupResponse>
     */
    @WebMethod(operationName = "createGroup")
    @RequestWrapper(localName = "createGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroup")
    @ResponseWrapper(localName = "createGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroupResponse")
    public Response<CreateGroupResponse> createGroupAsync(
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "users", targetNamespace = "")
        List<Long> users,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param groupName
     * @param description
     * @param sessionId
     * @param asyncHandler
     * @param users
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createGroup")
    @RequestWrapper(localName = "createGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroup")
    @ResponseWrapper(localName = "createGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroupResponse")
    public Future<?> createGroupAsync(
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "users", targetNamespace = "")
        List<Long> users,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateGroupResponse> asyncHandler);

    /**
     * 
     * @param groupName
     * @param description
     * @param sessionId
     * @param users
     * @return
     *     returns long
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createGroup", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroup")
    @ResponseWrapper(localName = "createGroupResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateGroupResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGroupRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGroupResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createGroup/Fault/ServerSideException")
    })
    public long createGroup(
        @WebParam(name = "groupName", targetNamespace = "")
        String groupName,
        @WebParam(name = "description", targetNamespace = "")
        String description,
        @WebParam(name = "users", targetNamespace = "")
        List<Long> users,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param sesionId
     * @param className
     * @param attributeName
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetAttributeResponse>
     */
    @WebMethod(operationName = "getAttribute")
    @RequestWrapper(localName = "getAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttribute")
    @ResponseWrapper(localName = "getAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeResponse")
    public Response<GetAttributeResponse> getAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sesionId", targetNamespace = "")
        String sesionId);

    /**
     * 
     * @param sesionId
     * @param className
     * @param attributeName
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAttribute")
    @RequestWrapper(localName = "getAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttribute")
    @ResponseWrapper(localName = "getAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeResponse")
    public Future<?> getAttributeAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sesionId", targetNamespace = "")
        String sesionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAttributeResponse> asyncHandler);

    /**
     * 
     * @param sesionId
     * @param className
     * @param attributeName
     * @return
     *     returns org.inventory.communications.wsclient.RemoteAttributeMetadata
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAttribute", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttribute")
    @ResponseWrapper(localName = "getAttributeResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetAttributeResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttributeRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttributeResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getAttribute/Fault/ServerSideException")
    })
    public RemoteAttributeMetadata getAttribute(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "attributeName", targetNamespace = "")
        String attributeName,
        @WebParam(name = "sesionId", targetNamespace = "")
        String sesionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param proxyPoolId
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateProxyResponse>
     */
    @WebMethod(operationName = "createProxy")
    @RequestWrapper(localName = "createProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxy")
    @ResponseWrapper(localName = "createProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyResponse")
    public Response<CreateProxyResponse> createProxyAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param proxyPoolId
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createProxy")
    @RequestWrapper(localName = "createProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxy")
    @ResponseWrapper(localName = "createProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyResponse")
    public Future<?> createProxyAsync(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateProxyResponse> asyncHandler);

    /**
     * 
     * @param proxyPoolId
     * @param attributes
     * @param sessionId
     * @param proxyClass
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createProxy", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxy")
    @ResponseWrapper(localName = "createProxyResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateProxyResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxyRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxyResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createProxy/Fault/ServerSideException")
    })
    public String createProxy(
        @WebParam(name = "proxyPoolId", targetNamespace = "")
        String proxyPoolId,
        @WebParam(name = "proxyClass", targetNamespace = "")
        String proxyClass,
        @WebParam(name = "attributes", targetNamespace = "")
        List<StringPair> attributes,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetClassResponse>
     */
    @WebMethod(operationName = "getClass")
    @RequestWrapper(localName = "getClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClass")
    @ResponseWrapper(localName = "getClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassResponse")
    public Response<GetClassResponse> getClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getClass")
    @RequestWrapper(localName = "getClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClass")
    @ResponseWrapper(localName = "getClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassResponse")
    public Future<?> getClassAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetClassResponse> asyncHandler);

    /**
     * 
     * @param className
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteClassMetadata
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getClass", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClass")
    @ResponseWrapper(localName = "getClassResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetClassResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClassResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getClass/Fault/ServerSideException")
    })
    public RemoteClassMetadata getClass(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetObjectResponse>
     */
    @WebMethod(operationName = "getObject")
    @RequestWrapper(localName = "getObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObject")
    @ResponseWrapper(localName = "getObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectResponse")
    public Response<GetObjectResponse> getObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getObject")
    @RequestWrapper(localName = "getObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObject")
    @ResponseWrapper(localName = "getObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectResponse")
    public Future<?> getObjectAsync(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetObjectResponse> asyncHandler);

    /**
     * 
     * @param objectClass
     * @param oid
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObject")
    @ResponseWrapper(localName = "getObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getObject/Fault/ServerSideException")
    })
    public RemoteObject getObject(
        @WebParam(name = "objectClass", targetNamespace = "")
        String objectClass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetParentResponse>
     */
    @WebMethod(operationName = "getParent")
    @RequestWrapper(localName = "getParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParent")
    @ResponseWrapper(localName = "getParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentResponse")
    public Response<GetParentResponse> getParentAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param asyncHandler
     * @param objectclass
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getParent")
    @RequestWrapper(localName = "getParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParent")
    @ResponseWrapper(localName = "getParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentResponse")
    public Future<?> getParentAsync(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetParentResponse> asyncHandler);

    /**
     * 
     * @param oid
     * @param sessionId
     * @param objectclass
     * @return
     *     returns org.inventory.communications.wsclient.RemoteObjectLight
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getParent", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParent")
    @ResponseWrapper(localName = "getParentResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetParentResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParentResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getParent/Fault/ServerSideException")
    })
    public RemoteObjectLight getParent(
        @WebParam(name = "objectclass", targetNamespace = "")
        String objectclass,
        @WebParam(name = "oid", targetNamespace = "")
        String oid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetQueryResponse>
     */
    @WebMethod(operationName = "getQuery")
    @RequestWrapper(localName = "getQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQuery")
    @ResponseWrapper(localName = "getQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueryResponse")
    public Response<GetQueryResponse> getQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getQuery")
    @RequestWrapper(localName = "getQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQuery")
    @ResponseWrapper(localName = "getQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueryResponse")
    public Future<?> getQueryAsync(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetQueryResponse> asyncHandler);

    /**
     * 
     * @param queryOid
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteQuery
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getQuery", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQuery")
    @ResponseWrapper(localName = "getQueryResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetQueryResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQueryRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQueryResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getQuery/Fault/ServerSideException")
    })
    public RemoteQuery getQuery(
        @WebParam(name = "queryOid", targetNamespace = "")
        long queryOid,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param objectId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetFileResponse>
     */
    @WebMethod(operationName = "getFile")
    @RequestWrapper(localName = "getFile", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFile")
    @ResponseWrapper(localName = "getFileResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFileResponse")
    public Response<GetFileResponse> getFileAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param asyncHandler
     * @param objectId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFile")
    @RequestWrapper(localName = "getFile", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFile")
    @ResponseWrapper(localName = "getFileResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFileResponse")
    public Future<?> getFileAsync(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetFileResponse> asyncHandler);

    /**
     * 
     * @param fileObjectId
     * @param className
     * @param sessionId
     * @param objectId
     * @return
     *     returns org.inventory.communications.wsclient.RemoteFileObject
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFile", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFile")
    @ResponseWrapper(localName = "getFileResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetFileResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFileRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFileResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getFile/Fault/ServerSideException")
    })
    public RemoteFileObject getFile(
        @WebParam(name = "fileObjectId", targetNamespace = "")
        long fileObjectId,
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "objectId", targetNamespace = "")
        String objectId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param poolId
     * @param sessionId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.GetPoolResponse>
     */
    @WebMethod(operationName = "getPool")
    @RequestWrapper(localName = "getPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPool")
    @ResponseWrapper(localName = "getPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolResponse")
    public Response<GetPoolResponse> getPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPool")
    @RequestWrapper(localName = "getPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPool")
    @ResponseWrapper(localName = "getPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolResponse")
    public Future<?> getPoolAsync(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetPoolResponse> asyncHandler);

    /**
     * 
     * @param poolId
     * @param sessionId
     * @return
     *     returns org.inventory.communications.wsclient.RemotePool
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPool", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPool")
    @ResponseWrapper(localName = "getPoolResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.GetPoolResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPoolResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/getPool/Fault/ServerSideException")
    })
    public RemotePool getPool(
        @WebParam(name = "poolId", targetNamespace = "")
        String poolId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns javax.xml.ws.Response<org.inventory.communications.wsclient.CreateObjectResponse>
     */
    @WebMethod(operationName = "createObject")
    @RequestWrapper(localName = "createObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObject")
    @ResponseWrapper(localName = "createObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectResponse")
    public Response<CreateObjectResponse> createObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId);

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createObject")
    @RequestWrapper(localName = "createObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObject")
    @ResponseWrapper(localName = "createObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectResponse")
    public Future<?> createObjectAsync(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateObjectResponse> asyncHandler);

    /**
     * 
     * @param parentObjectClassName
     * @param attributeNames
     * @param parentOid
     * @param attributeValues
     * @param className
     * @param sessionId
     * @param templateId
     * @return
     *     returns java.lang.String
     * @throws ServerSideException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createObject", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObject")
    @ResponseWrapper(localName = "createObjectResponse", targetNamespace = "http://ws.northbound.kuwaiba.neotropic.org/", className = "org.inventory.communications.wsclient.CreateObjectResponse")
    @Action(input = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObjectRequest", output = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObjectResponse", fault = {
        @FaultAction(className = ServerSideException_Exception.class, value = "http://ws.northbound.kuwaiba.neotropic.org/KuwaibaSoapWebService/createObject/Fault/ServerSideException")
    })
    public String createObject(
        @WebParam(name = "className", targetNamespace = "")
        String className,
        @WebParam(name = "parentObjectClassName", targetNamespace = "")
        String parentObjectClassName,
        @WebParam(name = "parentOid", targetNamespace = "")
        String parentOid,
        @WebParam(name = "attributeNames", targetNamespace = "")
        List<String> attributeNames,
        @WebParam(name = "attributeValues", targetNamespace = "")
        List<String> attributeValues,
        @WebParam(name = "templateId", targetNamespace = "")
        String templateId,
        @WebParam(name = "sessionId", targetNamespace = "")
        String sessionId)
        throws ServerSideException_Exception
    ;

}
