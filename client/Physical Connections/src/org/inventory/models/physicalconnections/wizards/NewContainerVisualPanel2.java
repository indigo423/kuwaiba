/*
 *  Copyright 2010-2017 Neotropic SAS <contact@neotropic.co>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */
package org.inventory.models.physicalconnections.wizards;

import java.awt.BorderLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.inventory.communications.core.LocalObjectLight;
import org.inventory.core.services.utils.ExplorablePanel;
import org.inventory.navigation.navigationtree.nodes.ActionlessObjectNode;
import org.inventory.navigation.navigationtree.nodes.ObjectNode;
import org.openide.explorer.view.BeanTreeView;

/**
 * First step of the New Container wizard
 * @author Charles Edward Bedon Cortazar <charles.bedon@kuwaiba.org>
 */
public final class NewContainerVisualPanel2 extends JPanel {
    private ExplorablePanel pnlLeft;
    private ExplorablePanel pnlRight;
    /**
     * Creates new form NewContainerVisualPanel1
     * @param aSide The initial a side for this connection
     * @param bSide The initial b side for this connection
     */
    public NewContainerVisualPanel2(ObjectNode aSide, ObjectNode bSide) {
        BeanTreeView treeLeft;
        BeanTreeView treeRight;
        
        JLabel lblInstructions;
        
        setLayout(new BorderLayout());
        
        lblInstructions = new JLabel("Select the objects you want to connect.");
        
        treeLeft = new BeanTreeView();
        treeRight = new BeanTreeView();

        pnlLeft = new ExplorablePanel();
        pnlRight = new ExplorablePanel();
                  
        pnlLeft.getExplorerManager().setRootContext(new ActionlessObjectNode(aSide.getObject()));
        pnlRight.getExplorerManager().setRootContext(new ActionlessObjectNode(bSide.getObject()));
        
        pnlLeft.setViewportView(treeLeft);
        pnlRight.setViewportView(treeRight);
        
        add(lblInstructions, BorderLayout.NORTH);
        add(pnlLeft, BorderLayout.WEST);
        add(pnlRight, BorderLayout.EAST);
    }

    @Override
    public String getName() {
        return "Container endpoints";
    }
    
    public LocalObjectLight getSelectedAEndpoint() {
        return pnlLeft.getLookup().lookup(LocalObjectLight.class);
    }
    
    public LocalObjectLight getSelectedBEndpoint() {
        return pnlRight.getLookup().lookup(LocalObjectLight.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
