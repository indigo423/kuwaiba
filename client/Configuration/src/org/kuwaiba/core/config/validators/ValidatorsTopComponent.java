/*
 * Copyright (c) 2019 lulita.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    lulita - initial API and implementation and/or initial documentation
 */
package org.kuwaiba.core.config.validators;

import org.inventory.core.services.api.behaviors.Refreshable;
import org.kuwaiba.core.config.validators.nodes.ValidatorsRootNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.kuwaiba.core.config.validators//Validators//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ValidatorsTopComponent",
        iconBase="org/kuwaiba/core/config/res/validators.png", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.kuwaiba.core.config.validators.ValidatorsTopComponent")
@ActionReference(path = "Menu/Tools/Configuration")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ValidatorsAction",
        preferredID = "ValidatorsTopComponent"
)
@Messages({
    "CTL_ValidatorsAction=Validator Definitions",
    "CTL_ValidatorsTopComponent=Validator Definitions",
    "HINT_ValidatorsTopComponent=Configure Validators and Conditions"
})
public final class ValidatorsTopComponent extends TopComponent implements
        ExplorerManager.Provider, Refreshable {
    
    private ExplorerManager em = new ExplorerManager();

    public ValidatorsTopComponent() {
        initComponents();
        initCustomComponents();
        setName(Bundle.CTL_ValidatorsTopComponent());
        setToolTipText(Bundle.HINT_ValidatorsTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        em.setRootContext(new ValidatorsRootNode());
    }

    @Override
    public void componentClosed() {
        em.getRootContext().getChildren().remove(em.getRootContext().getChildren().getNodes());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void initCustomComponents() {
        BeanTreeView treeMain = new BeanTreeView();
        treeMain.setRootVisible(false);
        add(treeMain);
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        componentClosed();
        componentOpened();
    }
}
