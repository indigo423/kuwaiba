/*
 *  Copyright 2010-2019 Neotropic SAS <contact@neotropic.co>
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.customization.classhierarchy.importdb;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.inventory.communications.core.LocalClassMetadata;
import org.inventory.core.services.i18n.I18N;

/**
 * Interface to show uploading progress saving data into database and shows
 * messages if any error appears
 *
 * @author Hardy Ryan Chingal Martinez {@literal <ryan.chingal@kuwaiba.org>}
 */
public class UpdateProcessPanel extends javax.swing.JPanel implements ActionListener, PropertyChangeListener {

    /**
     * Default constructor Creates new form UpdateProcessPanel
     */
    public UpdateProcessPanel() {
        initComponents();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblProgress = new javax.swing.JLabel();
        pbUpload = new javax.swing.JProgressBar();
        sptErrorCreate = new javax.swing.JScrollPane();
        tblErrorCreate = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(lblProgress, I18N.gm("import_progresslbl")); // NOI18N

        tblErrorCreate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Error", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sptErrorCreate.setViewportView(tblErrorCreate);
        if (tblErrorCreate.getColumnModel().getColumnCount() > 0) {
            tblErrorCreate.getColumnModel().getColumn(0).setHeaderValue(I18N.gm("import_tableerror1colum")); // NOI18N
            tblErrorCreate.getColumnModel().getColumn(1).setHeaderValue(I18N.gm("import_tableerror2colum")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sptErrorCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblProgress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbUpload, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProgress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sptErrorCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Launch a thread to manage the updating file process
     *
     * @param selectedFile
     */
    public void uploadFileProcess(File SelectedFile) {

        pbUpload.setValue(0);
        pbUpload.setIndeterminate(true);

        FileReaderTask task = new FileReaderTask(SelectedFile) {
            /**
             * Executed in Swing's event dispatching thread
             */
            @Override
            protected void done() {
                if (!isCancelled() && getErrors() == null) {
                    pbUpload.setIndeterminate(false);
                    pbUpload.setValue(0);

                    JOptionPane.showMessageDialog(null,
                            "File has been uploaded successfully!", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    //next process        
                    saveIntoDatabase(this.getRoots());
                } else if (!isCancelled() && getErrors() != null) {
                    pbUpload.setIndeterminate(false);
                    pbUpload.setValue(0);
                    JOptionPane.showMessageDialog(null,
                            "The process ended with errors", "Message",
                            JOptionPane.ERROR_MESSAGE);
                     
                    addDataErrorTable(getErrors());
                }
            }
        };
        task.execute();

    }

    /**
     * Launch a thread to manage the saving process of data model inside
     * database
     *
     * @param selectedFile
     */
    private void saveIntoDatabase(List<LocalClassMetadata> roots) {
        pbUpload.setValue(0);
        pbUpload.setStringPainted(true);
        pbUpload.setIndeterminate(false);

        //create classs
        CreateClassesTask task = new CreateClassesTask(roots) {
            /**
             * Executed in Swing's event dispatching thread
             */
            @Override
            protected void done() {
                if (!isCancelled() && getErrors() == null) {
                    JOptionPane.showMessageDialog(null,
                            "The process was completed successfully", "Message",
                            JOptionPane.INFORMATION_MESSAGE);

                } else if (!isCancelled() && getErrors() != null) {
                    JOptionPane.showMessageDialog(null,
                            "The process ended with errors", "Message",
                            JOptionPane.ERROR_MESSAGE);                   
                    addDataErrorTable(getErrors());
                }
            }
        };
        task.addPropertyChangeListener(this);
        task.execute();
    }

    /**
     * Puts inside error table any error in update and parse file and the
     * process of create data model into database
     *     
     * @param error;HashMap<String, String>
     */
    public final void addDataErrorTable(HashMap<String, String> error) {

        tableModel = (DefaultTableModel) tblErrorCreate.getModel();
        tableModel.setRowCount(0);

        Iterator<String> itr = error.keySet().iterator();

        while (itr.hasNext()) {
            String key = itr.next();
            String value = error.get(key);

            String[] data = new String[2];
            data[0] = key;
            data[1] = value;
            tableModel.addRow(data);
        }

        tblErrorCreate.setModel(tableModel);
    }

    /**
     * Just take the parent's behavior and close the window
     *
     * @param ae
     */
    @Override
    public void actionPerformed(ActionEvent ae) {

    }

    /**
     * Places the progress of save into database in JProgressbar component
     *
     * @param pce
     */
    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if ("progress".equals(pce.getPropertyName())) {
            int progress = (Integer) pce.getNewValue();
            pbUpload.setValue(progress);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblProgress;
    private javax.swing.JProgressBar pbUpload;
    private javax.swing.JScrollPane sptErrorCreate;
    private javax.swing.JTable tblErrorCreate;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel tableModel;
    //custom variables
}
