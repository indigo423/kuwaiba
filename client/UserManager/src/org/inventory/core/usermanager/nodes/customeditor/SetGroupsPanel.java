/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 * 
 *   Licensed under the EPL License, Version 1.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *        http://www.eclipse.org/legal/epl-v10.html
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 */

package org.inventory.core.usermanager.nodes.customeditor;

import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.border.Border;
import org.inventory.core.services.api.session.LocalUserGroupObjectLight;
import org.openide.explorer.propertysheet.PropertyEnv;

/**
 * This panel shows the list of groups available and
 * @author Charles Edward Bedon Cortazar <charles.bedon@zoho.com>
 */
public final class SetGroupsPanel extends JPanel{

    /**
     * Reference to the PropertyEnv provided by property editor
     */
    private PropertyEnv env;

    /**
     * Groups the current user belongs to before to make any changes
     */
    private LocalUserGroupObjectLight[] myGroups;
    
    private JCheckBox[] checkBoxes;

    /** Creates new form SetGroupsPanel */
    public SetGroupsPanel(LocalUserGroupObjectLight[] _allGroups,
            LocalUserGroupObjectLight[] _myGroups, PropertyEnv _env) {
        initComponents();
        this.myGroups = _myGroups;
        this.checkBoxes = new JCheckBox[_allGroups.length];
        initCustomComponents(_allGroups);
        this.env = _env;
        _env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlScrollMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlMain.setLayout(new java.awt.BorderLayout());
        pnlScrollMain.setViewportView(pnlMain);

        add(pnlScrollMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlMain;
    private javax.swing.JScrollPane pnlScrollMain;
    // End of variables declaration//GEN-END:variables

    public void initCustomComponents(LocalUserGroupObjectLight[] allGroups) {
        JPanel panel = new JPanel(new GridLayout(0, 1));
        Border border = BorderFactory.createTitledBorder("Available groups");
        panel.setBorder(border);
        //panel.setLayout(new BorderLayout());

        int i = 0;
        for(LocalUserGroupObjectLight group : allGroups){
            JCheckBox checkbox = new JCheckBox(group.getName());
            for(LocalUserGroupObjectLight myGroup : myGroups){
                if(myGroup.getOid() == group.getOid()){
                    checkbox.setSelected(true);
                    break;
                }
            }
            //So we can reference the checkbox and compare its value with the content of myGroups
            checkbox.putClientProperty("object", group);
            
            checkbox.setName(String.valueOf(group.getOid()));
            panel.add(checkbox);
            checkBoxes[i] = checkbox;
            i++;
        }
        this.add(panel);
    }

    /**
     * Returns the groups to be added to the current user
     * @return An array with groups to be added to the current user
     */
    public long[] toBeAdded(){
        List<Long> res = new ArrayList<Long>();
        for (JCheckBox checkbox : checkBoxes){
            Long oid = Long.valueOf(checkbox.getName());
            if (checkbox.isSelected()){
                boolean isPresent = false;
                for (LocalUserGroupObjectLight group : myGroups){
                    if (group.getOid() == oid){
                        isPresent = true;
                        break;
                    }
                }
                if (!isPresent)
                    res.add(oid);
            }
        }
        //TODO this is awful, but the user editor will be changed in the near future
        long[] myRes = new long[res.size()];
        for (int i = 0; i< res.size(); i++)
            myRes[i] = res.get(i);
        return myRes;
    }

    /**
     * Returns the groups to be added to the current user
     * @return An array with groups to be added to the current user
     */
    public List<Long> toBeDeleted(){
        List<Long> res = new ArrayList<Long>();
        for (JCheckBox checkbox : checkBoxes){
            Long oid = Long.valueOf(checkbox.getName());
            if (!checkbox.isSelected()){
                boolean isPresent = false;
                for (LocalUserGroupObjectLight group : myGroups){
                    if (group.getOid() == oid){
                        isPresent = true;
                        break;
                    }
                }
                if (isPresent)
                    res.add(oid);
            }
        }
        return res;
    }

    public LocalUserGroupObjectLight[] getSelectedGroups() {
        List<LocalUserGroupObjectLight> groupList = new ArrayList<LocalUserGroupObjectLight>();
        for(JCheckBox checkbox : checkBoxes)
           if  (checkbox.isSelected())
               groupList.add((LocalUserGroupObjectLight)checkbox.getClientProperty("object"));

        return groupList.toArray(new LocalUserGroupObjectLight[0]);
    }
}
