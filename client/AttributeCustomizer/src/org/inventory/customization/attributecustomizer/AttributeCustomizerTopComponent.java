/*
 *  Copyright 2010 Charles Edward Bedon Cortazar <charles.bedon@zoho.com>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.customization.attributecustomizer;

import org.inventory.customization.attributecustomizer.nodes.ClassMetadataChildren;
import java.awt.BorderLayout;
import java.util.logging.Logger;
import org.inventory.core.services.interfaces.LocalClassMetadataLight;
import org.inventory.core.services.interfaces.NotificationUtil;
import org.inventory.core.services.interfaces.RefreshableTopComponent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.TreeTableView;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;

/**
 * This component is used to customize the way the attributes are shown in the interface
 */
@ConvertAsProperties(dtd = "-//org.inventory.customization.attributecustomizer//AttributeCustomizer//EN",
autostore = false)
public final class AttributeCustomizerTopComponent extends TopComponent
                           implements ExplorerManager.Provider, RefreshableTopComponent{

    private static AttributeCustomizerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/inventory/customization/attributecustomizer/res/icon.png";
    private static final String PREFERRED_ID = "AttributeCustomizerTopComponent";
    
    private ExplorerManager em = new ExplorerManager();
    private AttributeCustomizerService acs;
    private NotificationUtil nu;

    public AttributeCustomizerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(AttributeCustomizerTopComponent.class, "CTL_AttributeCustomizerTopComponent"));
        setToolTipText(NbBundle.getMessage(AttributeCustomizerTopComponent.class, "HINT_AttributeCustomizerTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        initCustomComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlClassCustomizerMain = new javax.swing.JPanel();
        lblInfo = new javax.swing.JLabel();
        pnlTableEnclosing = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(lblInfo, org.openide.util.NbBundle.getMessage(AttributeCustomizerTopComponent.class, "AttributeCustomizerTopComponent.lblInfo.text")); // NOI18N

        javax.swing.GroupLayout pnlTableEnclosingLayout = new javax.swing.GroupLayout(pnlTableEnclosing);
        pnlTableEnclosing.setLayout(pnlTableEnclosingLayout);
        pnlTableEnclosingLayout.setHorizontalGroup(
            pnlTableEnclosingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );
        pnlTableEnclosingLayout.setVerticalGroup(
            pnlTableEnclosingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlClassCustomizerMainLayout = new javax.swing.GroupLayout(pnlClassCustomizerMain);
        pnlClassCustomizerMain.setLayout(pnlClassCustomizerMainLayout);
        pnlClassCustomizerMainLayout.setHorizontalGroup(
            pnlClassCustomizerMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassCustomizerMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlClassCustomizerMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTableEnclosing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblInfo)))
        );
        pnlClassCustomizerMainLayout.setVerticalGroup(
            pnlClassCustomizerMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClassCustomizerMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTableEnclosing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlClassCustomizerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlClassCustomizerMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        acs = new AttributeCustomizerService(this);
        tblClassCustomizerMain = new TreeTableView();
        tblClassCustomizerMain.setRootVisible(false);

        setRoot();

        pnlTableEnclosing.setLayout(new BorderLayout());
        pnlTableEnclosing.add(tblClassCustomizerMain,BorderLayout.CENTER);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblInfo;
    private javax.swing.JPanel pnlClassCustomizerMain;
    private javax.swing.JPanel pnlTableEnclosing;
    // End of variables declaration//GEN-END:variables
    private TreeTableView tblClassCustomizerMain;
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized AttributeCustomizerTopComponent getDefault() {
        if (instance == null) {
            instance = new AttributeCustomizerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the AttributeCustomizerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized AttributeCustomizerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(AttributeCustomizerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof AttributeCustomizerTopComponent) {
            return (AttributeCustomizerTopComponent) win;
        }
        Logger.getLogger(AttributeCustomizerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return em;
    }

    public NotificationUtil getNotifier(){
        if (nu == null)
            nu = Lookup.getDefault().lookup(NotificationUtil.class);
        return nu;
    }

    public void setRoot(){
        LocalClassMetadataLight[] allMeta = acs.getInstanceableMeta();
        em.setRootContext(new AbstractNode(new ClassMetadataChildren(allMeta)));
        if (allMeta.length !=0)
        tblClassCustomizerMain.setProperties(em.getRootContext().getChildren().
                getNodes()[0].getChildren().getNodes()[0].getPropertySets()[0].
                getProperties());
    }

    public void refresh() {
        if (em.getRootContext().getChildren().getNodesCount() == 0){
            setRoot();
            revalidate();
        }
    }
}
