/*
 *  Copyright 2010-2017, Neotropic SAS <contact@neotropic.co>
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.inventory.design.topology;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.inventory.communications.core.views.LocalObjectView;
import org.inventory.communications.core.views.LocalObjectViewLight;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.api.notifications.NotificationUtil;
import org.inventory.core.services.utils.JComplexDialogPanel;
import org.inventory.core.visual.export.ExportScenePanel;
import org.inventory.core.visual.export.filters.ImageFilter;
import org.inventory.core.visual.export.filters.SceneExportFilter;
import org.inventory.design.topology.scene.TopologyViewScene;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component to display the TopologyView Module tools
 */
@ConvertAsProperties(
        dtd = "-//org.inventory.design.topology//TopologyDesign//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TopologyDesignTopComponent",
        iconBase= "org/inventory/design/topology/res/icon.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Tools", id = "org.inventory.design.topology.TopologyDesignTopComponent")
@ActionReferences(value = {@ActionReference(path = "Menu/Tools/Views"),
    @ActionReference(path = "Toolbars/02_Views", position = 2 )})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TopologyDesignAction",
        preferredID = "TopologyDesignTopComponent"
)
@Messages({
    "CTL_TopologyDesignAction=Topology Designer",
    "CTL_TopologyDesignTopComponent=Topology Designer",
    "HINT_TopologyDesignTopComponent=Create high-level topologies"
})
public final class TopologyDesignTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable, ActionListener {
    
    private ExplorerManager em;
    private TopologyViewScene scene;
    private TopologyViewService service;
    private TopologyViewConfigurationObject configObject;

    public TopologyDesignTopComponent() {
        initComponents();
        initCustomComponents();
        setName(Bundle.CTL_TopologyDesignTopComponent());
        setToolTipText(Bundle.HINT_TopologyDesignTopComponent());
    }
    
    public final void initCustomComponents() {
        em = new ExplorerManager();
        scene = new TopologyViewScene();
        service = new TopologyViewService(scene);
        associateLookup(scene.getLookup());
        
        configObject = Lookup.getDefault().lookup(TopologyViewConfigurationObject.class);
        configObject.setProperty("saved", true);
        
        scene.setActiveTool(TopologyViewScene.ACTION_SELECT);
        add(scene.createView());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnNewTopology = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnSelect = new javax.swing.JToggleButton();
        btnConnect = new javax.swing.JToggleButton();
        btnCloud = new javax.swing.JButton();
        btnFrame = new javax.swing.JButton();
        btnAddBackgroundImage = new javax.swing.JButton();
        btnRemoveBackground = new javax.swing.JButton();
        pnlMainScrollPanel = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);
        jToolBar1.setAlignmentY(0.5F);
        jToolBar1.setMaximumSize(new java.awt.Dimension(392, 38));
        jToolBar1.setMinimumSize(new java.awt.Dimension(392, 38));
        jToolBar1.setPreferredSize(new java.awt.Dimension(392, 38));

        btnNewTopology.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNewTopology, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnNewTopology.text")); // NOI18N
        btnNewTopology.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnNewTopology.toolTipText")); // NOI18N
        btnNewTopology.setFocusable(false);
        btnNewTopology.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewTopology.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewTopology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTopologyActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewTopology);

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/open.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnOpen, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnOpen.text")); // NOI18N
        btnOpen.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnOpen.toolTipText")); // NOI18N
        btnOpen.setFocusable(false);
        btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpen);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnSave.toolTipText")); // NOI18N
        btnSave.setEnabled(false);
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSave);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/delete.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnDelete.text")); // NOI18N
        btnDelete.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnDelete.toolTipText")); // NOI18N
        btnDelete.setEnabled(false);
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDelete);

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/export.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnExport.text")); // NOI18N
        btnExport.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnExport.toolTipText")); // NOI18N
        btnExport.setEnabled(false);
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExport);

        btnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/select.png"))); // NOI18N
        btnSelect.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(btnSelect, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnSelect.text")); // NOI18N
        btnSelect.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnSelect.toolTipText")); // NOI18N
        btnSelect.setEnabled(false);
        btnSelect.setFocusable(false);
        btnSelect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelect.setMaximumSize(new java.awt.Dimension(34, 34));
        btnSelect.setMinimumSize(new java.awt.Dimension(34, 34));
        btnSelect.setPreferredSize(new java.awt.Dimension(34, 34));
        btnSelect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSelect);

        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/connect.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnConnect, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnConnect.text")); // NOI18N
        btnConnect.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnConnect.toolTipText")); // NOI18N
        btnConnect.setEnabled(false);
        btnConnect.setFocusable(false);
        btnConnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConnect.setMaximumSize(new java.awt.Dimension(34, 34));
        btnConnect.setMinimumSize(new java.awt.Dimension(34, 34));
        btnConnect.setPreferredSize(new java.awt.Dimension(34, 34));
        btnConnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnConnect);

        btnCloud.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/cloud.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCloud, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnCloud.text")); // NOI18N
        btnCloud.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnCloud.toolTipText")); // NOI18N
        btnCloud.setFocusable(false);
        btnCloud.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCloud.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCloud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloudActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCloud);

        btnFrame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/frame.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnFrame, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnFrame.text")); // NOI18N
        btnFrame.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnFrame.toolTipText")); // NOI18N
        btnFrame.setFocusable(false);
        btnFrame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFrameActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFrame);

        btnAddBackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/add-background.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAddBackgroundImage, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnAddBackgroundImage.text")); // NOI18N
        btnAddBackgroundImage.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnAddBackgroundImage.toolTipText")); // NOI18N
        btnAddBackgroundImage.setFocusable(false);
        btnAddBackgroundImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddBackgroundImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddBackgroundImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBackgroundImageActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddBackgroundImage);

        btnRemoveBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/design/topology/res/remove-background.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRemoveBackground, org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnRemoveBackground.text")); // NOI18N
        btnRemoveBackground.setToolTipText(org.openide.util.NbBundle.getMessage(TopologyDesignTopComponent.class, "TopologyDesignTopComponent.btnRemoveBackground.toolTipText")); // NOI18N
        btnRemoveBackground.setEnabled(false);
        btnRemoveBackground.setFocusable(false);
        btnRemoveBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemoveBackground.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRemoveBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveBackgroundActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRemoveBackground);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        add(pnlMainScrollPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewTopologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTopologyActionPerformed
        if (!(boolean)configObject.getProperty("saved")) { //NOI18N
            switch (JOptionPane.showConfirmDialog(this, 
                    "This topology has not been saved, do you want to save it?", 
                    "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION)) {
                case JOptionPane.NO_OPTION:
                    break;
                case JOptionPane.YES_OPTION:
                    btnSaveActionPerformed(new ActionEvent(this, 0, "close"));
                    break;
                case JOptionPane.CANCEL_OPTION:
                    break;
            }
        }
        scene.clear();
        toggleButtons(false);
        service.setView(null);
        scene.setBackgroundImage(null);
        configObject.setProperty("saved", true);
        btnRemoveBackground.setEnabled(false);
        setHtmlDisplayName(getDisplayName());
    }//GEN-LAST:event_btnNewTopologyActionPerformed

    private void btnCloudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloudActionPerformed
        scene.addFreeCloud();
    }//GEN-LAST:event_btnCloudActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        btnConnect.setSelected(false);
        scene.setActiveTool(TopologyViewScene.ACTION_SELECT);
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        btnSelect.setSelected(false);
        scene.setActiveTool(TopologyViewScene.ACTION_CONNECT);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        ExportScenePanel exportPanel = new ExportScenePanel(new SceneExportFilter[]{ ImageFilter.getInstance() }, 
                scene, getDisplayName());
        DialogDescriptor dd = new DialogDescriptor(exportPanel, "Export Options", true, exportPanel);
        DialogDisplayer.getDefault().createDialog(dd).setVisible(true);
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (scene.getNodes().isEmpty() && scene.getBackgroundImage() == null) {
            JOptionPane.showMessageDialog(this, "The current topology is empty, it won't be saved", "New Topology", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            JTextField txtViewName = new JTextField();
            txtViewName.setName("txtViewName"); //NOI18N
            txtViewName.setColumns(10);
            
            JTextField txtViewDescription = new JTextField();
            txtViewDescription.setName("txtViewDescription"); //NOI18N
            txtViewDescription.setColumns(20);
            
            if(service.getView() != null) {
                txtViewName.setText(service.getView().getName());
                txtViewDescription.setText(service.getView().getDescription());
            }
            JComplexDialogPanel saveDialog = new JComplexDialogPanel(
                    new String[] {"Topology Name", "Topology Description"}, new JComponent[] {txtViewName, txtViewDescription});
            if (JOptionPane.showConfirmDialog(null, saveDialog, "Topology Details", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                String name = ((JTextField)saveDialog.getComponent("txtViewName")).getText();
                String description = ((JTextField)saveDialog.getComponent("txtViewDescription")).getText();
                
                if (service.getView() == null)
                    service.setView(new LocalObjectView(-1, TopologyViewService.CLASS_VIEW, name, description, scene.getAsXML(), scene.getBackgroundImage()));
                else {
                    service.getView().setName(name);
                    service.getView().setDescription(description);
                }
                if (service.saveCurrentView()) {
                    NotificationUtil.getInstance().showSimplePopup("Success", NotificationUtil.INFO_MESSAGE, "Topology saved successfully");
                    setHtmlDisplayName(getDisplayName());
                }
                
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFrameActionPerformed
        scene.addFreeFrame();
    }//GEN-LAST:event_btnFrameActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        if (!(boolean)configObject.getProperty("saved")) {
            switch(JOptionPane.showConfirmDialog(this, "This topology has not been saved, do you want to save it?", 
                    "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION)) {
                case JOptionPane.YES_OPTION:
                    btnSaveActionPerformed(new ActionEvent(this, 0, "close"));
                    break;
                case JOptionPane.CANCEL_OPTION:
                    return;
            }
        }
        List<LocalObjectViewLight> views = service.getViews();
        JComboBox<LocalObjectViewLight> lstViews = new JComboBox<>(views.toArray(new LocalObjectViewLight[0]));
        lstViews.setName("lstViews"); //NOI18N
        JComplexDialogPanel viewsDialog = new JComplexDialogPanel(new String[] {"Available topologies"}, new JComponent[] {lstViews});
        if (JOptionPane.showConfirmDialog(null, viewsDialog, "Choose a Topology", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            LocalObjectViewLight selectedView = (LocalObjectViewLight) ((JComboBox)viewsDialog.getComponent("lstViews")).getSelectedItem();
            if (selectedView != null) {
                LocalObjectView actualView = service.loadView(selectedView.getId());
                if (actualView != null) {
                    scene.clear();
                    service.setView(actualView);
                    scene.render(actualView.getStructure());
                    scene.setBackgroundImage(actualView.getBackground());
                    configObject.setProperty("saved", true);
                    setHtmlDisplayName(getDisplayName());
                    
                    if (actualView.getBackground() != null)
                        btnRemoveBackground.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the current topology?", 
                "Delete Topology", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            service.deleteView();
            scene.clear();
            toggleButtons(false);
            btnSelectActionPerformed(evt);
            service.setView(null);
            configObject.setProperty("saved", true);
            setHtmlDisplayName(getDisplayName());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddBackgroundImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBackgroundImageActionPerformed
        JFileChooser fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fChooser.setFileFilter(new FileNameExtensionFilter("Image files", "gif","jpg", "png"));
        if (fChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            try {
                Image myBackgroundImage = ImageIO.read(new File(fChooser.getSelectedFile().getAbsolutePath()));
                scene.setBackgroundImage(myBackgroundImage);
                scene.fireChangeEvent(new ActionEvent(scene, TopologyViewScene.SCENE_CHANGE, "Add Background"));
                btnRemoveBackground.setEnabled(true);
            } catch (IOException ex) {
                NotificationUtil.getInstance().showSimplePopup("Error", NotificationUtil.ERROR_MESSAGE, ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnAddBackgroundImageActionPerformed

    private void btnRemoveBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBackgroundActionPerformed
        scene.setBackgroundImage(null);
        btnRemoveBackground.setEnabled(false);
        scene.fireChangeEvent(new ActionEvent(scene, TopologyViewScene.SCENE_CHANGE, "Remove Background"));
    }//GEN-LAST:event_btnRemoveBackgroundActionPerformed
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBackgroundImage;
    private javax.swing.JButton btnCloud;
    private javax.swing.JToggleButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFrame;
    private javax.swing.JButton btnNewTopology;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnRemoveBackground;
    private javax.swing.JButton btnSave;
    private javax.swing.JToggleButton btnSelect;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane pnlMainScrollPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        scene.addChangeListener(this);
    }

    @Override
    public void componentClosed() {
        scene.removeAllListeners();
        if (!(boolean)configObject.getProperty("saved")) {
            switch (JOptionPane.showConfirmDialog(this, "This topology has not been saved, do you want to save it?",
                "Confirmation", JOptionPane.YES_NO_OPTION)){
                case JOptionPane.YES_OPTION:
                    btnSaveActionPerformed(new ActionEvent(this, 0, "close"));
            }
        }
        scene.clear();
        service.setView(null);
    }
    
    @Override
    public String getDisplayName() {
        if (service.getView() == null || service.getView().getId() == -1) 
            return "Unnamed View";
        else
            return service.getView().getName();
    }
    
    @Override
    public String getHtmlDisplayName() {
        if ((boolean)configObject.getProperty("saved"))
            return getDisplayName();
        else
            return String.format("<html><b>%s</b></html>", getDisplayName());
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        byte [] currentViewAXML = scene.getAsXML();
        scene.clear();
        scene.render(currentViewAXML);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getID() == TopologyViewScene.SCENE_CHANGE) {
            if ((boolean)configObject.getProperty("saved"))
                configObject.setProperty("saved", false);
            
            setHtmlDisplayName(getHtmlDisplayName());
            toggleButtons(true);
        }
    }
    
    public void toggleButtons(boolean enabled) {
        btnSave.setEnabled(enabled);
        btnDelete.setEnabled(enabled);
        btnExport.setEnabled(enabled);
        btnSelect.setEnabled(enabled);
        btnConnect.setEnabled(enabled);
    }
}
