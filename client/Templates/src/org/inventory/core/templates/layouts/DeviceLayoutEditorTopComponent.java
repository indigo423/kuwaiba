/*
 *  Copyright 2010-2018, Neotropic SAS <contact@neotropic.co>.
 *
 *  Licensed under the EPL License, Version 1.0 (the "License");
 *  you may not use this file except in compliance with the License
 *  You may obtain a copy of the License at
 *
 *       http://www.eclipse.org/legal/epl-v10.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.inventory.core.templates.layouts;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import org.inventory.communications.core.LocalObjectListItem;
import org.inventory.communications.util.Utils;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.api.notifications.NotificationUtil;
import org.inventory.core.services.api.notifications.StatusUtil;
import org.inventory.core.services.i18n.I18N;
import org.inventory.core.services.utils.ImageIconResource;
import org.inventory.core.services.utils.JComplexDialogPanel;
import org.inventory.core.templates.layouts.customshapes.CustomShapesTopComponent;
import org.inventory.core.templates.layouts.lookup.SharedContent;
import org.inventory.core.templates.layouts.scene.DeviceLayoutScene;
import org.inventory.core.templates.layouts.shapehierarchy.ShapeHierarchyTopComponent;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top Component used to define the Equipment Layouts
 * @author Johny Andres Ortega Ruiz <johny.ortega@kuwaiba.org>
 */
public final class DeviceLayoutEditorTopComponent extends TopComponent implements ActionListener, Refreshable {
    public static String ID = "DeviceLayoutEditorTopComponent_";
    private DeviceLayoutEditorService service;
    
    private DeviceLayoutConfigurationObject configObject;

    public DeviceLayoutEditorTopComponent() {
        initComponents();
        btnExport.setIcon(ImageIconResource.EXPORT_ICON);
        btnImport.setIcon(ImageIconResource.IMPORT_ICON);
    }
    
    public DeviceLayoutEditorTopComponent(LocalObjectListItem model) {
        this();
        configObject = new DeviceLayoutConfigurationObject();
        configObject.setProperty("saved", true); //NOI18N
        
        setDisplayName(model.toString() + " "  + I18N.gm("layout"));
        service = new DeviceLayoutEditorService(model);
        
        associateLookup(SharedContent.getInstance().getAbstractLookup());
        
        SharedContent.getInstance().getInstanceContent()
            .set(Collections.singleton(DeviceLayoutPalette.getInstance().getPalette()), null);
        
        pnlScroll.setViewportView(service.getScene().createView());
        add(service.getScene().createSatelliteView(), BorderLayout.SOUTH);
    }
    
    @Override
    protected String preferredID() {
        return ID + service.getModel().getId();
    }
    
    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlScroll = new javax.swing.JScrollPane();
        barMain = new javax.swing.JToolBar();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        separator1 = new javax.swing.JToolBar.Separator();
        btnGroup = new javax.swing.JButton();
        btnShowGuide = new javax.swing.JToggleButton();
        separator2 = new javax.swing.JToolBar.Separator();
        btnCustomShapes = new javax.swing.JButton();
        btnShowPalette = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnExport = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());
        add(pnlScroll, java.awt.BorderLayout.CENTER);

        barMain.setRollover(true);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnSave.text_1")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnSave.toolTipText_1")); // NOI18N
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        barMain.add(btnSave);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/delete.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnDelete.text_1")); // NOI18N
        btnDelete.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnDelete.toolTipText_1")); // NOI18N
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        barMain.add(btnDelete);

        btnClean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/clean.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnClean, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnClean.text_1")); // NOI18N
        btnClean.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnClean.toolTipText_1")); // NOI18N
        btnClean.setFocusable(false);
        btnClean.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClean.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });
        barMain.add(btnClean);
        barMain.add(separator1);

        btnGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/groupShapes.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnGroup, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnGroup.text")); // NOI18N
        btnGroup.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnGroup.toolTipText")); // NOI18N
        btnGroup.setFocusable(false);
        btnGroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGroupActionPerformed(evt);
            }
        });
        barMain.add(btnGroup);

        btnShowGuide.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/showGuide.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnShowGuide, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnShowGuide.text")); // NOI18N
        btnShowGuide.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnShowGuide.toolTipText")); // NOI18N
        btnShowGuide.setFocusable(false);
        btnShowGuide.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowGuide.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGuideActionPerformed(evt);
            }
        });
        barMain.add(btnShowGuide);
        barMain.add(separator2);

        btnCustomShapes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/custom_shapes.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCustomShapes, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnCustomShapes.text_1")); // NOI18N
        btnCustomShapes.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnCustomShapes.toolTipText_1")); // NOI18N
        btnCustomShapes.setFocusable(false);
        btnCustomShapes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCustomShapes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCustomShapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomShapesActionPerformed(evt);
            }
        });
        barMain.add(btnCustomShapes);

        btnShowPalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/inventory/core/templates/res/show_palette.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnShowPalette, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnShowPalette.text_1")); // NOI18N
        btnShowPalette.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnShowPalette.toolTipText_1")); // NOI18N
        btnShowPalette.setFocusable(false);
        btnShowPalette.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowPalette.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPaletteActionPerformed(evt);
            }
        });
        barMain.add(btnShowPalette);
        barMain.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnExport.text_1")); // NOI18N
        btnExport.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnExport.toolTipText")); // NOI18N
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setMaximumSize(new java.awt.Dimension(34, 34));
        btnExport.setMinimumSize(new java.awt.Dimension(34, 34));
        btnExport.setPreferredSize(new java.awt.Dimension(34, 34));
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        barMain.add(btnExport);

        org.openide.awt.Mnemonics.setLocalizedText(btnImport, org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnImport.text")); // NOI18N
        btnImport.setToolTipText(org.openide.util.NbBundle.getMessage(DeviceLayoutEditorTopComponent.class, "DeviceLayoutEditorTopComponent.btnImport.toolTipText")); // NOI18N
        btnImport.setFocusable(false);
        btnImport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImport.setMaximumSize(new java.awt.Dimension(34, 34));
        btnImport.setMinimumSize(new java.awt.Dimension(34, 34));
        btnImport.setPreferredSize(new java.awt.Dimension(34, 34));
        btnImport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        barMain.add(btnImport);

        add(barMain, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCustomShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomShapesActionPerformed
            CustomShapesTopComponent topComponent = (CustomShapesTopComponent) WindowManager.getDefault().findTopComponent("CustomShapesTopComponent"); //NOI18N
            if (topComponent == null) {
                topComponent = new CustomShapesTopComponent();
                topComponent.open();
            } else {
                if (topComponent.isOpened())
                    topComponent.requestAttention(true);
                else { //Even after closed, the TCs (even the no-singletons) continue to exist in the NBP's PersistenceManager registry, 
                       //so we will reuse the instance, refreshing the vierw first
                    topComponent.open();
                }
            }
            topComponent.requestActive();
    }//GEN-LAST:event_btnCustomShapesActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (service.getScene().getNodes().isEmpty()) {
            LayoutOutputManager.getInstance().getLayoutOutput(service.getModel())
                .printLine("The canvas is empty, the device layout cannot be saved", Color.RED);
            
            JOptionPane.showConfirmDialog(null, "The canvas is empty, the device layout cannot be saved", 
                I18N.gm("confirmation"), JOptionPane.OK_OPTION);
            setSaved(true);
            return;                                
        }
        
        if (service.saveLayout()) {
            btnDelete.setEnabled(true);
            setSaved(true);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnShowPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPaletteActionPerformed
        for (Mode mode : WindowManager.getDefault().getModes()) {
            for (TopComponent topComponent : WindowManager.getDefault().findMode(mode.getName()).getTopComponents()) {
                if (!topComponent.isOpened()) { // open the palette is was closed
                    if (topComponent.getClass().getName().equals("org.netbeans.spi.palette.PaletteTopComponent")) // NOI18N
                        topComponent.open();
                }
            }
        }
    }//GEN-LAST:event_btnShowPaletteActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the current device layout?", 
                I18N.gm("delete"), JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            
            if (service.deleteLayout()) {
                service.getScene().clear();
                NotificationUtil.getInstance().showSimplePopup(I18N.gm("information"), NotificationUtil.INFO_MESSAGE, "The current davice layout was deleted");
            } else
                NotificationUtil.getInstance().showSimplePopup(I18N.gm("information"), NotificationUtil.INFO_MESSAGE, "The current device layout can not be deleted");            
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the canvas?", 
                I18N.gm("confirmation"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            service.getScene().clear();
            setSaved(false);
        }
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGroupActionPerformed
        service.getScene().setAddContainerShape(true);
    }//GEN-LAST:event_btnGroupActionPerformed

    private void btnShowGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGuideActionPerformed
        if (!btnShowGuide.isSelected()) {
            service.getScene().getGuideLayer().setVisible(true);
            service.getScene().validate();
            service.getScene().paint();
            
        } else {
            service.getScene().getGuideLayer().setVisible(false);
            service.getScene().validate();
            service.getScene().paint();
        }
    }//GEN-LAST:event_btnShowGuideActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        final JTextField txtDeviceLayoutName = new JTextField();
        txtDeviceLayoutName.setName("txtDeviceLayoutName");
        txtDeviceLayoutName.setColumns(15);
        
        final String filePath = System.getProperty("user.home") + File.separator;
        final String deviceLayoutName = "DeviceLayout" + 
                                  Calendar.getInstance().get(Calendar.DAY_OF_YEAR) + "-" + Calendar.getInstance().get(Calendar.MINUTE) + 
                                  ".xml";
        txtDeviceLayoutName.setText(filePath + deviceLayoutName);
        
        final JFileChooser fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fChooser.setDialogTitle(I18N.gm("select_directory"));
        
        final JButton btnFileChooser = new JButton();
        btnFileChooser.setAction(new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String fileName = txtDeviceLayoutName.getText();
                if (!fileName.isEmpty()) {
                    if (!fileName.contains(".xml"))
                        fileName += ".xml";
                } else {
                    fileName = deviceLayoutName;
                }
                if (fChooser.showSaveDialog(btnFileChooser) == JFileChooser.APPROVE_OPTION) {
                    txtDeviceLayoutName.setText(fChooser.getSelectedFile().getAbsolutePath() + File.separator + fileName);
                }
            }
        });
        btnFileChooser.setText("...");
        btnFileChooser.setToolTipText(I18N.gm("select_directory"));
        btnFileChooser.setSize(34, 34);
        
        JPanel pnl = new JPanel();
        pnl.add(txtDeviceLayoutName);
        pnl.add(btnFileChooser);
        
        JComplexDialogPanel pnlExportDeviceLayout = new JComplexDialogPanel(new String[] {I18N.gm("name")}, new JComponent[] {pnl});
        if (JOptionPane.showConfirmDialog(null, pnlExportDeviceLayout, I18N.gm("export_as_xml"), JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(txtDeviceLayoutName.getText()), "utf-8"))) {
                
                DeviceLayoutExporter export = new DeviceLayoutExporter(service.getScene());
                
                writer.write(export.getAsXMl());
            } catch (Exception ex) {
                NotificationUtil.getInstance().showSimplePopup(I18N.gm("error"), 
                    NotificationUtil.ERROR_MESSAGE, I18N.gm("can_not_read_file"));
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser fChooser = new JFileChooser();
        fChooser.setAcceptAllFileFilterUsed(false);
        
        fChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.isDirectory())
                    return true;
                
                String functionPattern = "\\.xml$";

                Pattern pattern = Pattern.compile(functionPattern);
                Matcher matcher = pattern.matcher(f.getName());

                return matcher.find();
            }

            @Override
            public String getDescription() {
                return "XML Device Layout Files";
            }
        });
        
        fChooser.setMultiSelectionEnabled(false);
        
        fChooser.setDialogTitle("Select an XML Device Layout definition file");
        
        if (fChooser.showSaveDialog(btnImport) == JFileChooser.APPROVE_OPTION) {
            try {
                byte[] structure = Utils.getByteArrayFromFile(fChooser.getSelectedFile());
                
                DeviceLayoutImporter import_ = new DeviceLayoutImporter(fChooser.getSelectedFile().getAbsolutePath(), structure, service.getModel(), service.getScene());
                if(import_.importDeviceLayout()) {
                    btnClean.setEnabled(true);
                    btnDelete.setEnabled(true);
                    btnExport.setEnabled(true);
                }
            } catch (IOException ex) {
                NotificationUtil.getInstance().showSimplePopup(I18N.gm("error"), 
                    NotificationUtil.ERROR_MESSAGE, I18N.gm("can_not_read_file"));
            }
        }
        
    }//GEN-LAST:event_btnImportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barMain;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnCustomShapes;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGroup;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSave;
    private javax.swing.JToggleButton btnShowGuide;
    private javax.swing.JButton btnShowPalette;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JScrollPane pnlScroll;
    private javax.swing.JToolBar.Separator separator1;
    private javax.swing.JToolBar.Separator separator2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        StatusUtil.getInstance().setStatusText("");
        
        btnShowPaletteActionPerformed(null);

        service.renderLayout();      
        if (service.getDeviceLayoutView()== null) {
            btnDelete.setEnabled(false);
            btnClean.setEnabled(false);
            btnExport.setEnabled(false);
        }
        
        service.getScene().addChangeListener(this);         
    }

    @Override
    public void componentClosed() {
        checkForUnsavedView();
        
        StatusUtil.getInstance().setStatusText("");
        
        service.getScene().removeAllListeners();
        service.getScene().clear();
        
        ShapeHierarchyTopComponent topComponent = (ShapeHierarchyTopComponent) WindowManager.getDefault().findTopComponent("ShapeHierarchyTopComponent_" + service.getModel().getId()); //NOI18N
        if (topComponent != null) {
            if (topComponent.isOpened())
                topComponent.close();
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    @Override
    public String getDisplayName(){
        if (super.getDisplayName() == null)
            return "<" + I18N.gm("no_view") + ">";
        return super.getDisplayName().trim().isEmpty() ? "<" + I18N.gm("no_view") + ">" : super.getDisplayName();
    }
    
    @Override
    public void refresh() {
        DeviceLayoutPalette.getInstance().createPalette();
                
        SharedContent.getInstance().getInstanceContent()
            .set(Collections.singleton(DeviceLayoutPalette.getInstance().getPalette()), null);
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getID()){
            case DeviceLayoutScene.SCENE_CHANGE:
                setSaved(false);
                btnClean.setEnabled(true);
                break;
            case DeviceLayoutScene.SCENE_CHANGEANDSAVE:
                break;
        }
    }
    
    public void setSaved(boolean value) {
        configObject.setProperty("saved", value); //NOI18N
        
        if (value)
            this.setHtmlDisplayName(this.getDisplayName());
        else
            this.setHtmlDisplayName(String.format(I18N.gm("modified"), getDisplayName()));
    }
    
    public boolean checkForUnsavedView() {
        if (!(boolean) configObject.getProperty("saved")) { //NOI18N
            int option = JOptionPane.showConfirmDialog(null, "This divice layout has not been saved, do you want to save it?", 
                I18N.gm("confirmation"), JOptionPane.YES_NO_CANCEL_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                
                btnSaveActionPerformed(null);
                configObject.setProperty("saved", true); //NOI18N
                return true;
            }
            if (option == JOptionPane.NO_OPTION)
                return true;                
        } else
            return true;
        return false;
    }
    
}
