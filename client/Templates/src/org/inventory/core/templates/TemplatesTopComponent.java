/**
 * Copyright 2010-2018 Neotropic SAS <contact@neotropic.co>.
 * 
* Licensed under the EPL License, Version 1.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 * 
* http://www.eclipse.org/legal/epl-v10.html
 * 
* Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.inventory.core.templates;

import java.awt.event.KeyEvent;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import org.inventory.core.services.api.behaviors.Refreshable;
import org.inventory.core.services.i18n.I18N;
import org.inventory.core.templates.nodes.actions.DeleteTemplateElementAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Template Manager Top component.
 * @author Charles Edward Bedon Cortazar {@literal <charles.bedon@kuwaiba.org>}
 */
@ConvertAsProperties(
        dtd = "-//org.inventory.core.templates//Templates//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TemplatesTopComponent",
        iconBase="org/inventory/core/templates/res/icon.png", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.inventory.core.templates.TemplatesTopComponent")
@ActionReferences(value = {@ActionReference(path = "Menu/Tools"),
    @ActionReference(path = "Toolbars/04_Customization", position = 4)})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TemplatesAction",
        preferredID = "TemplatesTopComponent"
)
@Messages({
    "CTL_TemplatesAction=Template Manager"
})
public final class TemplatesTopComponent extends TopComponent implements ExplorerManager.Provider, Refreshable {

    private ExplorerManager em;
    private BeanTreeView treeMain;
    private TemplatesService service;
        
    public TemplatesTopComponent() {
        initComponents();
        initCustomComponents();
        setName(I18N.gm("top_component_name_template"));
        setToolTipText(I18N.gm("top_component_tool_tip_text_template"));
    }

    private void initCustomComponents() {
        service = new TemplatesService(this);
        em = new ExplorerManager();
        
        //Global actions
        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
        map.put(DeleteTemplateElementAction.ACTION_MAP_KEY, DeleteTemplateElementAction.getInstance());
        
        //Now the keystrokes
        InputMap keys = getInputMap(WHEN_IN_FOCUSED_WINDOW);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK), DefaultEditorKit.copyAction);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK), DefaultEditorKit.pasteAction);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), DeleteTemplateElementAction.ACTION_MAP_KEY);
        
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        
        treeMain = new BeanTreeView();
        treeMain.setRootVisible(false);
        add(treeMain);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(pnlMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane pnlMain;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        service.setRoot();
    }

    @Override
    public void componentClosed() {
        em.setRootContext(Node.EMPTY);
    }
    
    void writeProperties(java.util.Properties p) {}

    void readProperties(java.util.Properties p) {}

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void refresh() {
        componentClosed();
        componentOpened();
    }
}
